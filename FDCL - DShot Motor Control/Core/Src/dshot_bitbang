/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stm32f4xx_hal.h"
#include <stdio.h>

#define DSHOT600_US 1.67
#define DSHOT300_US 3.33
#define DSHOT150_US 6.67

#define DSHOT_MODE_US DSHOT300_US  // just swap this one line to change mode

#define DSHOT_FRAME_SIZE 16
#define DSHOT_BUFFER_SIZE (DSHOT_FRAME_SIZE + 2)  // 16 bits + 2 trailing zeros
#define DSHOT_TIMER_FREQ 100000000                // 100 MHz = 10 ns per tick

#define DSHOT_BIT_TICKS ((uint16_t)(DSHOT_MODE_US * (DSHOT_TIMER_FREQ / 1e6)))

/* ----- HIGH AND LOW DEFINITIONS FOR LOW CH POLARITY -----
#define DSHOT_HIGH ((DSHOT_BIT_TICKS * 38 + 50) / 100)  // 1 = short active
#define DSHOT_LOW ((DSHOT_BIT_TICKS * 75 + 50) / 100)  // 0 = long active
*/


/* ----- HIGH AND LOW DEFINITIONS FOR HIGH CH POLARITY -----
#define DSHOT_HIGH ((DSHOT_BIT_TICKS * 75 + 50) / 100)  // +50 for rounding
#define DSHOT_LOW  ((DSHOT_BIT_TICKS * 38 + 50) / 100)   // +50 for rounding
*/

#define DSHOT_HIGH_1 ((DSHOT_BIT_TICKS * 75 + 50) / 100)  // 250 cycles (2.5µs)
#define DSHOT_LOW_1  (DSHOT_BIT_TICKS - DSHOT_HIGH_1)     // 83 cycles (0.83µs)

#define DSHOT_HIGH_0 ((DSHOT_BIT_TICKS * 375 + 500) / 1000) // 125 cycles (1.25µs)
#define DSHOT_LOW_0  (DSHOT_BIT_TICKS - DSHOT_HIGH_0)      // 208 cycles (2.08µs)

#define SUSTAINED_DSHOT_delay_us 1000

#define DSHOT_PIN GPIO_PIN_1
#define DSHOT_PORT GPIOB

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void DWT_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t us);
void delayTicks(uint32_t ticks);
void send_dshot_bitbang(uint16_t throttle, uint8_t telemetry);
void sustained_dshot300(uint16_t throttle, uint8_t telemetry, uint16_t duration_ms);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  DWT_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  printf("\nDShot Bit Ticks: %d\r\n", DSHOT_BIT_TICKS);
  printf("DShot Buffer Size: %d\r\n", DSHOT_BUFFER_SIZE);
  printf("HCLK: %lu Hz\n", HAL_RCC_GetHCLKFreq());
  //HAL_Delay(2500);

  for (int i = 0; i < 4; i++){
      send_dshot_bitbang(0, 0); // throttle=1000, telemetry=0
      HAL_Delay(1000); // 50ms interval for testing
	  printf("BEEP!\r\n");
  }

  //If using 25 us delay ----> 20 000 iterations needed for one second
  printf("ARMING.\r\n");
  sustained_dshot300(0, 0, 1000);
  send_dshot_bitbang(48, 0);  // Minimum valid throttle value
  printf("------------------------------------ Initialization Complete ------------------------------------\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t throttle = 1000;
  while (1)
  {
	  send_dshot_bitbang(throttle ,0);
	  delay_us(500);
	  printf("Sending DShot Throttle: %d\r\n", throttle);
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* |---------- USE FOR TESTING GPIO ------------ INTERFERS WITH DMA WHEN ENABLED --------------- |
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;     // Push-Pull Output
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void send_dshot_bitbang(uint16_t throttle, uint8_t telemetry) {
    // Packet: 16 bits
    uint16_t packet = (throttle << 1) | (telemetry & 0x1);
    uint16_t csum = 0;
    uint16_t csum_data = packet;

    // 4-bit checksum
    for (int i = 0; i < 3; i++) {
        csum ^= csum_data;
        csum_data >>= 4;
    }
    csum &= 0xF;
    packet = (packet << 4) | csum;

    // Bit-bang output
    for (int i = 15; i >= 0; i--) {
        if (packet & (1 << i)) {
            // '1' bit: long high, short low
            HAL_GPIO_WritePin(DSHOT_PORT, DSHOT_PIN, GPIO_PIN_SET);
            delayTicks(DSHOT_HIGH_1);  // 250 cycles
            HAL_GPIO_WritePin(DSHOT_PORT, DSHOT_PIN, GPIO_PIN_RESET);
            delayTicks(DSHOT_LOW_1);   // 83 cycles
        } else {
            // '0' bit: short high, long low
            HAL_GPIO_WritePin(DSHOT_PORT, DSHOT_PIN, GPIO_PIN_SET);
            delayTicks(DSHOT_HIGH_0);  // 125 cycles
            HAL_GPIO_WritePin(DSHOT_PORT, DSHOT_PIN, GPIO_PIN_RESET);
            delayTicks(DSHOT_LOW_0);   // 208 cycles
        }
    }

    // 3 stop bits
    delayTicks(DSHOT_BIT_TICKS * 3);
}

void sustained_dshot300(uint16_t value, uint8_t telemetry, uint16_t duration_ms){
	printf("Sending Sustained DShot300 Pulse for %d Milliseconds.\r\n", duration_ms);
	//Convert ms to iterations: (1 ms) (1 us / .001 ms) (1 iteration / 50 us)

	float delay = (float)SUSTAINED_DSHOT_delay_us;
	float iterations_f = (float)duration_ms * 1000.0f / delay;  // 1 ms = 1000 us, 1 iteration every 50 us
	int iterations = (int)iterations_f;
	for (int i = 0; i < iterations; i++){
		send_dshot_bitbang(value, telemetry);
		delay_us(SUSTAINED_DSHOT_delay_us);
	}
}

void delay_us(uint32_t us)
{
	uint32_t start = DWT->CYCCNT;
	uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
	while ((DWT->CYCCNT - start) < ticks);

}

void delayTicks(uint32_t ticks) {
    volatile uint32_t start = DWT->CYCCNT;
    while ((DWT->CYCCNT - start) < ticks);
}
void DWT_Init(void){
	if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	    }

	    DWT->CYCCNT = 0;                             // Reset the counter
	    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;         // Enable the counter
}

int _write(int file, char *ptr, int len)
{
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
