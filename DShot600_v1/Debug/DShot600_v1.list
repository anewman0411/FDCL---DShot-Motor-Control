
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008fc4  08008fc4  00009fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009114  08009114  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009114  08009114  0000a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800911c  0800911c  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800911c  0800911c  0000a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009120  08009120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009124  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00006198  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006204  20006204  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001987e  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036bb  00000000  00000000  0002491a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  00027fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ce  00000000  00000000  00029580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043c9  00000000  00000000  0002a64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175a8  00000000  00000000  0002ea17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd09e  00000000  00000000  00045fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011305d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000638c  00000000  00000000  001130a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011942c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fac 	.word	0x08008fac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008fac 	.word	0x08008fac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fe94 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f842 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f962 	bl	8000880 <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 f92a 	bl	8000814 <MX_DMA_Init>
  MX_TIM5_Init();
 80005c0:	f000 f8a6 	bl	8000710 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80005c4:	f000 f8fc 	bl	80007c0 <MX_USART6_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c8:	f004 fcce 	bl	8004f68 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, SERIAL_QUEUE_ITEM_SIZE, NULL);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2180      	movs	r1, #128	@ 0x80
 80005d0:	200a      	movs	r0, #10
 80005d2:	f004 fdc0 	bl	8005156 <osMessageQueueNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <main+0x68>)
 80005da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x6c>)
 80005de:	2100      	movs	r1, #0
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x70>)
 80005e2:	f004 fd0b 	bl	8004ffc <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <main+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <main+0x78>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	480d      	ldr	r0, [pc, #52]	@ (8000628 <main+0x7c>)
 80005f2:	f004 fd03 	bl	8004ffc <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <main+0x80>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <main+0x84>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <main+0x88>)
 8000602:	f004 fcfb 	bl	8004ffc <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <main+0x8c>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f004 fcd0 	bl	8004fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x64>
 8000614:	2000045c 	.word	0x2000045c
 8000618:	08009054 	.word	0x08009054
 800061c:	08000c4d 	.word	0x08000c4d
 8000620:	200001d8 	.word	0x200001d8
 8000624:	08009078 	.word	0x08009078
 8000628:	08000c5d 	.word	0x08000c5d
 800062c:	200001dc 	.word	0x200001dc
 8000630:	0800909c 	.word	0x0800909c
 8000634:	08000cad 	.word	0x08000cad
 8000638:	200001e0 	.word	0x200001e0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 fe5a 	bl	8008304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	@ (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	@ 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fccd 	bl	8002060 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 fb2c 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 ff2e 	bl	8002550 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 fb15 	bl	8000d28 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <MX_TIM5_Init+0xac>)
 8000736:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 62;
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 8000746:	223e      	movs	r2, #62	@ 0x3e
 8000748:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000756:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 8000758:	f002 f9d6 	bl	8002b08 <HAL_TIM_PWM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000762:	f000 fae1 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4619      	mov	r1, r3
 8000774:	4810      	ldr	r0, [pc, #64]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 8000776:	f003 f91b 	bl	80039b0 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000780:	f000 fad2 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 800079c:	f002 fcbc 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80007a6:	f000 fabf 	bl	8000d28 <Error_Handler>
  {
    Error_Handler();
  }
	*/
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007aa:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <MX_TIM5_Init+0xa8>)
 80007ac:	f000 fb4c 	bl	8000e48 <HAL_TIM_MspPostInit>

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	@ 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000088 	.word	0x20000088
 80007bc:	40000c00 	.word	0x40000c00

080007c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART6_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART6_UART_Init+0x4c>)
 80007f8:	f003 f96a 	bl	8003ad0 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 fa91 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000130 	.word	0x20000130
 8000810:	40011400 	.word	0x40011400

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_DMA_Init+0x68>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <MX_DMA_Init+0x68>)
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_DMA_Init+0x68>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_DMA_Init+0x68>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <MX_DMA_Init+0x68>)
 8000840:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <MX_DMA_Init+0x68>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	200d      	movs	r0, #13
 8000858:	f000 fe3a 	bl	80014d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800085c:	200d      	movs	r0, #13
 800085e:	f000 fe53 	bl	8001508 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2105      	movs	r1, #5
 8000866:	2039      	movs	r0, #57	@ 0x39
 8000868:	f000 fe32 	bl	80014d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800086c:	2039      	movs	r0, #57	@ 0x39
 800086e:	f000 fe4b 	bl	8001508 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <MX_GPIO_Init+0x94>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a21      	ldr	r2, [pc, #132]	@ (8000914 <MX_GPIO_Init+0x94>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_GPIO_Init+0x94>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_GPIO_Init+0x94>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000914 <MX_GPIO_Init+0x94>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_GPIO_Init+0x94>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_GPIO_Init+0x94>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <MX_GPIO_Init+0x94>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_GPIO_Init+0x94>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ea:	2301      	movs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1_RX
 80008fa:	2307      	movs	r3, #7
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_GPIO_Init+0x98>)
 8000906:	f001 fa0f 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <prepare_bdshot_buffer>:

/* USER CODE BEGIN 4 */
void prepare_bdshot_buffer(uint16_t frame)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
    for (int i = 15; i >= 0; i--)
 800092a:	230f      	movs	r3, #15
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	e02a      	b.n	8000986 <prepare_bdshot_buffer+0x6a>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8000930:	88fa      	ldrh	r2, [r7, #6]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	fa42 f303 	asr.w	r3, r2, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00e      	beq.n	8000964 <prepare_bdshot_buffer+0x48>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // 1.25 µs (logic 1 inverted)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	617a      	str	r2, [r7, #20]
 800094c:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <prepare_bdshot_buffer+0x98>)
 800094e:	2169      	movs	r1, #105	@ 0x69
 8000950:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	617a      	str	r2, [r7, #20]
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <prepare_bdshot_buffer+0x98>)
 800095c:	2100      	movs	r1, #0
 800095e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000962:	e00d      	b.n	8000980 <prepare_bdshot_buffer+0x64>
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // 0.625 µs (logic 0 inverted)
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	617a      	str	r2, [r7, #20]
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <prepare_bdshot_buffer+0x98>)
 800096c:	2134      	movs	r1, #52	@ 0x34
 800096e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	617a      	str	r2, [r7, #20]
 8000978:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <prepare_bdshot_buffer+0x98>)
 800097a:	2100      	movs	r1, #0
 800097c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3b01      	subs	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	2b00      	cmp	r3, #0
 800098a:	dad1      	bge.n	8000930 <prepare_bdshot_buffer+0x14>
        }
    }

    dshot_buffer[buffer_index++] = 0;  // Final LOW
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	617a      	str	r2, [r7, #20]
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <prepare_bdshot_buffer+0x98>)
 8000994:	2100      	movs	r1, #0
 8000996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    dshot_buffer[buffer_index++] = 0;  // Extra delay
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	617a      	str	r2, [r7, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <prepare_bdshot_buffer+0x98>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009a8:	bf00      	nop
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	200001e4 	.word	0x200001e4

080009b8 <bdshot_crc>:

// Generate CRC (same as spec)
uint16_t bdshot_crc(uint16_t value) {
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
    uint16_t crc = value ^ (value >> 4) ^ (value >> 8);
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	091b      	lsrs	r3, r3, #4
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	4053      	eors	r3, r2
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4053      	eors	r3, r2
 80009d6:	81fb      	strh	r3, [r7, #14]
    crc = ~crc; // Invert bits
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	43db      	mvns	r3, r3
 80009dc:	81fb      	strh	r3, [r7, #14]
    return crc & 0x0F; // Mask to 4 bits
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	f003 030f 	and.w	r3, r3, #15
 80009e4:	b29b      	uxth	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	460a      	mov	r2, r1
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4613      	mov	r3, r2
 8000a00:	717b      	strb	r3, [r7, #5]
    value = (value << 1) | (telemetry ? 1 : 0);  // Add telemetry bit
 8000a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	80fb      	strh	r3, [r7, #6]
    uint8_t crc = bdshot_crc(value);
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffce 	bl	80009b8 <bdshot_crc>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
    return (value << 4) | crc;
 8000a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	b29b      	uxth	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry){
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	460a      	mov	r2, r1
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	4613      	mov	r3, r2
 8000a48:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8000a4a:	797a      	ldrb	r2, [r7, #5]
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffce 	bl	80009f2 <make_bdshot_frame>
 8000a56:	4603      	mov	r3, r0
 8000a58:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame);
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <prepare_bdshot_buffer>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <send_bdshot>:

void send_bdshot(uint32_t channel){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000a74:	239c      	movs	r3, #156	@ 0x9c
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <send_bdshot+0x2c>)
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <send_bdshot+0x30>)
 8000a7c:	f002 f894 	bl	8002ba8 <HAL_TIM_PWM_Start_DMA>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <send_bdshot+0x1e>
    {
        Error_Handler();
 8000a86:	f000 f94f 	bl	8000d28 <Error_Handler>
    }
    dshot_running = 1;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <send_bdshot+0x34>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001e4 	.word	0x200001e4
 8000a9c:	20000088 	.word	0x20000088
 8000aa0:	20000454 	.word	0x20000454

08000aa4 <check_bdshot_crc>:

bool check_bdshot_crc(uint16_t telemetry_frame)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
    // Extract data (12 bits)
    uint16_t data = telemetry_frame >> 4;
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	81fb      	strh	r3, [r7, #14]

    // Extract received CRC (4 bits)
    uint8_t received_crc = telemetry_frame & 0x0F;
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	737b      	strb	r3, [r7, #13]

    // Calculate CRC
    uint8_t crc = data ^ (data >> 4) ^ (data >> 8);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	091b      	lsrs	r3, r3, #4
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4053      	eors	r3, r2
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4053      	eors	r3, r2
 8000ad8:	733b      	strb	r3, [r7, #12]
    crc = ~crc & 0x0F;
 8000ada:	7b3b      	ldrb	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 030f 	and.w	r3, r3, #15
 8000ae4:	733b      	strb	r3, [r7, #12]

    // Check if CRC matches
    return (crc == received_crc);
 8000ae6:	7b3a      	ldrb	r2, [r7, #12]
 8000ae8:	7b7b      	ldrb	r3, [r7, #13]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <decode_eRPM>:

uint32_t decode_eRPM(uint16_t telemetry_frame)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
	if (!check_bdshot_crc(telemetry_frame)){
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffc9 	bl	8000aa4 <check_bdshot_crc>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <decode_eRPM+0x24>
		return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e01c      	b.n	8000b5e <decode_eRPM+0x5e>
	}
    // Extract fields
    uint8_t exponent = (telemetry_frame >> 12) & 0x07; // 3-bit shift amount
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	0b1b      	lsrs	r3, r3, #12
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 0307 	and.w	r3, r3, #7
 8000b30:	75fb      	strb	r3, [r7, #23]
    uint16_t mantissa = (telemetry_frame >> 4) & 0x1FF; // 9-bit period base
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	091b      	lsrs	r3, r3, #4
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b3c:	82bb      	strh	r3, [r7, #20]

    // Calculate period in microseconds
    uint32_t period_us = mantissa << exponent;
 8000b3e:	8aba      	ldrh	r2, [r7, #20]
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	613b      	str	r3, [r7, #16]

    // Avoid divide by zero
    if (period_us == 0)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <decode_eRPM+0x52>
        return 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e005      	b.n	8000b5e <decode_eRPM+0x5e>

    // Calculate eRPM: eRPM = (1_000_000 * 60) / period
    uint32_t erpm = (60000000UL) / period_us;
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <decode_eRPM+0x68>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	60fb      	str	r3, [r7, #12]

    return erpm;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	03938700 	.word	0x03938700

08000b6c <_write>:
	uint32_t ticks = us * 168;
	return ticks;
}

int _write(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0a4      	sub	sp, #144	@ 0x90
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7c:	dd01      	ble.n	8000b82 <_write+0x16>
 8000b7e:	237f      	movs	r3, #127	@ 0x7f
 8000b80:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f007 fc93 	bl	80084b6 <memcpy>
    msg[len] = '\0'; // Null-terminate
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <_write+0x4c>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	f107 0110 	add.w	r1, r7, #16
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f004 fb48 	bl	800523c <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3790      	adds	r7, #144	@ 0x90
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000045c 	.word	0x2000045c

08000bbc <HAL_UART_RxCpltCallback>:
    dshot_running = 0;
}
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0a4      	sub	sp, #144	@ 0x90
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12e      	bne.n	8000c2c <HAL_UART_RxCpltCallback+0x70>
    {
    	printf("UART CALLBACK\r\n");
 8000bce:	481a      	ldr	r0, [pc, #104]	@ (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000bd0:	f007 fa82 	bl	80080d8 <puts>

        uint16_t telemetry_frame = (telemetry_buffer[0] << 8) | telemetry_buffer[1];
 8000bd4:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        uint32_t rpm = decode_eRPM(telemetry_frame);
 8000bec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff85 	bl	8000b00 <decode_eRPM>
 8000bf6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

        if (rpm > 0)
 8000bfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00f      	beq.n	8000c22 <HAL_UART_RxCpltCallback+0x66>
        {
            char rpm_msg[SERIAL_QUEUE_ITEM_SIZE];
            snprintf(rpm_msg, sizeof(rpm_msg), "Telemetry RPM: %lu\n", rpm);
 8000c02:	f107 0008 	add.w	r0, r7, #8
 8000c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000c0c:	2180      	movs	r1, #128	@ 0x80
 8000c0e:	f007 fa6b 	bl	80080e8 <sniprintf>
            osMessageQueuePut(serialQueueHandle, rpm_msg, 0, 0);
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_UART_RxCpltCallback+0x88>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f107 0108 	add.w	r1, r7, #8
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f004 fb0d 	bl	800523c <osMessageQueuePut>
        }

        // Re-arm DMA reception for the next telemetry frame
        HAL_UART_Receive_DMA(&huart6, telemetry_buffer, sizeof(telemetry_buffer));
 8000c22:	2202      	movs	r2, #2
 8000c24:	4905      	ldr	r1, [pc, #20]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000c26:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <HAL_UART_RxCpltCallback+0x8c>)
 8000c28:	f003 f82d 	bl	8003c86 <HAL_UART_Receive_DMA>
    }
}
 8000c2c:	bf00      	nop
 8000c2e:	3790      	adds	r7, #144	@ 0x90
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40011400 	.word	0x40011400
 8000c38:	08008fe8 	.word	0x08008fe8
 8000c3c:	20000458 	.word	0x20000458
 8000c40:	08008ff8 	.word	0x08008ff8
 8000c44:	2000045c 	.word	0x2000045c
 8000c48:	20000130 	.word	0x20000130

08000c4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 fa63 	bl	8005120 <osDelay>
 8000c5a:	e7fb      	b.n	8000c54 <StartDefaultTask+0x8>

08000c5c <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8000c64:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <DShotTask+0x44>)
 8000c66:	f007 fa37 	bl	80080d8 <puts>

    // Step 1: Send ARM command (value 0)
	printf("Arming.\r\n");
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <DShotTask+0x48>)
 8000c6c:	f007 fa34 	bl	80080d8 <puts>
	queue_bdshot_pulse(0, true);
 8000c70:	2101      	movs	r1, #1
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fee1 	bl	8000a3a <queue_bdshot_pulse>
	send_bdshot(TIM_CHANNEL_1);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fef7 	bl	8000a6c <send_bdshot>

    osDelay(3000);  // Wait 300ms (Bluejay requires for arming)
 8000c7e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c82:	f004 fa4d 	bl	8005120 <osDelay>

    //Approximately 84 ticks in 1 microsecond (Timer Clock = 84 MHz)
    printf("Throttling.\r\n");
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <DShotTask+0x4c>)
 8000c88:	f007 fa26 	bl	80080d8 <puts>
    queue_bdshot_pulse(100, true);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2064      	movs	r0, #100	@ 0x64
 8000c90:	f7ff fed3 	bl	8000a3a <queue_bdshot_pulse>
    send_bdshot(TIM_CHANNEL_1);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fee9 	bl	8000a6c <send_bdshot>
    while (1)
 8000c9a:	bf00      	nop
 8000c9c:	e7fd      	b.n	8000c9a <DShotTask+0x3e>
 8000c9e:	bf00      	nop
 8000ca0:	0800900c 	.word	0x0800900c
 8000ca4:	08009020 	.word	0x08009020
 8000ca8:	0800902c 	.word	0x0800902c

08000cac <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0a2      	sub	sp, #136	@ 0x88
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  char msg[SERIAL_QUEUE_ITEM_SIZE];

  // Start DMA reception
  HAL_UART_Receive_DMA(&huart6, telemetry_buffer, sizeof(telemetry_buffer));
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	4910      	ldr	r1, [pc, #64]	@ (8000cf8 <StartSerialTask+0x4c>)
 8000cb8:	4810      	ldr	r0, [pc, #64]	@ (8000cfc <StartSerialTask+0x50>)
 8000cba:	f002 ffe4 	bl	8003c86 <HAL_UART_Receive_DMA>

  for(;;)
  {
    // 1️⃣ Process serial debug messages
    if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <StartSerialTask+0x54>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	f107 0108 	add.w	r1, r7, #8
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f004 fb17 	bl	80052fc <osMessageQueueGet>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10d      	bne.n	8000cf0 <StartSerialTask+0x44>
    {
      HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa79 	bl	80001d0 <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f107 0108 	add.w	r1, r7, #8
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <StartSerialTask+0x50>)
 8000cec:	f002 ff40 	bl	8003b70 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart6, (uint8_t *)rpm_msg, strlen(rpm_msg), HAL_MAX_DELAY);
      }
    }
    */

    osDelay(1); // Small delay to allow other tasks to run
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f004 fa15 	bl	8005120 <osDelay>
    if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000cf6:	e7e2      	b.n	8000cbe <StartSerialTask+0x12>
 8000cf8:	20000458 	.word	0x20000458
 8000cfc:	20000130 	.word	0x20000130
 8000d00:	2000045c 	.word	0x2000045c

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d16:	f000 fb03 	bl	8001320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001c00 	.word	0x40001c00

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a11      	ldr	r2, [pc, #68]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_MspInit+0x54>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 fba9 	bl	80014d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a27      	ldr	r2, [pc, #156]	@ (8000e38 <HAL_TIM_PWM_MspInit+0xac>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d147      	bne.n	8000e2e <HAL_TIM_PWM_MspInit+0xa2>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <HAL_TIM_PWM_MspInit+0xb0>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	4a25      	ldr	r2, [pc, #148]	@ (8000e3c <HAL_TIM_PWM_MspInit+0xb0>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dae:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <HAL_TIM_PWM_MspInit+0xb0>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <HAL_TIM_PWM_MspInit+0xb8>)
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dc2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000dc6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dca:	2240      	movs	r2, #64	@ 0x40
 8000dcc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dda:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dea:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000df6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dfa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000e02:	480f      	ldr	r0, [pc, #60]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e04:	f000 fb8e 	bl	8001524 <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8000e0e:	f7ff ff8b 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e18:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2032      	movs	r0, #50	@ 0x32
 8000e24:	f000 fb54 	bl	80014d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e28:	2032      	movs	r0, #50	@ 0x32
 8000e2a:	f000 fb6d 	bl	8001508 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40000c00 	.word	0x40000c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	200000d0 	.word	0x200000d0
 8000e44:	40026040 	.word	0x40026040

08000e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <HAL_TIM_MspPostInit+0x68>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d11d      	bne.n	8000ea6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_TIM_MspPostInit+0x6c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_TIM_MspPostInit+0x6c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e86:	2301      	movs	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_TIM_MspPostInit+0x70>)
 8000ea2:	f000 ff41 	bl	8001d28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40000c00 	.word	0x40000c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a34      	ldr	r2, [pc, #208]	@ (8000fac <HAL_UART_MspInit+0xf0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d162      	bne.n	8000fa4 <HAL_UART_MspInit+0xe8>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a32      	ldr	r2, [pc, #200]	@ (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000ee8:	f043 0320 	orr.w	r3, r3, #32
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f003 0320 	and.w	r3, r3, #32
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <HAL_UART_MspInit+0xf4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23c0      	movs	r3, #192	@ 0xc0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f26:	2308      	movs	r3, #8
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4820      	ldr	r0, [pc, #128]	@ (8000fb4 <HAL_UART_MspInit+0xf8>)
 8000f32:	f000 fef9 	bl	8001d28 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f38:	4a20      	ldr	r2, [pc, #128]	@ (8000fbc <HAL_UART_MspInit+0x100>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f3e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f7a:	f000 fad3 	bl	8001524 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f84:	f7ff fed0 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_UART_MspInit+0xfc>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2105      	movs	r1, #5
 8000f98:	2047      	movs	r0, #71	@ 0x47
 8000f9a:	f000 fa99 	bl	80014d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f9e:	2047      	movs	r0, #71	@ 0x47
 8000fa0:	f000 fab2 	bl	8001508 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	@ 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	20000178 	.word	0x20000178
 8000fbc:	40026428 	.word	0x40026428

08000fc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	@ 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4b33      	ldr	r3, [pc, #204]	@ (80010a4 <HAL_InitTick+0xe4>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <HAL_InitTick+0xe4>)
 8000fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe0:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <HAL_InitTick+0xe4>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fec:	f107 0210 	add.w	r2, r7, #16
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fc8a 	bl	8002910 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001006:	f001 fc5b 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 800100a:	6378      	str	r0, [r7, #52]	@ 0x34
 800100c:	e004      	b.n	8001018 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800100e:	f001 fc57 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 8001012:	4603      	mov	r3, r0
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101a:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <HAL_InitTick+0xe8>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c9b      	lsrs	r3, r3, #18
 8001022:	3b01      	subs	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <HAL_InitTick+0xec>)
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <HAL_InitTick+0xf0>)
 800102a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <HAL_InitTick+0xec>)
 800102e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001032:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001034:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <HAL_InitTick+0xec>)
 8001036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001038:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_InitTick+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_InitTick+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_InitTick+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 800104c:	4817      	ldr	r0, [pc, #92]	@ (80010ac <HAL_InitTick+0xec>)
 800104e:	f001 fc91 	bl	8002974 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800105c:	2b00      	cmp	r3, #0
 800105e:	d11b      	bne.n	8001098 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8001060:	4812      	ldr	r0, [pc, #72]	@ (80010ac <HAL_InitTick+0xec>)
 8001062:	f001 fce1 	bl	8002a28 <HAL_TIM_Base_Start_IT>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800106c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001070:	2b00      	cmp	r3, #0
 8001072:	d111      	bne.n	8001098 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001074:	202c      	movs	r0, #44	@ 0x2c
 8001076:	f000 fa47 	bl	8001508 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d808      	bhi.n	8001092 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	202c      	movs	r0, #44	@ 0x2c
 8001086:	f000 fa23 	bl	80014d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <HAL_InitTick+0xf4>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e002      	b.n	8001098 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001098:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800109c:	4618      	mov	r0, r3
 800109e:	3738      	adds	r7, #56	@ 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	20000460 	.word	0x20000460
 80010b0:	40001c00 	.word	0x40001c00
 80010b4:	20000004 	.word	0x20000004

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <DMA1_Stream2_IRQHandler+0x10>)
 80010f6:	f000 fbad 	bl	8001854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000d0 	.word	0x200000d0

08001104 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800110a:	f001 ff15 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000460 	.word	0x20000460

08001118 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <TIM5_IRQHandler+0x10>)
 800111e:	f001 ff0b 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000088 	.word	0x20000088

0800112c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001130:	4802      	ldr	r0, [pc, #8]	@ (800113c <DMA2_Stream1_IRQHandler+0x10>)
 8001132:	f000 fb8f 	bl	8001854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000178 	.word	0x20000178

08001140 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <USART6_IRQHandler+0x10>)
 8001146:	f002 fdc3 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000130 	.word	0x20000130

08001154 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e00a      	b.n	800117c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001166:	f3af 8000 	nop.w
 800116a:	4601      	mov	r1, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbf0      	blt.n	8001166 <_read+0x12>
  }

  return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_close>:
  }
  return len;
}

int _close(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b6:	605a      	str	r2, [r3, #4]
  return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_isatty>:

int _isatty(int file)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f007 f918 	bl	800845c <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20020000 	.word	0x20020000
 8001258:	00000400 	.word	0x00000400
 800125c:	200004a8 	.word	0x200004a8
 8001260:	20006208 	.word	0x20006208

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800128c:	f7ff ffea 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f007 f8d7 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff f977 	bl	80005ac <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012cc:	08009124 	.word	0x08009124
  ldr r2, =_sbss
 80012d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012d4:	20006204 	.word	0x20006204

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f8d8 	bl	80014ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	200f      	movs	r0, #15
 800130c:	f7ff fe58 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fd10 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	200004ac 	.word	0x200004ac

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200004ac 	.word	0x200004ac

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	@ (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff4c 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e2:	f7ff ff61 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff ffb1 	bl	8001454 <NVIC_EncodePriority>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff80 	bl	8001400 <__NVIC_SetPriority>
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff54 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ff0a 	bl	8001348 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e099      	b.n	8001674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001560:	e00f      	b.n	8001582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001562:	f7ff fef1 	bl	8001348 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b05      	cmp	r3, #5
 800156e:	d908      	bls.n	8001582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e078      	b.n	8001674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e8      	bne.n	8001562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <HAL_DMA_Init+0x158>)
 800159c:	4013      	ands	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d107      	bne.n	80015ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	4313      	orrs	r3, r2
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f023 0307 	bic.w	r3, r3, #7
 8001602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	2b04      	cmp	r3, #4
 8001614:	d117      	bne.n	8001646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fb01 	bl	8001c30 <DMA_CheckFifoParam>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2240      	movs	r2, #64	@ 0x40
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001642:	2301      	movs	r3, #1
 8001644:	e016      	b.n	8001674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fab8 	bl	8001bc4 <DMA_CalcBaseAndBitshift>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	223f      	movs	r2, #63	@ 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	f010803f 	.word	0xf010803f

08001680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_DMA_Start_IT+0x26>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e040      	b.n	8001728 <HAL_DMA_Start_IT+0xa8>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d12f      	bne.n	800171a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2202      	movs	r2, #2
 80016be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fa4a 	bl	8001b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d8:	223f      	movs	r2, #63	@ 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0216 	orr.w	r2, r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0208 	orr.w	r2, r2, #8
 8001706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e005      	b.n	8001726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001722:	2302      	movs	r3, #2
 8001724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001726:	7dfb      	ldrb	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800173e:	f7ff fe03 	bl	8001348 <HAL_GetTick>
 8001742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d008      	beq.n	8001762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e052      	b.n	8001808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_Abort+0x62>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b2:	e013      	b.n	80017dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b4:	f7ff fdc8 	bl	8001348 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d90c      	bls.n	80017dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e015      	b.n	8001808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1e4      	bne.n	80017b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ee:	223f      	movs	r2, #63	@ 0x3f
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d004      	beq.n	800182e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00c      	b.n	8001848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001860:	4b8e      	ldr	r3, [pc, #568]	@ (8001a9c <HAL_DMA_IRQHandler+0x248>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a8e      	ldr	r2, [pc, #568]	@ (8001aa0 <HAL_DMA_IRQHandler+0x24c>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0a9b      	lsrs	r3, r3, #10
 800186c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2208      	movs	r2, #8
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0204 	bic.w	r2, r2, #4
 80018a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	2208      	movs	r2, #8
 80018ae:	409a      	lsls	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c4:	2201      	movs	r2, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d012      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2201      	movs	r2, #1
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ee:	f043 0202 	orr.w	r2, r3, #2
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fa:	2204      	movs	r2, #4
 80018fc:	409a      	lsls	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d012      	beq.n	800192c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	2204      	movs	r2, #4
 800191a:	409a      	lsls	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001924:	f043 0204 	orr.w	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	2210      	movs	r2, #16
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d043      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03c      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194e:	2210      	movs	r2, #16
 8001950:	409a      	lsls	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d018      	beq.n	8001996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d108      	bne.n	8001984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d024      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
 8001982:	e01f      	b.n	80019c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01b      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
 8001994:	e016      	b.n	80019c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0208 	bic.w	r2, r2, #8
 80019b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c8:	2220      	movs	r2, #32
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 808f 	beq.w	8001af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8087 	beq.w	8001af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2220      	movs	r2, #32
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d136      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0216 	bic.w	r2, r2, #22
 8001a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x1da>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0208 	bic.w	r2, r2, #8
 8001a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a42:	223f      	movs	r2, #63	@ 0x3f
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07e      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
        }
        return;
 8001a6a:	e079      	b.n	8001b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d01d      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10d      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d031      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
 8001a98:	e02c      	b.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d023      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
 8001ab4:	e01e      	b.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0210 	bic.w	r2, r2, #16
 8001ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d032      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d022      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d307      	bcc.n	8001b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f2      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x2cc>
 8001b3a:	e000      	b.n	8001b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b60:	bf00      	nop
    }
  }
}
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b40      	cmp	r3, #64	@ 0x40
 8001b94:	d108      	bne.n	8001ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ba6:	e007      	b.n	8001bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3b10      	subs	r3, #16
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <DMA_CalcBaseAndBitshift+0x64>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bde:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <DMA_CalcBaseAndBitshift+0x68>)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d909      	bls.n	8001c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c04:	e007      	b.n	8001c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	aaaaaaab 	.word	0xaaaaaaab
 8001c2c:	080090d8 	.word	0x080090d8

08001c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11f      	bne.n	8001c8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d856      	bhi.n	8001cfe <DMA_CheckFifoParam+0xce>
 8001c50:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <DMA_CheckFifoParam+0x28>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c7b 	.word	0x08001c7b
 8001c60:	08001c69 	.word	0x08001c69
 8001c64:	08001cff 	.word	0x08001cff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d046      	beq.n	8001d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c78:	e043      	b.n	8001d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c82:	d140      	bne.n	8001d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c88:	e03d      	b.n	8001d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c92:	d121      	bne.n	8001cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d837      	bhi.n	8001d0a <DMA_CheckFifoParam+0xda>
 8001c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca0 <DMA_CheckFifoParam+0x70>)
 8001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca0:	08001cb1 	.word	0x08001cb1
 8001ca4:	08001cb7 	.word	0x08001cb7
 8001ca8:	08001cb1 	.word	0x08001cb1
 8001cac:	08001cc9 	.word	0x08001cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb4:	e030      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d025      	beq.n	8001d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc6:	e022      	b.n	8001d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cd0:	d11f      	bne.n	8001d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cd6:	e01c      	b.n	8001d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d903      	bls.n	8001ce6 <DMA_CheckFifoParam+0xb6>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d003      	beq.n	8001cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ce4:	e018      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cea:	e015      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cfc:	e00b      	b.n	8001d16 <DMA_CheckFifoParam+0xe6>
      break;
 8001cfe:	bf00      	nop
 8001d00:	e00a      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d02:	bf00      	nop
 8001d04:	e008      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d06:	bf00      	nop
 8001d08:	e006      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e004      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e002      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
    }
  } 
  
  return status; 
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e16b      	b.n	800201c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 815a 	bne.w	8002016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d005      	beq.n	8001d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d130      	bne.n	8001ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d017      	beq.n	8001e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80b4 	beq.w	8002016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b60      	ldr	r3, [pc, #384]	@ (8002034 <HAL_GPIO_Init+0x30c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002034 <HAL_GPIO_Init+0x30c>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8002034 <HAL_GPIO_Init+0x30c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a5b      	ldr	r2, [pc, #364]	@ (8002038 <HAL_GPIO_Init+0x310>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	@ (800203c <HAL_GPIO_Init+0x314>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a51      	ldr	r2, [pc, #324]	@ (8002040 <HAL_GPIO_Init+0x318>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a50      	ldr	r2, [pc, #320]	@ (8002044 <HAL_GPIO_Init+0x31c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4f      	ldr	r2, [pc, #316]	@ (8002048 <HAL_GPIO_Init+0x320>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4d      	ldr	r2, [pc, #308]	@ (8002050 <HAL_GPIO_Init+0x328>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	@ (8002054 <HAL_GPIO_Init+0x32c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x20e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	@ (8002058 <HAL_GPIO_Init+0x330>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x20a>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e00e      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f32:	2308      	movs	r3, #8
 8001f34:	e00c      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e00a      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x228>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	@ (8002038 <HAL_GPIO_Init+0x310>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a32      	ldr	r2, [pc, #200]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a27      	ldr	r2, [pc, #156]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <HAL_GPIO_Init+0x334>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f ae90 	bls.w	8001d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40021400 	.word	0x40021400
 8002054:	40021800 	.word	0x40021800
 8002058:	40021c00 	.word	0x40021c00
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e267      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d075      	beq.n	800216a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800207e:	4b88      	ldr	r3, [pc, #544]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4b85      	ldr	r3, [pc, #532]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002092:	2b08      	cmp	r3, #8
 8002094:	d112      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b82      	ldr	r3, [pc, #520]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020a2:	d10b      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4b7e      	ldr	r3, [pc, #504]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d05b      	beq.n	8002168 <HAL_RCC_OscConfig+0x108>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d157      	bne.n	8002168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e242      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCC_OscConfig+0x74>
 80020c6:	4b76      	ldr	r3, [pc, #472]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a75      	ldr	r2, [pc, #468]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xb0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x98>
 80020de:	4b70      	ldr	r3, [pc, #448]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6f      	ldr	r2, [pc, #444]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6d      	ldr	r3, [pc, #436]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6c      	ldr	r2, [pc, #432]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xb0>
 80020f8:	4b69      	ldr	r3, [pc, #420]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a68      	ldr	r2, [pc, #416]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b66      	ldr	r3, [pc, #408]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a65      	ldr	r2, [pc, #404]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff f916 	bl	8001348 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff f912 	bl	8001348 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e207      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xc0>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff f902 	bl	8001348 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff f8fe 	bl	8001348 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	@ 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1f3      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b51      	ldr	r3, [pc, #324]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0xe8>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002176:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002182:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800218a:	2b08      	cmp	r3, #8
 800218c:	d11c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b44      	ldr	r3, [pc, #272]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x152>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1c7      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4937      	ldr	r1, [pc, #220]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	e03a      	b.n	800223e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <HAL_RCC_OscConfig+0x244>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7ff f8b7 	bl	8001348 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff f8b3 	bl	8001348 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1a8      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4925      	ldr	r1, [pc, #148]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_RCC_OscConfig+0x244>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff f896 	bl	8001348 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff f892 	bl	8001348 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e187      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d036      	beq.n	80022b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d016      	beq.n	8002280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_RCC_OscConfig+0x248>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff f876 	bl	8001348 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff f872 	bl	8001348 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e167      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_OscConfig+0x240>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x200>
 800227e:	e01b      	b.n	80022b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_OscConfig+0x248>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7ff f85f 	bl	8001348 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	e00e      	b.n	80022ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff f85b 	bl	8001348 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d907      	bls.n	80022ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e150      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	42470000 	.word	0x42470000
 80022a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	4b88      	ldr	r3, [pc, #544]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ea      	bne.n	800228e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8097 	beq.w	80023f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ca:	4b81      	ldr	r3, [pc, #516]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b7d      	ldr	r3, [pc, #500]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	4a7c      	ldr	r2, [pc, #496]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e6:	4b7a      	ldr	r3, [pc, #488]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b77      	ldr	r3, [pc, #476]	@ (80024d4 <HAL_RCC_OscConfig+0x474>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d118      	bne.n	8002334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002302:	4b74      	ldr	r3, [pc, #464]	@ (80024d4 <HAL_RCC_OscConfig+0x474>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a73      	ldr	r2, [pc, #460]	@ (80024d4 <HAL_RCC_OscConfig+0x474>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230e:	f7ff f81b 	bl	8001348 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002316:	f7ff f817 	bl	8001348 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e10c      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b6a      	ldr	r3, [pc, #424]	@ (80024d4 <HAL_RCC_OscConfig+0x474>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x2ea>
 800233c:	4b64      	ldr	r3, [pc, #400]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002340:	4a63      	ldr	r2, [pc, #396]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6713      	str	r3, [r2, #112]	@ 0x70
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x324>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x30c>
 8002352:	4b5f      	ldr	r3, [pc, #380]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	4a5e      	ldr	r2, [pc, #376]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6713      	str	r3, [r2, #112]	@ 0x70
 800235e:	4b5c      	ldr	r3, [pc, #368]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	4a5b      	ldr	r2, [pc, #364]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6713      	str	r3, [r2, #112]	@ 0x70
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0x324>
 800236c:	4b58      	ldr	r3, [pc, #352]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002370:	4a57      	ldr	r2, [pc, #348]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	6713      	str	r3, [r2, #112]	@ 0x70
 8002378:	4b55      	ldr	r3, [pc, #340]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	4a54      	ldr	r2, [pc, #336]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe ffdc 	bl	8001348 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe ffd8 	bl	8001348 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0cb      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ee      	beq.n	8002394 <HAL_RCC_OscConfig+0x334>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7fe ffc6 	bl	8001348 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe ffc2 	bl	8001348 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0b5      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d6:	4b3e      	ldr	r3, [pc, #248]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ee      	bne.n	80023c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	4a38      	ldr	r2, [pc, #224]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80023ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a1 	beq.w	8002540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	d05c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d141      	bne.n	8002496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_RCC_OscConfig+0x478>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe ff96 	bl	8001348 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe ff92 	bl	8001348 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e087      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002432:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	3b01      	subs	r3, #1
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	491b      	ldr	r1, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x478>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe ff6b 	bl	8001348 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe ff67 	bl	8001348 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e05c      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x416>
 8002494:	e054      	b.n	8002540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_RCC_OscConfig+0x478>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe ff54 	bl	8001348 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe ff50 	bl	8001348 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e045      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x444>
 80024c2:	e03d      	b.n	8002540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e038      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000
 80024d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_RCC_OscConfig+0x4ec>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d028      	beq.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d121      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d11a      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002514:	4293      	cmp	r3, r2
 8002516:	d111      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	085b      	lsrs	r3, r3, #1
 8002524:	3b01      	subs	r3, #1
 8002526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0cc      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b68      	ldr	r3, [pc, #416]	@ (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d90c      	bls.n	800258c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b65      	ldr	r3, [pc, #404]	@ (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b63      	ldr	r3, [pc, #396]	@ (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b8      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a58      	ldr	r2, [pc, #352]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025bc:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b50      	ldr	r3, [pc, #320]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	494d      	ldr	r1, [pc, #308]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d044      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b47      	ldr	r3, [pc, #284]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d119      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d003      	beq.n	800260e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b3f      	ldr	r3, [pc, #252]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3b      	ldr	r3, [pc, #236]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e067      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b37      	ldr	r3, [pc, #220]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4934      	ldr	r1, [pc, #208]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe fe82 	bl	8001348 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe fe7e 	bl	8001348 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e04f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d20c      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e032      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4916      	ldr	r1, [pc, #88]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490e      	ldr	r1, [pc, #56]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 f821 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490a      	ldr	r1, [pc, #40]	@ (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026f2:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fc62 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00
 800270c:	40023800 	.word	0x40023800
 8002710:	080090c0 	.word	0x080090c0
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002720:	b090      	sub	sp, #64	@ 0x40
 8002722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00d      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x40>
 8002740:	2b08      	cmp	r3, #8
 8002742:	f200 80a1 	bhi.w	8002888 <HAL_RCC_GetSysClockFreq+0x16c>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 800274a:	2b04      	cmp	r3, #4
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x3a>
 800274e:	e09b      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002752:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002754:	e09b      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002756:	4b53      	ldr	r3, [pc, #332]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002758:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800275a:	e098      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4b4f      	ldr	r3, [pc, #316]	@ (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002766:	4b4d      	ldr	r3, [pc, #308]	@ (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d028      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002772:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	2200      	movs	r2, #0
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	627a      	str	r2, [r7, #36]	@ 0x24
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002784:	2100      	movs	r1, #0
 8002786:	4b47      	ldr	r3, [pc, #284]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002788:	fb03 f201 	mul.w	r2, r3, r1
 800278c:	2300      	movs	r3, #0
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	4413      	add	r3, r2
 8002794:	4a43      	ldr	r2, [pc, #268]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002796:	fba0 1202 	umull	r1, r2, r0, r2
 800279a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800279c:	460a      	mov	r2, r1
 800279e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80027a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a2:	4413      	add	r3, r2
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	2200      	movs	r2, #0
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	61fa      	str	r2, [r7, #28]
 80027ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027b6:	f7fd fd63 	bl	8000280 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4613      	mov	r3, r2
 80027c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027c2:	e053      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c4:	4b35      	ldr	r3, [pc, #212]	@ (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	2200      	movs	r2, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	617a      	str	r2, [r7, #20]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027d6:	f04f 0b00 	mov.w	fp, #0
 80027da:	4652      	mov	r2, sl
 80027dc:	465b      	mov	r3, fp
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	ebb2 080a 	subs.w	r8, r2, sl
 80027f6:	eb63 090b 	sbc.w	r9, r3, fp
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002806:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800280a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800280e:	ebb2 0408 	subs.w	r4, r2, r8
 8002812:	eb63 0509 	sbc.w	r5, r3, r9
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	00eb      	lsls	r3, r5, #3
 8002820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002824:	00e2      	lsls	r2, r4, #3
 8002826:	4614      	mov	r4, r2
 8002828:	461d      	mov	r5, r3
 800282a:	eb14 030a 	adds.w	r3, r4, sl
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	eb45 030b 	adc.w	r3, r5, fp
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002842:	4629      	mov	r1, r5
 8002844:	028b      	lsls	r3, r1, #10
 8002846:	4621      	mov	r1, r4
 8002848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800284c:	4621      	mov	r1, r4
 800284e:	028a      	lsls	r2, r1, #10
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002856:	2200      	movs	r2, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	60fa      	str	r2, [r7, #12]
 800285c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002860:	f7fd fd0e 	bl	8000280 <__aeabi_uldivmod>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4613      	mov	r3, r2
 800286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_GetSysClockFreq+0x180>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800287c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800287e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002890:	4618      	mov	r0, r3
 8002892:	3740      	adds	r7, #64	@ 0x40
 8002894:	46bd      	mov	sp, r7
 8002896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	00b71b00 	.word	0x00b71b00

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b03      	ldr	r3, [pc, #12]	@ (80028bc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000000 	.word	0x20000000

080028c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c4:	f7ff fff0 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0a9b      	lsrs	r3, r3, #10
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	@ (80028e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	080090d0 	.word	0x080090d0

080028e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ec:	f7ff ffdc 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0b5b      	lsrs	r3, r3, #13
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	080090d0 	.word	0x080090d0

08002910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	220f      	movs	r2, #15
 800291e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_RCC_GetClockConfig+0x5c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <HAL_RCC_GetClockConfig+0x5c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCC_GetClockConfig+0x5c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_GetClockConfig+0x5c>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_RCC_GetClockConfig+0x60>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0207 	and.w	r2, r3, #7
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	601a      	str	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	40023c00 	.word	0x40023c00

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f839 	bl	8002a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fd80 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e04e      	b.n	8002ade <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_TIM_Base_Start_IT+0xc4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002afc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a18      	ldr	r2, [pc, #96]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d010      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	e007      	b.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40010400 	.word	0x40010400
 8002b00:	40014000 	.word	0x40014000
 8002b04:	40001800 	.word	0x40001800

08002b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e041      	b.n	8002b9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f92c 	bl	8000d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fcb6 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e022      	b.n	8002c1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d109      	bne.n	8002bee <HAL_TIM_PWM_Start_DMA+0x46>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e015      	b.n	8002c1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d109      	bne.n	8002c08 <HAL_TIM_PWM_Start_DMA+0x60>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e008      	b.n	8002c1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e171      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_TIM_PWM_Start_DMA+0x94>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e022      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d109      	bne.n	8002c56 <HAL_TIM_PWM_Start_DMA+0xae>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2301      	moveq	r3, #1
 8002c50:	2300      	movne	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e015      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d109      	bne.n	8002c70 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e008      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d024      	beq.n	8002cd0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_TIM_PWM_Start_DMA+0xea>
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e137      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca4:	e016      	b.n	8002cd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d104      	bne.n	8002cb6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cb4:	e00e      	b.n	8002cd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc4:	e006      	b.n	8002cd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cce:	e001      	b.n	8002cd4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e118      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	f200 80ae 	bhi.w	8002e38 <HAL_TIM_PWM_Start_DMA+0x290>
 8002cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002d19 	.word	0x08002d19
 8002ce8:	08002e39 	.word	0x08002e39
 8002cec:	08002e39 	.word	0x08002e39
 8002cf0:	08002e39 	.word	0x08002e39
 8002cf4:	08002d61 	.word	0x08002d61
 8002cf8:	08002e39 	.word	0x08002e39
 8002cfc:	08002e39 	.word	0x08002e39
 8002d00:	08002e39 	.word	0x08002e39
 8002d04:	08002da9 	.word	0x08002da9
 8002d08:	08002e39 	.word	0x08002e39
 8002d0c:	08002e39 	.word	0x08002e39
 8002d10:	08002e39 	.word	0x08002e39
 8002d14:	08002df1 	.word	0x08002df1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f10 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	4a7b      	ldr	r2, [pc, #492]	@ (8002f14 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f18 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3334      	adds	r3, #52	@ 0x34
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	f7fe fc9e 	bl	8001680 <HAL_DMA_Start_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0db      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5c:	60da      	str	r2, [r3, #12]
      break;
 8002d5e:	e06e      	b.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	4a6a      	ldr	r2, [pc, #424]	@ (8002f10 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d66:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	4a69      	ldr	r2, [pc, #420]	@ (8002f14 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	4a68      	ldr	r2, [pc, #416]	@ (8002f18 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002d76:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3338      	adds	r3, #56	@ 0x38
 8002d84:	461a      	mov	r2, r3
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	f7fe fc7a 	bl	8001680 <HAL_DMA_Start_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0b7      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002da4:	60da      	str	r2, [r3, #12]
      break;
 8002da6:	e04a      	b.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	4a58      	ldr	r2, [pc, #352]	@ (8002f10 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002dae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	4a57      	ldr	r2, [pc, #348]	@ (8002f14 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002dbe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	333c      	adds	r3, #60	@ 0x3c
 8002dcc:	461a      	mov	r2, r3
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	f7fe fc56 	bl	8001680 <HAL_DMA_Start_IT>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e093      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dec:	60da      	str	r2, [r3, #12]
      break;
 8002dee:	e026      	b.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	4a46      	ldr	r2, [pc, #280]	@ (8002f10 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002df6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	4a45      	ldr	r2, [pc, #276]	@ (8002f14 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002dfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	4a44      	ldr	r2, [pc, #272]	@ (8002f18 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002e06:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3340      	adds	r3, #64	@ 0x40
 8002e14:	461a      	mov	r2, r3
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	f7fe fc32 	bl	8001680 <HAL_DMA_Start_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e34:	60da      	str	r2, [r3, #12]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d15f      	bne.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd89 	bl	8003964 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a31      	ldr	r2, [pc, #196]	@ (8002f1c <HAL_TIM_PWM_Start_DMA+0x374>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2f      	ldr	r2, [pc, #188]	@ (8002f20 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a25      	ldr	r2, [pc, #148]	@ (8002f1c <HAL_TIM_PWM_Start_DMA+0x374>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d022      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e92:	d01d      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a22      	ldr	r2, [pc, #136]	@ (8002f24 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <HAL_TIM_PWM_Start_DMA+0x380>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1f      	ldr	r2, [pc, #124]	@ (8002f2c <HAL_TIM_PWM_Start_DMA+0x384>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f20 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1a      	ldr	r2, [pc, #104]	@ (8002f34 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d010      	beq.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	e007      	b.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	080033a7 	.word	0x080033a7
 8002f14:	0800344f 	.word	0x0800344f
 8002f18:	08003315 	.word	0x08003315
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40010400 	.word	0x40010400
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40001800 	.word	0x40001800

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0202 	mvn.w	r2, #2
 8002f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f994 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f986 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f997 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f96e 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f960 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f971 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d020      	beq.n	8003034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0208 	mvn.w	r2, #8
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f948 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f93a 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f94b 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2208      	movs	r2, #8
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f922 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f914 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f925 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0201 	mvn.w	r2, #1
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fe30 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fcfa 	bl	8003abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f900 	bl	80032ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0220 	mvn.w	r2, #32
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fccc 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e0ae      	b.n	8003294 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	f200 809f 	bhi.w	8003284 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003146:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003181 	.word	0x08003181
 8003150:	08003285 	.word	0x08003285
 8003154:	08003285 	.word	0x08003285
 8003158:	08003285 	.word	0x08003285
 800315c:	080031c1 	.word	0x080031c1
 8003160:	08003285 	.word	0x08003285
 8003164:	08003285 	.word	0x08003285
 8003168:	08003285 	.word	0x08003285
 800316c:	08003203 	.word	0x08003203
 8003170:	08003285 	.word	0x08003285
 8003174:	08003285 	.word	0x08003285
 8003178:	08003285 	.word	0x08003285
 800317c:	08003243 	.word	0x08003243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa3c 	bl	8003604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6999      	ldr	r1, [r3, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      break;
 80031be:	e064      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa8c 	bl	80036e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
      break;
 8003200:	e043      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fae1 	bl	80037d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0208 	orr.w	r2, r2, #8
 800321c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0204 	bic.w	r2, r2, #4
 800322c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      break;
 8003240:	e023      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fb35 	bl	80038b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
      break;
 8003282:	e002      	b.n	800328a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	75fb      	strb	r3, [r7, #23]
      break;
 8003288:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800333a:	e02a      	b.n	8003392 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d107      	bne.n	8003356 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003354:	e01d      	b.n	8003392 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d107      	bne.n	8003370 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2204      	movs	r2, #4
 8003364:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800336e:	e010      	b.n	8003392 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d107      	bne.n	800338a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2208      	movs	r2, #8
 800337e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003388:	e003      	b.n	8003392 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ffb4 	bl	8003300 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	771a      	strb	r2, [r3, #28]
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d10b      	bne.n	80033d6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d136      	bne.n	800343a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	e031      	b.n	800343a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d10b      	bne.n	80033f8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2202      	movs	r2, #2
 80033e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d125      	bne.n	800343a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f6:	e020      	b.n	800343a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10b      	bne.n	800341a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d114      	bne.n	800343a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003418:	e00f      	b.n	800343a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d10a      	bne.n	800343a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2208      	movs	r2, #8
 8003428:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff ff42 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	771a      	strb	r2, [r3, #28]
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d103      	bne.n	800346e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	771a      	strb	r2, [r3, #28]
 800346c:	e019      	b.n	80034a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d103      	bne.n	8003480 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2202      	movs	r2, #2
 800347c:	771a      	strb	r2, [r3, #28]
 800347e:	e010      	b.n	80034a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d103      	bne.n	8003492 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2204      	movs	r2, #4
 800348e:	771a      	strb	r2, [r3, #28]
 8003490:	e007      	b.n	80034a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d102      	bne.n	80034a2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2208      	movs	r2, #8
 80034a0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff ff18 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	771a      	strb	r2, [r3, #28]
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a43      	ldr	r2, [pc, #268]	@ (80035d8 <TIM_Base_SetConfig+0x120>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a40      	ldr	r2, [pc, #256]	@ (80035dc <TIM_Base_SetConfig+0x124>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3f      	ldr	r2, [pc, #252]	@ (80035e0 <TIM_Base_SetConfig+0x128>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3e      	ldr	r2, [pc, #248]	@ (80035e4 <TIM_Base_SetConfig+0x12c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3d      	ldr	r2, [pc, #244]	@ (80035e8 <TIM_Base_SetConfig+0x130>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a32      	ldr	r2, [pc, #200]	@ (80035d8 <TIM_Base_SetConfig+0x120>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02b      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d027      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2f      	ldr	r2, [pc, #188]	@ (80035dc <TIM_Base_SetConfig+0x124>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d023      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <TIM_Base_SetConfig+0x128>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2d      	ldr	r2, [pc, #180]	@ (80035e4 <TIM_Base_SetConfig+0x12c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01b      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	@ (80035e8 <TIM_Base_SetConfig+0x130>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <TIM_Base_SetConfig+0x134>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <TIM_Base_SetConfig+0x138>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <TIM_Base_SetConfig+0x13c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <TIM_Base_SetConfig+0x140>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a27      	ldr	r2, [pc, #156]	@ (80035fc <TIM_Base_SetConfig+0x144>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a26      	ldr	r2, [pc, #152]	@ (8003600 <TIM_Base_SetConfig+0x148>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a0e      	ldr	r2, [pc, #56]	@ (80035d8 <TIM_Base_SetConfig+0x120>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0xf2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a10      	ldr	r2, [pc, #64]	@ (80035e8 <TIM_Base_SetConfig+0x130>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d103      	bne.n	80035b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40010400 	.word	0x40010400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	40001800 	.word	0x40001800
 80035fc:	40001c00 	.word	0x40001c00
 8003600:	40002000 	.word	0x40002000

08003604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f023 0201 	bic.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 0302 	bic.w	r3, r3, #2
 800364c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a20      	ldr	r2, [pc, #128]	@ (80036dc <TIM_OC1_SetConfig+0xd8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_OC1_SetConfig+0x64>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <TIM_OC1_SetConfig+0xdc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10c      	bne.n	8003682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0308 	bic.w	r3, r3, #8
 800366e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <TIM_OC1_SetConfig+0xd8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC1_SetConfig+0x8e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <TIM_OC1_SetConfig+0xdc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d111      	bne.n	80036b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	621a      	str	r2, [r3, #32]
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40010400 	.word	0x40010400

080036e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f023 0210 	bic.w	r2, r3, #16
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800371a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0320 	bic.w	r3, r3, #32
 800372e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a22      	ldr	r2, [pc, #136]	@ (80037c8 <TIM_OC2_SetConfig+0xe4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_OC2_SetConfig+0x68>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a21      	ldr	r2, [pc, #132]	@ (80037cc <TIM_OC2_SetConfig+0xe8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10d      	bne.n	8003768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <TIM_OC2_SetConfig+0xe4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_OC2_SetConfig+0x94>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <TIM_OC2_SetConfig+0xe8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d113      	bne.n	80037a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800377e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40010400 	.word	0x40010400

080037d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <TIM_OC3_SetConfig+0xe0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d003      	beq.n	8003836 <TIM_OC3_SetConfig+0x66>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a20      	ldr	r2, [pc, #128]	@ (80038b4 <TIM_OC3_SetConfig+0xe4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800383c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a16      	ldr	r2, [pc, #88]	@ (80038b0 <TIM_OC3_SetConfig+0xe0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_OC3_SetConfig+0x92>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <TIM_OC3_SetConfig+0xe4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d113      	bne.n	800388a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010400 	.word	0x40010400

080038b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a12      	ldr	r2, [pc, #72]	@ (800395c <TIM_OC4_SetConfig+0xa4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_OC4_SetConfig+0x68>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <TIM_OC4_SetConfig+0xa8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d109      	bne.n	8003934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40010400 	.word	0x40010400

08003964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2201      	movs	r2, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	43db      	mvns	r3, r3
 8003986:	401a      	ands	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e05a      	b.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d01d      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a17      	ldr	r2, [pc, #92]	@ (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	@ (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10c      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40001800 	.word	0x40001800

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e042      	b.n	8003b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd f9e0 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 ff6f 	bl	80049f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	@ 0x28
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d175      	bne.n	8003c7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_UART_Transmit+0x2c>
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e06e      	b.n	8003c7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2221      	movs	r2, #33	@ 0x21
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bae:	f7fd fbcb 	bl	8001348 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc8:	d108      	bne.n	8003bdc <HAL_UART_Transmit+0x6c>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e003      	b.n	8003be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003be4:	e02e      	b.n	8003c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fc3f 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e03a      	b.n	8003c7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3302      	adds	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e007      	b.n	8003c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1cb      	bne.n	8003be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2140      	movs	r1, #64	@ 0x40
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fc0b 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e006      	b.n	8003c7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	4613      	mov	r3, r2
 8003c92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d112      	bne.n	8003cc6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_UART_Receive_DMA+0x26>
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e00b      	b.n	8003cc8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fc33 	bl	8004528 <UART_Start_Receive_DMA>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	e000      	b.n	8003cc8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_UART_IRQHandler+0x66>
 8003d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fda4 	bl	800487c <UART_Receive_IT>
      return;
 8003d34:	e273      	b.n	800421e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80de 	beq.w	8003efc <HAL_UART_IRQHandler+0x22c>
 8003d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80d1 	beq.w	8003efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xae>
 8003d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0xd2>
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_UART_IRQHandler+0xf6>
 8003dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d011      	beq.n	8003df6 <HAL_UART_IRQHandler+0x126>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f043 0208 	orr.w	r2, r3, #8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 820a 	beq.w	8004214 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_UART_IRQHandler+0x14e>
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fd2f 	bl	800487c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_UART_IRQHandler+0x17a>
 8003e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04f      	beq.n	8003eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fc3a 	bl	80046c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d141      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1d9      	bne.n	8003e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d013      	beq.n	8003eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	4a8a      	ldr	r2, [pc, #552]	@ (80040e0 <HAL_UART_IRQHandler+0x410>)
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd fca6 	bl	8001810 <HAL_DMA_Abort_IT>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e00e      	b.n	8003ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9b6 	bl	800424c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e00a      	b.n	8003ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f9b2 	bl	800424c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	e006      	b.n	8003ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f9ae 	bl	800424c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ef6:	e18d      	b.n	8004214 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	bf00      	nop
    return;
 8003efa:	e18b      	b.n	8004214 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 8167 	bne.w	80041d4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8160 	beq.w	80041d4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8159 	beq.w	80041d4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	f040 80ce 	bne.w	80040e4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a9 	beq.w	80040b0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f66:	429a      	cmp	r2, r3
 8003f68:	f080 80a2 	bcs.w	80040b0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7e:	f000 8088 	beq.w	8004092 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1d9      	bne.n	8003f82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ff2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e1      	bne.n	8003fce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3314      	adds	r3, #20
 8004010:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800401a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800401c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800402e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800403c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e3      	bne.n	800400a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004074:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004076:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800407a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e3      	bne.n	8004050 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd fb4f 	bl	8001730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8d9 	bl	8004260 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80040ae:	e0b3      	b.n	8004218 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040b8:	429a      	cmp	r2, r3
 80040ba:	f040 80ad 	bne.w	8004218 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c8:	f040 80a6 	bne.w	8004218 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8c1 	bl	8004260 <HAL_UARTEx_RxEventCallback>
      return;
 80040de:	e09b      	b.n	8004218 <HAL_UART_IRQHandler+0x548>
 80040e0:	0800478b 	.word	0x0800478b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 808e 	beq.w	800421c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8089 	beq.w	800421c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800411a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004120:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800412e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004130:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004134:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800413c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e3      	bne.n	800410a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	623b      	str	r3, [r7, #32]
   return(result);
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004166:	633a      	str	r2, [r7, #48]	@ 0x30
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800416c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e3      	bne.n	8004142 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	60fb      	str	r3, [r7, #12]
   return(result);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0310 	bic.w	r3, r3, #16
 800419e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041ac:	61fa      	str	r2, [r7, #28]
 80041ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e3      	bne.n	8004188 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f847 	bl	8004260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041d2:	e023      	b.n	800421c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <HAL_UART_IRQHandler+0x524>
 80041e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fadd 	bl	80047ac <UART_Transmit_IT>
    return;
 80041f2:	e014      	b.n	800421e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00e      	beq.n	800421e <HAL_UART_IRQHandler+0x54e>
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb1d 	bl	800484c <UART_EndTransmit_IT>
    return;
 8004212:	e004      	b.n	800421e <HAL_UART_IRQHandler+0x54e>
    return;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <HAL_UART_IRQHandler+0x54e>
      return;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <HAL_UART_IRQHandler+0x54e>
      return;
 800421c:	bf00      	nop
  }
}
 800421e:	37e8      	adds	r7, #232	@ 0xe8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b09c      	sub	sp, #112	@ 0x70
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d172      	bne.n	800437a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004296:	2200      	movs	r2, #0
 8004298:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80042ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80042e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80042ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80042f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3314      	adds	r3, #20
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	623b      	str	r3, [r7, #32]
   return(result);
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004318:	663b      	str	r3, [r7, #96]	@ 0x60
 800431a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004322:	633a      	str	r2, [r7, #48]	@ 0x30
 8004324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	2b01      	cmp	r3, #1
 8004344:	d119      	bne.n	800437a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	60fb      	str	r3, [r7, #12]
   return(result);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800435e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	617b      	str	r3, [r7, #20]
   return(result);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800437a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437c:	2200      	movs	r2, #0
 800437e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800438c:	4619      	mov	r1, r3
 800438e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004390:	f7ff ff66 	bl	8004260 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004394:	e002      	b.n	800439c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004396:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004398:	f7fc fc10 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 800439c:	bf00      	nop
 800439e:	3770      	adds	r7, #112	@ 0x70
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d108      	bne.n	80043d2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4619      	mov	r1, r3
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff ff48 	bl	8004260 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043d0:	e002      	b.n	80043d8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ff30 	bl	8004238 <HAL_UART_RxHalfCpltCallback>
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fc:	2b80      	cmp	r3, #128	@ 0x80
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b21      	cmp	r3, #33	@ 0x21
 8004412:	d108      	bne.n	8004426 <UART_DMAError+0x46>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2200      	movs	r2, #0
 800441e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004420:	68b8      	ldr	r0, [r7, #8]
 8004422:	f000 f927 	bl	8004674 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b22      	cmp	r3, #34	@ 0x22
 8004446:	d108      	bne.n	800445a <UART_DMAError+0x7a>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004454:	68b8      	ldr	r0, [r7, #8]
 8004456:	f000 f935 	bl	80046c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0210 	orr.w	r2, r3, #16
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f7ff fef0 	bl	800424c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	e03b      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d037      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7fc ff5b 	bl	8001348 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e03a      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d023      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b80      	cmp	r3, #128	@ 0x80
 80044ba:	d020      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b40      	cmp	r3, #64	@ 0x40
 80044c0:	d01d      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d116      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f8ec 	bl	80046c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2208      	movs	r2, #8
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00f      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	429a      	cmp	r2, r3
 800451a:	d0b4      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b098      	sub	sp, #96	@ 0x60
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2222      	movs	r2, #34	@ 0x22
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	4a44      	ldr	r2, [pc, #272]	@ (8004668 <UART_Start_Receive_DMA+0x140>)
 8004556:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455c:	4a43      	ldr	r2, [pc, #268]	@ (800466c <UART_Start_Receive_DMA+0x144>)
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	4a42      	ldr	r2, [pc, #264]	@ (8004670 <UART_Start_Receive_DMA+0x148>)
 8004566:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	2200      	movs	r2, #0
 800456e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004570:	f107 0308 	add.w	r3, r7, #8
 8004574:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	f7fd f87a 	bl	8001680 <HAL_DMA_Start_IT>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2210      	movs	r2, #16
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e05d      	b.n	8004660 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d019      	beq.n	80045f6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80045e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80045e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	657b      	str	r3, [r7, #84]	@ 0x54
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004616:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800461c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	617b      	str	r3, [r7, #20]
   return(result);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004640:	653b      	str	r3, [r7, #80]	@ 0x50
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800464a:	627a      	str	r2, [r7, #36]	@ 0x24
 800464c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6a39      	ldr	r1, [r7, #32]
 8004650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	61fb      	str	r3, [r7, #28]
   return(result);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3760      	adds	r7, #96	@ 0x60
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08004279 	.word	0x08004279
 800466c:	080043a5 	.word	0x080043a5
 8004670:	080043e1 	.word	0x080043e1

08004674 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	@ 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60bb      	str	r3, [r7, #8]
   return(result);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	61ba      	str	r2, [r7, #24]
 800469e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e5      	bne.n	800467c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80046b8:	bf00      	nop
 80046ba:	3724      	adds	r7, #36	@ 0x24
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b095      	sub	sp, #84	@ 0x54
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80046ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e5      	bne.n	80046cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3314      	adds	r3, #20
 800471e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e5      	bne.n	8004700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	d119      	bne.n	8004770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	60bb      	str	r3, [r7, #8]
   return(result);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800475c:	61ba      	str	r2, [r7, #24]
 800475e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	613b      	str	r3, [r7, #16]
   return(result);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800477e:	bf00      	nop
 8004780:	3754      	adds	r7, #84	@ 0x54
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff fd54 	bl	800424c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b21      	cmp	r3, #33	@ 0x21
 80047be:	d13e      	bne.n	800483e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c8:	d114      	bne.n	80047f4 <UART_Transmit_IT+0x48>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d110      	bne.n	80047f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]
 80047f2:	e008      	b.n	8004806 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	1c59      	adds	r1, r3, #1
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6211      	str	r1, [r2, #32]
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4619      	mov	r1, r3
 8004814:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004828:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004838:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004862:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fcd9 	bl	8004224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	@ 0x30
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b22      	cmp	r3, #34	@ 0x22
 8004896:	f040 80aa 	bne.w	80049ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	d115      	bne.n	80048d0 <UART_Receive_IT+0x54>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d111      	bne.n	80048d0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	b29a      	uxth	r2, r3
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80048ce:	e024      	b.n	800491a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048de:	d007      	beq.n	80048f0 <UART_Receive_IT+0x74>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <UART_Receive_IT+0x82>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	e008      	b.n	8004910 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800490a:	b2da      	uxtb	r2, r3
 800490c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29b      	uxth	r3, r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	4619      	mov	r1, r3
 8004928:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800492a:	2b00      	cmp	r3, #0
 800492c:	d15d      	bne.n	80049ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0220 	bic.w	r2, r2, #32
 800493c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800494c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	2b01      	cmp	r3, #1
 8004972:	d135      	bne.n	80049e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	330c      	adds	r3, #12
 8004980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	613b      	str	r3, [r7, #16]
   return(result);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f023 0310 	bic.w	r3, r3, #16
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	623a      	str	r2, [r7, #32]
 800499c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d10a      	bne.n	80049d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fc41 	bl	8004260 <HAL_UARTEx_RxEventCallback>
 80049de:	e002      	b.n	80049e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fc f8eb 	bl	8000bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e002      	b.n	80049f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3730      	adds	r7, #48	@ 0x30
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0c0      	sub	sp, #256	@ 0x100
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	ea40 0301 	orr.w	r3, r0, r1
 8004a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a50:	f021 010c 	bic.w	r1, r1, #12
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	6999      	ldr	r1, [r3, #24]
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	ea40 0301 	orr.w	r3, r0, r1
 8004a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc4 <UART_SetConfig+0x2cc>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0xa0>
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b8d      	ldr	r3, [pc, #564]	@ (8004cc8 <UART_SetConfig+0x2d0>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d104      	bne.n	8004aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fd ff26 	bl	80028e8 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004aa0:	e003      	b.n	8004aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fd ff0d 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab4:	f040 810c 	bne.w	8004cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ada:	4621      	mov	r1, r4
 8004adc:	eb12 0801 	adds.w	r8, r2, r1
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb43 0901 	adc.w	r9, r3, r1
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afa:	4690      	mov	r8, r2
 8004afc:	4699      	mov	r9, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	eb18 0303 	adds.w	r3, r8, r3
 8004b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b08:	462b      	mov	r3, r5
 8004b0a:	eb49 0303 	adc.w	r3, r9, r3
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b26:	460b      	mov	r3, r1
 8004b28:	18db      	adds	r3, r3, r3
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b3c:	f7fb fba0 	bl	8000280 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b61      	ldr	r3, [pc, #388]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	011c      	lsls	r4, r3, #4
 8004b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b70:	4641      	mov	r1, r8
 8004b72:	eb12 0a01 	adds.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0b01 	adc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b90:	4692      	mov	sl, r2
 8004b92:	469b      	mov	fp, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bd2:	f7fb fb55 	bl	8000280 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	@ 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bf2:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c00:	441c      	add	r4, r3
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c24:	4641      	mov	r1, r8
 8004c26:	1851      	adds	r1, r2, r1
 8004c28:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	414b      	adcs	r3, r1
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	00cb      	lsls	r3, r1, #3
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c46:	4651      	mov	r1, sl
 8004c48:	00ca      	lsls	r2, r1, #3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4642      	mov	r2, r8
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c58:	464b      	mov	r3, r9
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c78:	460b      	mov	r3, r1
 8004c7a:	18db      	adds	r3, r3, r3
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c7e:	4613      	mov	r3, r2
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c8e:	f7fb faf7 	bl	8000280 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	@ 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3332      	adds	r3, #50	@ 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0207 	and.w	r2, r3, #7
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc0:	e106      	b.n	8004ed0 <UART_SetConfig+0x4d8>
 8004cc2:	bf00      	nop
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	40011400 	.word	0x40011400
 8004ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6239      	str	r1, [r7, #32]
 8004cea:	415b      	adcs	r3, r3
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	1854      	adds	r4, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb43 0501 	adc.w	r5, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d18:	464b      	mov	r3, r9
 8004d1a:	eb45 0303 	adc.w	r3, r5, r3
 8004d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d3e:	4629      	mov	r1, r5
 8004d40:	008b      	lsls	r3, r1, #2
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d48:	4621      	mov	r1, r4
 8004d4a:	008a      	lsls	r2, r1, #2
 8004d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d50:	f7fb fa96 	bl	8000280 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b60      	ldr	r3, [pc, #384]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	61b9      	str	r1, [r7, #24]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6139      	str	r1, [r7, #16]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ddc:	4649      	mov	r1, r9
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de6:	4641      	mov	r1, r8
 8004de8:	008a      	lsls	r2, r1, #2
 8004dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dee:	f7fb fa47 	bl	8000280 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	4b38      	ldr	r3, [pc, #224]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	2264      	movs	r2, #100	@ 0x64
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	1acb      	subs	r3, r1, r3
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	3332      	adds	r3, #50	@ 0x32
 8004e0c:	4a33      	ldr	r2, [pc, #204]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e18:	441c      	add	r4, r3
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e22:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	415b      	adcs	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	460a      	mov	r2, r1
 8004e6e:	eb42 0303 	adc.w	r3, r2, r3
 8004e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	008b      	lsls	r3, r1, #2
 8004e90:	4641      	mov	r1, r8
 8004e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e96:	4641      	mov	r1, r8
 8004e98:	008a      	lsls	r2, r1, #2
 8004e9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e9e:	f7fb f9ef 	bl	8000280 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	@ 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	3332      	adds	r3, #50	@ 0x32
 8004eba:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4422      	add	r2, r4
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004edc:	51eb851f 	.word	0x51eb851f

08004ee0 <__NVIC_SetPriority>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db0a      	blt.n	8004f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	490c      	ldr	r1, [pc, #48]	@ (8004f2c <__NVIC_SetPriority+0x4c>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	440b      	add	r3, r1
 8004f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f08:	e00a      	b.n	8004f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4908      	ldr	r1, [pc, #32]	@ (8004f30 <__NVIC_SetPriority+0x50>)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	3b04      	subs	r3, #4
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	761a      	strb	r2, [r3, #24]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e100 	.word	0xe000e100
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <SysTick_Handler+0x1c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f3c:	f001 ff34 	bl	8006da8 <xTaskGetSchedulerState>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f46:	f002 fd2f 	bl	80079a8 <xPortSysTickHandler>
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	f06f 0004 	mvn.w	r0, #4
 8004f5e:	f7ff ffbf 	bl	8004ee0 <__NVIC_SetPriority>
#endif
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6e:	f3ef 8305 	mrs	r3, IPSR
 8004f72:	603b      	str	r3, [r7, #0]
  return(result);
 8004f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f7a:	f06f 0305 	mvn.w	r3, #5
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	e00c      	b.n	8004f9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <osKernelInitialize+0x44>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <osKernelInitialize+0x44>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	e002      	b.n	8004f9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f9c:	687b      	ldr	r3, [r7, #4]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	200004b0 	.word	0x200004b0

08004fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb6:	f3ef 8305 	mrs	r3, IPSR
 8004fba:	603b      	str	r3, [r7, #0]
  return(result);
 8004fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <osKernelStart+0x1a>
    stat = osErrorISR;
 8004fc2:	f06f 0305 	mvn.w	r3, #5
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e010      	b.n	8004fec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <osKernelStart+0x48>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d109      	bne.n	8004fe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fd2:	f7ff ffbf 	bl	8004f54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fd6:	4b08      	ldr	r3, [pc, #32]	@ (8004ff8 <osKernelStart+0x48>)
 8004fd8:	2202      	movs	r2, #2
 8004fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fdc:	f001 fa80 	bl	80064e0 <vTaskStartScheduler>
      stat = osOK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e002      	b.n	8004fec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200004b0 	.word	0x200004b0

08004ffc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08e      	sub	sp, #56	@ 0x38
 8005000:	af04      	add	r7, sp, #16
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800500c:	f3ef 8305 	mrs	r3, IPSR
 8005010:	617b      	str	r3, [r7, #20]
  return(result);
 8005012:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005014:	2b00      	cmp	r3, #0
 8005016:	d17e      	bne.n	8005116 <osThreadNew+0x11a>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d07b      	beq.n	8005116 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005022:	2318      	movs	r3, #24
 8005024:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d045      	beq.n	80050c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <osThreadNew+0x48>
        name = attr->name;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <osThreadNew+0x6e>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b38      	cmp	r3, #56	@ 0x38
 800505c:	d805      	bhi.n	800506a <osThreadNew+0x6e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <osThreadNew+0x72>
        return (NULL);
 800506a:	2300      	movs	r3, #0
 800506c:	e054      	b.n	8005118 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00e      	beq.n	80050a4 <osThreadNew+0xa8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2ba7      	cmp	r3, #167	@ 0xa7
 800508c:	d90a      	bls.n	80050a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005092:	2b00      	cmp	r3, #0
 8005094:	d006      	beq.n	80050a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <osThreadNew+0xa8>
        mem = 1;
 800509e:	2301      	movs	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e010      	b.n	80050c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <osThreadNew+0xca>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d108      	bne.n	80050c6 <osThreadNew+0xca>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <osThreadNew+0xca>
          mem = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	e001      	b.n	80050c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d110      	bne.n	80050ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050d4:	9202      	str	r2, [sp, #8]
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f001 f808 	bl	80060f8 <xTaskCreateStatic>
 80050e8:	4603      	mov	r3, r0
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e013      	b.n	8005116 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d110      	bne.n	8005116 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f001 f856 	bl	80061b8 <xTaskCreate>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <osThreadNew+0x11a>
            hTask = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005116:	693b      	ldr	r3, [r7, #16]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	@ 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005128:	f3ef 8305 	mrs	r3, IPSR
 800512c:	60bb      	str	r3, [r7, #8]
  return(result);
 800512e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <osDelay+0x1c>
    stat = osErrorISR;
 8005134:	f06f 0305 	mvn.w	r3, #5
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e007      	b.n	800514c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 f994 	bl	8006474 <vTaskDelay>
    }
  }

  return (stat);
 800514c:	68fb      	ldr	r3, [r7, #12]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005156:	b580      	push	{r7, lr}
 8005158:	b08a      	sub	sp, #40	@ 0x28
 800515a:	af02      	add	r7, sp, #8
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	613b      	str	r3, [r7, #16]
  return(result);
 800516c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800516e:	2b00      	cmp	r3, #0
 8005170:	d15f      	bne.n	8005232 <osMessageQueueNew+0xdc>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d05c      	beq.n	8005232 <osMessageQueueNew+0xdc>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d059      	beq.n	8005232 <osMessageQueueNew+0xdc>
    mem = -1;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d029      	beq.n	80051de <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d012      	beq.n	80051b8 <osMessageQueueNew+0x62>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b4f      	cmp	r3, #79	@ 0x4f
 8005198:	d90e      	bls.n	80051b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <osMessageQueueNew+0x62>
        mem = 1;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e014      	b.n	80051e2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <osMessageQueueNew+0x8c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10c      	bne.n	80051e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <osMessageQueueNew+0x8c>
          mem = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e001      	b.n	80051e2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10b      	bne.n	8005200 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2100      	movs	r1, #0
 80051f2:	9100      	str	r1, [sp, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fa30 	bl	800565c <xQueueGenericCreateStatic>
 80051fc:	61f8      	str	r0, [r7, #28]
 80051fe:	e008      	b.n	8005212 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d105      	bne.n	8005212 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005206:	2200      	movs	r2, #0
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 faa3 	bl	8005756 <xQueueGenericCreate>
 8005210:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00c      	beq.n	8005232 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <osMessageQueueNew+0xd0>
        name = attr->name;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e001      	b.n	800522a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	69f8      	ldr	r0, [r7, #28]
 800522e:	f000 ff05 	bl	800603c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005232:	69fb      	ldr	r3, [r7, #28]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005250:	2300      	movs	r3, #0
 8005252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005254:	f3ef 8305 	mrs	r3, IPSR
 8005258:	617b      	str	r3, [r7, #20]
  return(result);
 800525a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800525c:	2b00      	cmp	r3, #0
 800525e:	d028      	beq.n	80052b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <osMessageQueuePut+0x36>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <osMessageQueuePut+0x36>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005272:	f06f 0303 	mvn.w	r3, #3
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e038      	b.n	80052ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800527e:	f107 0210 	add.w	r2, r7, #16
 8005282:	2300      	movs	r3, #0
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	69b8      	ldr	r0, [r7, #24]
 8005288:	f000 fbc6 	bl	8005a18 <xQueueGenericSendFromISR>
 800528c:	4603      	mov	r3, r0
 800528e:	2b01      	cmp	r3, #1
 8005290:	d003      	beq.n	800529a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005292:	f06f 0302 	mvn.w	r3, #2
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	e028      	b.n	80052ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d025      	beq.n	80052ec <osMessageQueuePut+0xb0>
 80052a0:	4b15      	ldr	r3, [pc, #84]	@ (80052f8 <osMessageQueuePut+0xbc>)
 80052a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	e01c      	b.n	80052ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <osMessageQueuePut+0x82>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80052be:	f06f 0303 	mvn.w	r3, #3
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e012      	b.n	80052ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80052c6:	2300      	movs	r3, #0
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	69b8      	ldr	r0, [r7, #24]
 80052ce:	f000 faa1 	bl	8005814 <xQueueGenericSend>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d009      	beq.n	80052ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80052de:	f06f 0301 	mvn.w	r3, #1
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e002      	b.n	80052ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80052e6:	f06f 0302 	mvn.w	r3, #2
 80052ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80052ec:	69fb      	ldr	r3, [r7, #28]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005312:	f3ef 8305 	mrs	r3, IPSR
 8005316:	617b      	str	r3, [r7, #20]
  return(result);
 8005318:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800531a:	2b00      	cmp	r3, #0
 800531c:	d028      	beq.n	8005370 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <osMessageQueueGet+0x34>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <osMessageQueueGet+0x34>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005330:	f06f 0303 	mvn.w	r3, #3
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e037      	b.n	80053a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	461a      	mov	r2, r3
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	69b8      	ldr	r0, [r7, #24]
 8005346:	f000 fce7 	bl	8005d18 <xQueueReceiveFromISR>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d003      	beq.n	8005358 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005350:	f06f 0302 	mvn.w	r3, #2
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e027      	b.n	80053a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d024      	beq.n	80053a8 <osMessageQueueGet+0xac>
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <osMessageQueueGet+0xb8>)
 8005360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	e01b      	b.n	80053a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <osMessageQueueGet+0x80>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800537c:	f06f 0303 	mvn.w	r3, #3
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e011      	b.n	80053a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	69b8      	ldr	r0, [r7, #24]
 800538a:	f000 fbe3 	bl	8005b54 <xQueueReceive>
 800538e:	4603      	mov	r3, r0
 8005390:	2b01      	cmp	r3, #1
 8005392:	d009      	beq.n	80053a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800539a:	f06f 0301 	mvn.w	r3, #1
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	e002      	b.n	80053a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80053a2:	f06f 0302 	mvn.w	r3, #2
 80053a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80053a8:	69fb      	ldr	r3, [r7, #28]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a07      	ldr	r2, [pc, #28]	@ (80053e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80053c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a06      	ldr	r2, [pc, #24]	@ (80053e8 <vApplicationGetIdleTaskMemory+0x30>)
 80053ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2280      	movs	r2, #128	@ 0x80
 80053d4:	601a      	str	r2, [r3, #0]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	200004b4 	.word	0x200004b4
 80053e8:	2000055c 	.word	0x2000055c

080053ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a07      	ldr	r2, [pc, #28]	@ (8005418 <vApplicationGetTimerTaskMemory+0x2c>)
 80053fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a06      	ldr	r2, [pc, #24]	@ (800541c <vApplicationGetTimerTaskMemory+0x30>)
 8005402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800540a:	601a      	str	r2, [r3, #0]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	2000075c 	.word	0x2000075c
 800541c:	20000804 	.word	0x20000804

08005420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f103 0208 	add.w	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f103 0208 	add.w	r2, r3, #8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f103 0208 	add.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d103      	bne.n	80054e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e00c      	b.n	80054fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3308      	adds	r3, #8
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e002      	b.n	80054f0 <vListInsert+0x2e>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d2f6      	bcs.n	80054ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6892      	ldr	r2, [r2, #8]
 800554a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6852      	ldr	r2, [r2, #4]
 8005554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d103      	bne.n	8005568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1e5a      	subs	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055b4:	f002 f968 	bl	8007888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	441a      	add	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	3b01      	subs	r3, #1
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	441a      	add	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	22ff      	movs	r2, #255	@ 0xff
 80055f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	22ff      	movs	r2, #255	@ 0xff
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d114      	bne.n	8005634 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01a      	beq.n	8005648 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3310      	adds	r3, #16
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fa00 	bl	8006a1c <xTaskRemoveFromEventList>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d012      	beq.n	8005648 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <xQueueGenericReset+0xd0>)
 8005624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	e009      	b.n	8005648 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3310      	adds	r3, #16
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fef1 	bl	8005420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3324      	adds	r3, #36	@ 0x24
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff feec 	bl	8005420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005648:	f002 f950 	bl	80078ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800564c:	2301      	movs	r3, #1
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	@ 0x38
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	e7fd      	b.n	80056a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <xQueueGenericCreateStatic+0x56>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <xQueueGenericCreateStatic+0x5a>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericCreateStatic+0x5c>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	623b      	str	r3, [r7, #32]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <xQueueGenericCreateStatic+0x84>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xQueueGenericCreateStatic+0x88>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <xQueueGenericCreateStatic+0x8a>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	61fb      	str	r3, [r7, #28]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005702:	2350      	movs	r3, #80	@ 0x50
 8005704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b50      	cmp	r3, #80	@ 0x50
 800570a:	d00b      	beq.n	8005724 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	61bb      	str	r3, [r7, #24]
}
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005724:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005738:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f840 	bl	80057cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800574e:	4618      	mov	r0, r3
 8005750:	3730      	adds	r7, #48	@ 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005756:	b580      	push	{r7, lr}
 8005758:	b08a      	sub	sp, #40	@ 0x28
 800575a:	af02      	add	r7, sp, #8
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <xQueueGenericCreate+0x2c>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	613b      	str	r3, [r7, #16]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3350      	adds	r3, #80	@ 0x50
 8005790:	4618      	mov	r0, r3
 8005792:	f002 f99b 	bl	8007acc <pvPortMalloc>
 8005796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3350      	adds	r3, #80	@ 0x50
 80057a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057b0:	79fa      	ldrb	r2, [r7, #7]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f805 	bl	80057cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057c2:	69bb      	ldr	r3, [r7, #24]
	}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e002      	b.n	80057ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057fa:	2101      	movs	r1, #1
 80057fc:	69b8      	ldr	r0, [r7, #24]
 80057fe:	f7ff fec3 	bl	8005588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08e      	sub	sp, #56	@ 0x38
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005822:	2300      	movs	r3, #0
 8005824:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <xQueueGenericSend+0x34>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d103      	bne.n	8005856 <xQueueGenericSend+0x42>
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <xQueueGenericSend+0x46>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericSend+0x48>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <xQueueGenericSend+0x64>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d103      	bne.n	8005886 <xQueueGenericSend+0x72>
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <xQueueGenericSend+0x76>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGenericSend+0x78>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <xQueueGenericSend+0x94>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	623b      	str	r3, [r7, #32]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058a8:	f001 fa7e 	bl	8006da8 <xTaskGetSchedulerState>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <xQueueGenericSend+0xa4>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueGenericSend+0xa8>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueGenericSend+0xaa>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10b      	bne.n	80058da <xQueueGenericSend+0xc6>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	61fb      	str	r3, [r7, #28]
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058da:	f001 ffd5 	bl	8007888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <xQueueGenericSend+0xdc>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d129      	bne.n	8005944 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058f6:	f000 fa91 	bl	8005e1c <prvCopyDataToQueue>
 80058fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005906:	3324      	adds	r3, #36	@ 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f001 f887 	bl	8006a1c <xTaskRemoveFromEventList>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d013      	beq.n	800593c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005914:	4b3f      	ldr	r3, [pc, #252]	@ (8005a14 <xQueueGenericSend+0x200>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	e00a      	b.n	800593c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800592c:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <xQueueGenericSend+0x200>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800593c:	f001 ffd6 	bl	80078ec <vPortExitCritical>
				return pdPASS;
 8005940:	2301      	movs	r3, #1
 8005942:	e063      	b.n	8005a0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800594a:	f001 ffcf 	bl	80078ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800594e:	2300      	movs	r3, #0
 8005950:	e05c      	b.n	8005a0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f8c1 	bl	8006ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005962:	2301      	movs	r3, #1
 8005964:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005966:	f001 ffc1 	bl	80078ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800596a:	f000 fe29 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800596e:	f001 ff8b 	bl	8007888 <vPortEnterCritical>
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d103      	bne.n	8005988 <xQueueGenericSend+0x174>
 8005980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x18a>
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800599e:	f001 ffa5 	bl	80078ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059a2:	1d3a      	adds	r2, r7, #4
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f8b0 	bl	8006b10 <xTaskCheckForTimeOut>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d124      	bne.n	8005a00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059b8:	f000 fb28 	bl	800600c <prvIsQueueFull>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d018      	beq.n	80059f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	3310      	adds	r3, #16
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 ffd4 	bl	8006978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059d2:	f000 fab3 	bl	8005f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059d6:	f000 fe01 	bl	80065dc <xTaskResumeAll>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f47f af7c 	bne.w	80058da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80059e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <xQueueGenericSend+0x200>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	e772      	b.n	80058da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059f6:	f000 faa1 	bl	8005f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059fa:	f000 fdef 	bl	80065dc <xTaskResumeAll>
 80059fe:	e76c      	b.n	80058da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a02:	f000 fa9b 	bl	8005f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a06:	f000 fde9 	bl	80065dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3738      	adds	r7, #56	@ 0x38
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b090      	sub	sp, #64	@ 0x40
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueGenericSendFromISR+0x3e>
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueGenericSendFromISR+0x42>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueGenericSendFromISR+0x44>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d103      	bne.n	8005a86 <xQueueGenericSendFromISR+0x6e>
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <xQueueGenericSendFromISR+0x72>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueGenericSendFromISR+0x74>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aa8:	f001 ffce 	bl	8007a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aac:	f3ef 8211 	mrs	r2, BASEPRI
 8005ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	61fa      	str	r2, [r7, #28]
 8005ac2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <xQueueGenericSendFromISR+0xc2>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d12f      	bne.n	8005b3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005af0:	f000 f994 	bl	8005e1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005af4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d112      	bne.n	8005b24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	3324      	adds	r3, #36	@ 0x24
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 ff86 	bl	8006a1c <xTaskRemoveFromEventList>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00e      	beq.n	8005b34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e007      	b.n	8005b34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b28:	3301      	adds	r3, #1
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	b25a      	sxtb	r2, r3
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b34:	2301      	movs	r3, #1
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005b38:	e001      	b.n	8005b3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3740      	adds	r7, #64	@ 0x40
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	@ 0x30
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <xQueueReceive+0x32>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	623b      	str	r3, [r7, #32]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <xQueueReceive+0x40>
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <xQueueReceive+0x44>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <xQueueReceive+0x46>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <xQueueReceive+0x62>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	61fb      	str	r3, [r7, #28]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb6:	f001 f8f7 	bl	8006da8 <xTaskGetSchedulerState>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <xQueueReceive+0x72>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <xQueueReceive+0x76>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <xQueueReceive+0x78>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10b      	bne.n	8005be8 <xQueueReceive+0x94>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	61bb      	str	r3, [r7, #24]
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	e7fd      	b.n	8005be4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be8:	f001 fe4e 	bl	8007888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01f      	beq.n	8005c38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bfc:	f000 f978 	bl	8005ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	1e5a      	subs	r2, r3, #1
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00f      	beq.n	8005c30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c12:	3310      	adds	r3, #16
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 ff01 	bl	8006a1c <xTaskRemoveFromEventList>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d007      	beq.n	8005c30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c20:	4b3c      	ldr	r3, [pc, #240]	@ (8005d14 <xQueueReceive+0x1c0>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c30:	f001 fe5c 	bl	80078ec <vPortExitCritical>
				return pdPASS;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e069      	b.n	8005d0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c3e:	f001 fe55 	bl	80078ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e062      	b.n	8005d0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 ff47 	bl	8006ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c56:	2301      	movs	r3, #1
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c5a:	f001 fe47 	bl	80078ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c5e:	f000 fcaf 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c62:	f001 fe11 	bl	8007888 <vPortEnterCritical>
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c6c:	b25b      	sxtb	r3, r3
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d103      	bne.n	8005c7c <xQueueReceive+0x128>
 8005c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d103      	bne.n	8005c92 <xQueueReceive+0x13e>
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c92:	f001 fe2b 	bl	80078ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c96:	1d3a      	adds	r2, r7, #4
 8005c98:	f107 0310 	add.w	r3, r7, #16
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 ff36 	bl	8006b10 <xTaskCheckForTimeOut>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d123      	bne.n	8005cf2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cac:	f000 f998 	bl	8005fe0 <prvIsQueueEmpty>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d017      	beq.n	8005ce6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	3324      	adds	r3, #36	@ 0x24
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fe5a 	bl	8006978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc6:	f000 f939 	bl	8005f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cca:	f000 fc87 	bl	80065dc <xTaskResumeAll>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d189      	bne.n	8005be8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <xQueueReceive+0x1c0>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	e780      	b.n	8005be8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce8:	f000 f928 	bl	8005f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cec:	f000 fc76 	bl	80065dc <xTaskResumeAll>
 8005cf0:	e77a      	b.n	8005be8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cf4:	f000 f922 	bl	8005f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cf8:	f000 fc70 	bl	80065dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cfe:	f000 f96f 	bl	8005fe0 <prvIsQueueEmpty>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f43f af6f 	beq.w	8005be8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3730      	adds	r7, #48	@ 0x30
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08e      	sub	sp, #56	@ 0x38
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	623b      	str	r3, [r7, #32]
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	e7fd      	b.n	8005d42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <xQueueReceiveFromISR+0x3c>
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <xQueueReceiveFromISR+0x40>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <xQueueReceiveFromISR+0x42>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61fb      	str	r3, [r7, #28]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d76:	f001 fe67 	bl	8007a48 <vPortValidateInterruptPriority>
	__asm volatile
 8005d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	61ba      	str	r2, [r7, #24]
 8005d90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02f      	beq.n	8005e02 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db0:	f000 f89e 	bl	8005ef0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d112      	bne.n	8005dec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fe22 	bl	8006a1c <xTaskRemoveFromEventList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e007      	b.n	8005dfc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005df0:	3301      	adds	r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	b25a      	sxtb	r2, r3
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e00:	e001      	b.n	8005e06 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f383 8811 	msr	BASEPRI, r3
}
 8005e10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3738      	adds	r7, #56	@ 0x38
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10d      	bne.n	8005e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d14d      	bne.n	8005ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 ffcc 	bl	8006de4 <xTaskPriorityDisinherit>
 8005e4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e043      	b.n	8005ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d119      	bne.n	8005e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6858      	ldr	r0, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	461a      	mov	r2, r3
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	f002 fb25 	bl	80084b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d32b      	bcc.n	8005ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	e026      	b.n	8005ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68d8      	ldr	r0, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	f002 fb0b 	bl	80084b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	425b      	negs	r3, r3
 8005eaa:	441a      	add	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d207      	bcs.n	8005ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec4:	425b      	negs	r3, r3
 8005ec6:	441a      	add	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d105      	bne.n	8005ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ee6:	697b      	ldr	r3, [r7, #20]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	441a      	add	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d303      	bcc.n	8005f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68d9      	ldr	r1, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6838      	ldr	r0, [r7, #0]
 8005f30:	f002 fac1 	bl	80084b6 <memcpy>
	}
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f44:	f001 fca0 	bl	8007888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f50:	e011      	b.n	8005f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d012      	beq.n	8005f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3324      	adds	r3, #36	@ 0x24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fd5c 	bl	8006a1c <xTaskRemoveFromEventList>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f6a:	f000 fe35 	bl	8006bd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	dce9      	bgt.n	8005f52 <prvUnlockQueue+0x16>
 8005f7e:	e000      	b.n	8005f82 <prvUnlockQueue+0x46>
					break;
 8005f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	22ff      	movs	r2, #255	@ 0xff
 8005f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f8a:	f001 fcaf 	bl	80078ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f8e:	f001 fc7b 	bl	8007888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f9a:	e011      	b.n	8005fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d012      	beq.n	8005fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3310      	adds	r3, #16
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fd37 	bl	8006a1c <xTaskRemoveFromEventList>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fb4:	f000 fe10 	bl	8006bd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dce9      	bgt.n	8005f9c <prvUnlockQueue+0x60>
 8005fc8:	e000      	b.n	8005fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	22ff      	movs	r2, #255	@ 0xff
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005fd4:	f001 fc8a 	bl	80078ec <vPortExitCritical>
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe8:	f001 fc4e 	bl	8007888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e001      	b.n	8005ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ffe:	f001 fc75 	bl	80078ec <vPortExitCritical>

	return xReturn;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006014:	f001 fc38 	bl	8007888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	429a      	cmp	r2, r3
 8006022:	d102      	bne.n	800602a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e001      	b.n	800602e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800602e:	f001 fc5d 	bl	80078ec <vPortExitCritical>

	return xReturn;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e014      	b.n	8006076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800604c:	4a0f      	ldr	r2, [pc, #60]	@ (800608c <vQueueAddToRegistry+0x50>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006058:	490c      	ldr	r1, [pc, #48]	@ (800608c <vQueueAddToRegistry+0x50>)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006062:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <vQueueAddToRegistry+0x50>)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800606e:	e006      	b.n	800607e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b07      	cmp	r3, #7
 800607a:	d9e7      	bls.n	800604c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000c04 	.word	0x20000c04

08006090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060a0:	f001 fbf2 	bl	8007888 <vPortEnterCritical>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d103      	bne.n	80060ba <vQueueWaitForMessageRestricted+0x2a>
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c0:	b25b      	sxtb	r3, r3
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d103      	bne.n	80060d0 <vQueueWaitForMessageRestricted+0x40>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d0:	f001 fc0c 	bl	80078ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	3324      	adds	r3, #36	@ 0x24
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fc6d 	bl	80069c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff ff26 	bl	8005f3c <prvUnlockQueue>
	}
 80060f0:	bf00      	nop
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	@ 0x38
 80060fc:	af04      	add	r7, sp, #16
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <xTaskCreateStatic+0x2c>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	623b      	str	r3, [r7, #32]
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <xTaskCreateStatic+0x4a>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	61fb      	str	r3, [r7, #28]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006142:	23a8      	movs	r3, #168	@ 0xa8
 8006144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2ba8      	cmp	r3, #168	@ 0xa8
 800614a:	d00b      	beq.n	8006164 <xTaskCreateStatic+0x6c>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61bb      	str	r3, [r7, #24]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006164:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01e      	beq.n	80061aa <xTaskCreateStatic+0xb2>
 800616c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01b      	beq.n	80061aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	2202      	movs	r2, #2
 8006180:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006184:	2300      	movs	r3, #0
 8006186:	9303      	str	r3, [sp, #12]
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	9302      	str	r3, [sp, #8]
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f851 	bl	8006244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061a4:	f000 f8f6 	bl	8006394 <prvAddNewTaskToReadyList>
 80061a8:	e001      	b.n	80061ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061ae:	697b      	ldr	r3, [r7, #20]
	}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	@ 0x30
 80061bc:	af04      	add	r7, sp, #16
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fc7d 	bl	8007acc <pvPortMalloc>
 80061d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061da:	20a8      	movs	r0, #168	@ 0xa8
 80061dc:	f001 fc76 	bl	8007acc <pvPortMalloc>
 80061e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ee:	e005      	b.n	80061fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f001 fd39 	bl	8007c68 <vPortFree>
 80061f6:	e001      	b.n	80061fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d017      	beq.n	8006232 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	2300      	movs	r3, #0
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	9302      	str	r3, [sp, #8]
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f80f 	bl	8006244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006226:	69f8      	ldr	r0, [r7, #28]
 8006228:	f000 f8b4 	bl	8006394 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800622c:	2301      	movs	r3, #1
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e002      	b.n	8006238 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006238:	69bb      	ldr	r3, [r7, #24]
	}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	461a      	mov	r2, r3
 800625c:	21a5      	movs	r1, #165	@ 0xa5
 800625e:	f002 f851 	bl	8008304 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800626c:	3b01      	subs	r3, #1
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	617b      	str	r3, [r7, #20]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01f      	beq.n	80062e4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062a4:	2300      	movs	r3, #0
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e012      	b.n	80062d0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	7819      	ldrb	r1, [r3, #0]
 80062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	3334      	adds	r3, #52	@ 0x34
 80062ba:	460a      	mov	r2, r1
 80062bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d006      	beq.n	80062d8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	d9e9      	bls.n	80062aa <prvInitialiseNewTask+0x66>
 80062d6:	e000      	b.n	80062da <prvInitialiseNewTask+0x96>
			{
				break;
 80062d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e2:	e003      	b.n	80062ec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	2b37      	cmp	r3, #55	@ 0x37
 80062f0:	d901      	bls.n	80062f6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062f2:	2337      	movs	r3, #55	@ 0x37
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006300:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	2200      	movs	r2, #0
 8006306:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	3304      	adds	r3, #4
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff f8a7 	bl	8005460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	3318      	adds	r3, #24
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff f8a2 	bl	8005460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006320:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006330:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	2200      	movs	r2, #0
 8006336:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	2200      	movs	r2, #0
 800633e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	3354      	adds	r3, #84	@ 0x54
 8006346:	224c      	movs	r2, #76	@ 0x4c
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f001 ffda 	bl	8008304 <memset>
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	4a0d      	ldr	r2, [pc, #52]	@ (8006388 <prvInitialiseNewTask+0x144>)
 8006354:	659a      	str	r2, [r3, #88]	@ 0x58
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	4a0c      	ldr	r2, [pc, #48]	@ (800638c <prvInitialiseNewTask+0x148>)
 800635a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	4a0c      	ldr	r2, [pc, #48]	@ (8006390 <prvInitialiseNewTask+0x14c>)
 8006360:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	68f9      	ldr	r1, [r7, #12]
 8006366:	69b8      	ldr	r0, [r7, #24]
 8006368:	f001 f95a 	bl	8007620 <pxPortInitialiseStack>
 800636c:	4602      	mov	r2, r0
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637e:	bf00      	nop
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200060b8 	.word	0x200060b8
 800638c:	20006120 	.word	0x20006120
 8006390:	20006188 	.word	0x20006188

08006394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800639c:	f001 fa74 	bl	8007888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006458 <prvAddNewTaskToReadyList+0xc4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006458 <prvAddNewTaskToReadyList+0xc4>)
 80063a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063aa:	4b2c      	ldr	r3, [pc, #176]	@ (800645c <prvAddNewTaskToReadyList+0xc8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063b2:	4a2a      	ldr	r2, [pc, #168]	@ (800645c <prvAddNewTaskToReadyList+0xc8>)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063b8:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <prvAddNewTaskToReadyList+0xc4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d110      	bne.n	80063e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063c0:	f000 fc2e 	bl	8006c20 <prvInitialiseTaskLists>
 80063c4:	e00d      	b.n	80063e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063c6:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <prvAddNewTaskToReadyList+0xcc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ce:	4b23      	ldr	r3, [pc, #140]	@ (800645c <prvAddNewTaskToReadyList+0xc8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	429a      	cmp	r2, r3
 80063da:	d802      	bhi.n	80063e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063dc:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <prvAddNewTaskToReadyList+0xc8>)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063e2:	4b20      	ldr	r3, [pc, #128]	@ (8006464 <prvAddNewTaskToReadyList+0xd0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3301      	adds	r3, #1
 80063e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006464 <prvAddNewTaskToReadyList+0xd0>)
 80063ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006464 <prvAddNewTaskToReadyList+0xd0>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <prvAddNewTaskToReadyList+0xd4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d903      	bls.n	8006408 <prvAddNewTaskToReadyList+0x74>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4a18      	ldr	r2, [pc, #96]	@ (8006468 <prvAddNewTaskToReadyList+0xd4>)
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4a15      	ldr	r2, [pc, #84]	@ (800646c <prvAddNewTaskToReadyList+0xd8>)
 8006416:	441a      	add	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7ff f82b 	bl	800547a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006424:	f001 fa62 	bl	80078ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006428:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <prvAddNewTaskToReadyList+0xcc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00e      	beq.n	800644e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <prvAddNewTaskToReadyList+0xc8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	429a      	cmp	r2, r3
 800643c:	d207      	bcs.n	800644e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800643e:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <prvAddNewTaskToReadyList+0xdc>)
 8006440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20001118 	.word	0x20001118
 800645c:	20000c44 	.word	0x20000c44
 8006460:	20001124 	.word	0x20001124
 8006464:	20001134 	.word	0x20001134
 8006468:	20001120 	.word	0x20001120
 800646c:	20000c48 	.word	0x20000c48
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006486:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <vTaskDelay+0x64>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <vTaskDelay+0x32>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60bb      	str	r3, [r7, #8]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064a6:	f000 f88b 	bl	80065c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064aa:	2100      	movs	r1, #0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fd09 	bl	8006ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064b2:	f000 f893 	bl	80065dc <xTaskResumeAll>
 80064b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d107      	bne.n	80064ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80064be:	4b07      	ldr	r3, [pc, #28]	@ (80064dc <vTaskDelay+0x68>)
 80064c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20001140 	.word	0x20001140
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064ee:	463a      	mov	r2, r7
 80064f0:	1d39      	adds	r1, r7, #4
 80064f2:	f107 0308 	add.w	r3, r7, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe ff5e 	bl	80053b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	9202      	str	r2, [sp, #8]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2300      	movs	r3, #0
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	460a      	mov	r2, r1
 800650e:	4924      	ldr	r1, [pc, #144]	@ (80065a0 <vTaskStartScheduler+0xc0>)
 8006510:	4824      	ldr	r0, [pc, #144]	@ (80065a4 <vTaskStartScheduler+0xc4>)
 8006512:	f7ff fdf1 	bl	80060f8 <xTaskCreateStatic>
 8006516:	4603      	mov	r3, r0
 8006518:	4a23      	ldr	r2, [pc, #140]	@ (80065a8 <vTaskStartScheduler+0xc8>)
 800651a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800651c:	4b22      	ldr	r3, [pc, #136]	@ (80065a8 <vTaskStartScheduler+0xc8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006524:	2301      	movs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e001      	b.n	800652e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d102      	bne.n	800653a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006534:	f000 fd1a 	bl	8006f6c <xTimerCreateTimerTask>
 8006538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d11b      	bne.n	8006578 <vTaskStartScheduler+0x98>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006554:	4b15      	ldr	r3, [pc, #84]	@ (80065ac <vTaskStartScheduler+0xcc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3354      	adds	r3, #84	@ 0x54
 800655a:	4a15      	ldr	r2, [pc, #84]	@ (80065b0 <vTaskStartScheduler+0xd0>)
 800655c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800655e:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <vTaskStartScheduler+0xd4>)
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006566:	4b14      	ldr	r3, [pc, #80]	@ (80065b8 <vTaskStartScheduler+0xd8>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800656c:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <vTaskStartScheduler+0xdc>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006572:	f001 f8e5 	bl	8007740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006576:	e00f      	b.n	8006598 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d10b      	bne.n	8006598 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <vTaskStartScheduler+0xb4>
}
 8006598:	bf00      	nop
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	0800903c 	.word	0x0800903c
 80065a4:	08006bf1 	.word	0x08006bf1
 80065a8:	2000113c 	.word	0x2000113c
 80065ac:	20000c44 	.word	0x20000c44
 80065b0:	2000001c 	.word	0x2000001c
 80065b4:	20001138 	.word	0x20001138
 80065b8:	20001124 	.word	0x20001124
 80065bc:	2000111c 	.word	0x2000111c

080065c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065c4:	4b04      	ldr	r3, [pc, #16]	@ (80065d8 <vTaskSuspendAll+0x18>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a03      	ldr	r2, [pc, #12]	@ (80065d8 <vTaskSuspendAll+0x18>)
 80065cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065ce:	bf00      	nop
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20001140 	.word	0x20001140

080065dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ea:	4b42      	ldr	r3, [pc, #264]	@ (80066f4 <xTaskResumeAll+0x118>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <xTaskResumeAll+0x2e>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	603b      	str	r3, [r7, #0]
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	e7fd      	b.n	8006606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800660a:	f001 f93d 	bl	8007888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800660e:	4b39      	ldr	r3, [pc, #228]	@ (80066f4 <xTaskResumeAll+0x118>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3b01      	subs	r3, #1
 8006614:	4a37      	ldr	r2, [pc, #220]	@ (80066f4 <xTaskResumeAll+0x118>)
 8006616:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006618:	4b36      	ldr	r3, [pc, #216]	@ (80066f4 <xTaskResumeAll+0x118>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d162      	bne.n	80066e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006620:	4b35      	ldr	r3, [pc, #212]	@ (80066f8 <xTaskResumeAll+0x11c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05e      	beq.n	80066e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006628:	e02f      	b.n	800668a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662a:	4b34      	ldr	r3, [pc, #208]	@ (80066fc <xTaskResumeAll+0x120>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3318      	adds	r3, #24
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe ff7c 	bl	8005534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe ff77 	bl	8005534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664a:	4b2d      	ldr	r3, [pc, #180]	@ (8006700 <xTaskResumeAll+0x124>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d903      	bls.n	800665a <xTaskResumeAll+0x7e>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	4a2a      	ldr	r2, [pc, #168]	@ (8006700 <xTaskResumeAll+0x124>)
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4a27      	ldr	r2, [pc, #156]	@ (8006704 <xTaskResumeAll+0x128>)
 8006668:	441a      	add	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7fe ff02 	bl	800547a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667a:	4b23      	ldr	r3, [pc, #140]	@ (8006708 <xTaskResumeAll+0x12c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006684:	4b21      	ldr	r3, [pc, #132]	@ (800670c <xTaskResumeAll+0x130>)
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800668a:	4b1c      	ldr	r3, [pc, #112]	@ (80066fc <xTaskResumeAll+0x120>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1cb      	bne.n	800662a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006698:	f000 fb66 	bl	8006d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800669c:	4b1c      	ldr	r3, [pc, #112]	@ (8006710 <xTaskResumeAll+0x134>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d010      	beq.n	80066ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066a8:	f000 f846 	bl	8006738 <xTaskIncrementTick>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80066b2:	4b16      	ldr	r3, [pc, #88]	@ (800670c <xTaskResumeAll+0x130>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f1      	bne.n	80066a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80066c4:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <xTaskResumeAll+0x134>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066ca:	4b10      	ldr	r3, [pc, #64]	@ (800670c <xTaskResumeAll+0x130>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006714 <xTaskResumeAll+0x138>)
 80066d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e6:	f001 f901 	bl	80078ec <vPortExitCritical>

	return xAlreadyYielded;
 80066ea:	68bb      	ldr	r3, [r7, #8]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20001140 	.word	0x20001140
 80066f8:	20001118 	.word	0x20001118
 80066fc:	200010d8 	.word	0x200010d8
 8006700:	20001120 	.word	0x20001120
 8006704:	20000c48 	.word	0x20000c48
 8006708:	20000c44 	.word	0x20000c44
 800670c:	2000112c 	.word	0x2000112c
 8006710:	20001128 	.word	0x20001128
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800671e:	4b05      	ldr	r3, [pc, #20]	@ (8006734 <xTaskGetTickCount+0x1c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006724:	687b      	ldr	r3, [r7, #4]
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	2000111c 	.word	0x2000111c

08006738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006742:	4b4f      	ldr	r3, [pc, #316]	@ (8006880 <xTaskIncrementTick+0x148>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 8090 	bne.w	800686c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800674c:	4b4d      	ldr	r3, [pc, #308]	@ (8006884 <xTaskIncrementTick+0x14c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006754:	4a4b      	ldr	r2, [pc, #300]	@ (8006884 <xTaskIncrementTick+0x14c>)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d121      	bne.n	80067a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006760:	4b49      	ldr	r3, [pc, #292]	@ (8006888 <xTaskIncrementTick+0x150>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <xTaskIncrementTick+0x4a>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	603b      	str	r3, [r7, #0]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <xTaskIncrementTick+0x46>
 8006782:	4b41      	ldr	r3, [pc, #260]	@ (8006888 <xTaskIncrementTick+0x150>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	4b40      	ldr	r3, [pc, #256]	@ (800688c <xTaskIncrementTick+0x154>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a3e      	ldr	r2, [pc, #248]	@ (8006888 <xTaskIncrementTick+0x150>)
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	4a3e      	ldr	r2, [pc, #248]	@ (800688c <xTaskIncrementTick+0x154>)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b3e      	ldr	r3, [pc, #248]	@ (8006890 <xTaskIncrementTick+0x158>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	4a3c      	ldr	r2, [pc, #240]	@ (8006890 <xTaskIncrementTick+0x158>)
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	f000 fae2 	bl	8006d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006894 <xTaskIncrementTick+0x15c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d349      	bcc.n	8006842 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ae:	4b36      	ldr	r3, [pc, #216]	@ (8006888 <xTaskIncrementTick+0x150>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b8:	4b36      	ldr	r3, [pc, #216]	@ (8006894 <xTaskIncrementTick+0x15c>)
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295
 80067be:	601a      	str	r2, [r3, #0]
					break;
 80067c0:	e03f      	b.n	8006842 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c2:	4b31      	ldr	r3, [pc, #196]	@ (8006888 <xTaskIncrementTick+0x150>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d203      	bcs.n	80067e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067da:	4a2e      	ldr	r2, [pc, #184]	@ (8006894 <xTaskIncrementTick+0x15c>)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067e0:	e02f      	b.n	8006842 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fea4 	bl	8005534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3318      	adds	r3, #24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fe9b 	bl	8005534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006802:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <xTaskIncrementTick+0x160>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d903      	bls.n	8006812 <xTaskIncrementTick+0xda>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	4a22      	ldr	r2, [pc, #136]	@ (8006898 <xTaskIncrementTick+0x160>)
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a1f      	ldr	r2, [pc, #124]	@ (800689c <xTaskIncrementTick+0x164>)
 8006820:	441a      	add	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	4610      	mov	r0, r2
 800682a:	f7fe fe26 	bl	800547a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006832:	4b1b      	ldr	r3, [pc, #108]	@ (80068a0 <xTaskIncrementTick+0x168>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006838:	429a      	cmp	r2, r3
 800683a:	d3b8      	bcc.n	80067ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006840:	e7b5      	b.n	80067ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006842:	4b17      	ldr	r3, [pc, #92]	@ (80068a0 <xTaskIncrementTick+0x168>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006848:	4914      	ldr	r1, [pc, #80]	@ (800689c <xTaskIncrementTick+0x164>)
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d901      	bls.n	800685e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800685e:	4b11      	ldr	r3, [pc, #68]	@ (80068a4 <xTaskIncrementTick+0x16c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	e004      	b.n	8006876 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800686c:	4b0e      	ldr	r3, [pc, #56]	@ (80068a8 <xTaskIncrementTick+0x170>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a0d      	ldr	r2, [pc, #52]	@ (80068a8 <xTaskIncrementTick+0x170>)
 8006874:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006876:	697b      	ldr	r3, [r7, #20]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20001140 	.word	0x20001140
 8006884:	2000111c 	.word	0x2000111c
 8006888:	200010d0 	.word	0x200010d0
 800688c:	200010d4 	.word	0x200010d4
 8006890:	20001130 	.word	0x20001130
 8006894:	20001138 	.word	0x20001138
 8006898:	20001120 	.word	0x20001120
 800689c:	20000c48 	.word	0x20000c48
 80068a0:	20000c44 	.word	0x20000c44
 80068a4:	2000112c 	.word	0x2000112c
 80068a8:	20001128 	.word	0x20001128

080068ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006960 <vTaskSwitchContext+0xb4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006964 <vTaskSwitchContext+0xb8>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c0:	e047      	b.n	8006952 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80068c2:	4b28      	ldr	r3, [pc, #160]	@ (8006964 <vTaskSwitchContext+0xb8>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c8:	4b27      	ldr	r3, [pc, #156]	@ (8006968 <vTaskSwitchContext+0xbc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e011      	b.n	80068f4 <vTaskSwitchContext+0x48>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <vTaskSwitchContext+0x42>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	607b      	str	r3, [r7, #4]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <vTaskSwitchContext+0x3e>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	491d      	ldr	r1, [pc, #116]	@ (800696c <vTaskSwitchContext+0xc0>)
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0e3      	beq.n	80068d0 <vTaskSwitchContext+0x24>
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4a16      	ldr	r2, [pc, #88]	@ (800696c <vTaskSwitchContext+0xc0>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3308      	adds	r3, #8
 800692a:	429a      	cmp	r2, r3
 800692c:	d104      	bne.n	8006938 <vTaskSwitchContext+0x8c>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a0c      	ldr	r2, [pc, #48]	@ (8006970 <vTaskSwitchContext+0xc4>)
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <vTaskSwitchContext+0xbc>)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <vTaskSwitchContext+0xc4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3354      	adds	r3, #84	@ 0x54
 800694e:	4a09      	ldr	r2, [pc, #36]	@ (8006974 <vTaskSwitchContext+0xc8>)
 8006950:	6013      	str	r3, [r2, #0]
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20001140 	.word	0x20001140
 8006964:	2000112c 	.word	0x2000112c
 8006968:	20001120 	.word	0x20001120
 800696c:	20000c48 	.word	0x20000c48
 8006970:	20000c44 	.word	0x20000c44
 8006974:	2000001c 	.word	0x2000001c

08006978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a0:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <vTaskPlaceOnEventList+0x48>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3318      	adds	r3, #24
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fe fd8a 	bl	80054c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ae:	2101      	movs	r1, #1
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f000 fa87 	bl	8006ec4 <prvAddCurrentTaskToDelayedList>
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000c44 	.word	0x20000c44

080069c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	617b      	str	r3, [r7, #20]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <vTaskPlaceOnEventListRestricted+0x54>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4619      	mov	r1, r3
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7fe fd3f 	bl	800547a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295
 8006a06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f000 fa5a 	bl	8006ec4 <prvAddCurrentTaskToDelayedList>
	}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000c44 	.word	0x20000c44

08006a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60fb      	str	r3, [r7, #12]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fd70 	bl	8005534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a54:	4b1d      	ldr	r3, [pc, #116]	@ (8006acc <xTaskRemoveFromEventList+0xb0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11d      	bne.n	8006a98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fd67 	bl	8005534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	4b19      	ldr	r3, [pc, #100]	@ (8006ad0 <xTaskRemoveFromEventList+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <xTaskRemoveFromEventList+0x5e>
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	4a16      	ldr	r2, [pc, #88]	@ (8006ad0 <xTaskRemoveFromEventList+0xb4>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a13      	ldr	r2, [pc, #76]	@ (8006ad4 <xTaskRemoveFromEventList+0xb8>)
 8006a88:	441a      	add	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe fcf2 	bl	800547a <vListInsertEnd>
 8006a96:	e005      	b.n	8006aa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3318      	adds	r3, #24
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	480e      	ldr	r0, [pc, #56]	@ (8006ad8 <xTaskRemoveFromEventList+0xbc>)
 8006aa0:	f7fe fceb 	bl	800547a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006adc <xTaskRemoveFromEventList+0xc0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d905      	bls.n	8006abe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <xTaskRemoveFromEventList+0xc4>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e001      	b.n	8006ac2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ac2:	697b      	ldr	r3, [r7, #20]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20001140 	.word	0x20001140
 8006ad0:	20001120 	.word	0x20001120
 8006ad4:	20000c48 	.word	0x20000c48
 8006ad8:	200010d8 	.word	0x200010d8
 8006adc:	20000c44 	.word	0x20000c44
 8006ae0:	2000112c 	.word	0x2000112c

08006ae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aec:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <vTaskInternalSetTimeOutState+0x24>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006af4:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <vTaskInternalSetTimeOutState+0x28>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20001130 	.word	0x20001130
 8006b0c:	2000111c 	.word	0x2000111c

08006b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	613b      	str	r3, [r7, #16]
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	e7fd      	b.n	8006b34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b56:	f000 fe97 	bl	8007888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd0 <xTaskCheckForTimeOut+0xc0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d102      	bne.n	8006b7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e023      	b.n	8006bc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <xTaskCheckForTimeOut+0xc4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d007      	beq.n	8006b96 <xTaskCheckForTimeOut+0x86>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d302      	bcc.n	8006b96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e015      	b.n	8006bc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d20b      	bcs.n	8006bb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff ff99 	bl	8006ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e004      	b.n	8006bc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bc2:	f000 fe93 	bl	80078ec <vPortExitCritical>

	return xReturn;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	2000111c 	.word	0x2000111c
 8006bd4:	20001130 	.word	0x20001130

08006bd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	@ (8006bec <vTaskMissedYield+0x14>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2000112c 	.word	0x2000112c

08006bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bf8:	f000 f852 	bl	8006ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bfc:	4b06      	ldr	r3, [pc, #24]	@ (8006c18 <prvIdleTask+0x28>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d9f9      	bls.n	8006bf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <prvIdleTask+0x2c>)
 8006c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c14:	e7f0      	b.n	8006bf8 <prvIdleTask+0x8>
 8006c16:	bf00      	nop
 8006c18:	20000c48 	.word	0x20000c48
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c26:	2300      	movs	r3, #0
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	e00c      	b.n	8006c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4a12      	ldr	r2, [pc, #72]	@ (8006c80 <prvInitialiseTaskLists+0x60>)
 8006c38:	4413      	add	r3, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fbf0 	bl	8005420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3301      	adds	r3, #1
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b37      	cmp	r3, #55	@ 0x37
 8006c4a:	d9ef      	bls.n	8006c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c4c:	480d      	ldr	r0, [pc, #52]	@ (8006c84 <prvInitialiseTaskLists+0x64>)
 8006c4e:	f7fe fbe7 	bl	8005420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c52:	480d      	ldr	r0, [pc, #52]	@ (8006c88 <prvInitialiseTaskLists+0x68>)
 8006c54:	f7fe fbe4 	bl	8005420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c58:	480c      	ldr	r0, [pc, #48]	@ (8006c8c <prvInitialiseTaskLists+0x6c>)
 8006c5a:	f7fe fbe1 	bl	8005420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c5e:	480c      	ldr	r0, [pc, #48]	@ (8006c90 <prvInitialiseTaskLists+0x70>)
 8006c60:	f7fe fbde 	bl	8005420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c64:	480b      	ldr	r0, [pc, #44]	@ (8006c94 <prvInitialiseTaskLists+0x74>)
 8006c66:	f7fe fbdb 	bl	8005420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <prvInitialiseTaskLists+0x78>)
 8006c6c:	4a05      	ldr	r2, [pc, #20]	@ (8006c84 <prvInitialiseTaskLists+0x64>)
 8006c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <prvInitialiseTaskLists+0x7c>)
 8006c72:	4a05      	ldr	r2, [pc, #20]	@ (8006c88 <prvInitialiseTaskLists+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000c48 	.word	0x20000c48
 8006c84:	200010a8 	.word	0x200010a8
 8006c88:	200010bc 	.word	0x200010bc
 8006c8c:	200010d8 	.word	0x200010d8
 8006c90:	200010ec 	.word	0x200010ec
 8006c94:	20001104 	.word	0x20001104
 8006c98:	200010d0 	.word	0x200010d0
 8006c9c:	200010d4 	.word	0x200010d4

08006ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca6:	e019      	b.n	8006cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ca8:	f000 fdee 	bl	8007888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cac:	4b10      	ldr	r3, [pc, #64]	@ (8006cf0 <prvCheckTasksWaitingTermination+0x50>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fc3b 	bl	8005534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x54>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x54>)
 8006cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <prvCheckTasksWaitingTermination+0x58>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf8 <prvCheckTasksWaitingTermination+0x58>)
 8006cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cd2:	f000 fe0b 	bl	80078ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f810 	bl	8006cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <prvCheckTasksWaitingTermination+0x58>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e1      	bne.n	8006ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200010ec 	.word	0x200010ec
 8006cf4:	20001118 	.word	0x20001118
 8006cf8:	20001100 	.word	0x20001100

08006cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3354      	adds	r3, #84	@ 0x54
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fb13 	bl	8008334 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 ffa3 	bl	8007c68 <vPortFree>
				vPortFree( pxTCB );
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 ffa0 	bl	8007c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d28:	e019      	b.n	8006d5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d103      	bne.n	8006d3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 ff97 	bl	8007c68 <vPortFree>
	}
 8006d3a:	e010      	b.n	8006d5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d00b      	beq.n	8006d5e <prvDeleteTCB+0x62>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <prvDeleteTCB+0x5e>
	}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006da0 <prvResetNextTaskUnblockTime+0x38>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <prvResetNextTaskUnblockTime+0x3c>)
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d80:	e008      	b.n	8006d94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d82:	4b07      	ldr	r3, [pc, #28]	@ (8006da0 <prvResetNextTaskUnblockTime+0x38>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a04      	ldr	r2, [pc, #16]	@ (8006da4 <prvResetNextTaskUnblockTime+0x3c>)
 8006d92:	6013      	str	r3, [r2, #0]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	200010d0 	.word	0x200010d0
 8006da4:	20001138 	.word	0x20001138

08006da8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dae:	4b0b      	ldr	r3, [pc, #44]	@ (8006ddc <xTaskGetSchedulerState+0x34>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d102      	bne.n	8006dbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006db6:	2301      	movs	r3, #1
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	e008      	b.n	8006dce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dbc:	4b08      	ldr	r3, [pc, #32]	@ (8006de0 <xTaskGetSchedulerState+0x38>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	e001      	b.n	8006dce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dce:	687b      	ldr	r3, [r7, #4]
	}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	20001124 	.word	0x20001124
 8006de0:	20001140 	.word	0x20001140

08006de4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d058      	beq.n	8006eac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb8 <xTaskPriorityDisinherit+0xd4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d00b      	beq.n	8006e1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60bb      	str	r3, [r7, #8]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d02c      	beq.n	8006eac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d128      	bne.n	8006eac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fb68 	bl	8005534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006ebc <xTaskPriorityDisinherit+0xd8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d903      	bls.n	8006e8c <xTaskPriorityDisinherit+0xa8>
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	4a0c      	ldr	r2, [pc, #48]	@ (8006ebc <xTaskPriorityDisinherit+0xd8>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4a09      	ldr	r2, [pc, #36]	@ (8006ec0 <xTaskPriorityDisinherit+0xdc>)
 8006e9a:	441a      	add	r2, r3
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f7fe fae9 	bl	800547a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eac:	697b      	ldr	r3, [r7, #20]
	}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000c44 	.word	0x20000c44
 8006ebc:	20001120 	.word	0x20001120
 8006ec0:	20000c48 	.word	0x20000c48

08006ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ece:	4b21      	ldr	r3, [pc, #132]	@ (8006f54 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed4:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fb2a 	bl	8005534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d10a      	bne.n	8006efe <prvAddCurrentTaskToDelayedList+0x3a>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4819      	ldr	r0, [pc, #100]	@ (8006f5c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ef8:	f7fe fabf 	bl	800547a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006efc:	e026      	b.n	8006f4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f06:	4b14      	ldr	r3, [pc, #80]	@ (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d209      	bcs.n	8006f2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f16:	4b12      	ldr	r3, [pc, #72]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe facd 	bl	80054c2 <vListInsert>
}
 8006f28:	e010      	b.n	8006f4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe fac3 	bl	80054c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d202      	bcs.n	8006f4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f46:	4a08      	ldr	r2, [pc, #32]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000111c 	.word	0x2000111c
 8006f58:	20000c44 	.word	0x20000c44
 8006f5c:	20001104 	.word	0x20001104
 8006f60:	200010d4 	.word	0x200010d4
 8006f64:	200010d0 	.word	0x200010d0
 8006f68:	20001138 	.word	0x20001138

08006f6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	@ 0x28
 8006f70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f76:	f000 fb13 	bl	80075a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff0 <xTimerCreateTimerTask+0x84>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d021      	beq.n	8006fc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f8a:	1d3a      	adds	r2, r7, #4
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fa29 	bl	80053ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	9202      	str	r2, [sp, #8]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	460a      	mov	r2, r1
 8006fac:	4911      	ldr	r1, [pc, #68]	@ (8006ff4 <xTimerCreateTimerTask+0x88>)
 8006fae:	4812      	ldr	r0, [pc, #72]	@ (8006ff8 <xTimerCreateTimerTask+0x8c>)
 8006fb0:	f7ff f8a2 	bl	80060f8 <xTaskCreateStatic>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	4a11      	ldr	r2, [pc, #68]	@ (8006ffc <xTimerCreateTimerTask+0x90>)
 8006fb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fba:	4b10      	ldr	r3, [pc, #64]	@ (8006ffc <xTimerCreateTimerTask+0x90>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	613b      	str	r3, [r7, #16]
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fe4:	697b      	ldr	r3, [r7, #20]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20001174 	.word	0x20001174
 8006ff4:	08009044 	.word	0x08009044
 8006ff8:	08007139 	.word	0x08007139
 8006ffc:	20001178 	.word	0x20001178

08007000 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	@ 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <xTimerGenericCommand+0x30>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	623b      	str	r3, [r7, #32]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007030:	4b19      	ldr	r3, [pc, #100]	@ (8007098 <xTimerGenericCommand+0x98>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d02a      	beq.n	800708e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b05      	cmp	r3, #5
 8007048:	dc18      	bgt.n	800707c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800704a:	f7ff fead 	bl	8006da8 <xTaskGetSchedulerState>
 800704e:	4603      	mov	r3, r0
 8007050:	2b02      	cmp	r3, #2
 8007052:	d109      	bne.n	8007068 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007054:	4b10      	ldr	r3, [pc, #64]	@ (8007098 <xTimerGenericCommand+0x98>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	f107 0110 	add.w	r1, r7, #16
 800705c:	2300      	movs	r3, #0
 800705e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007060:	f7fe fbd8 	bl	8005814 <xQueueGenericSend>
 8007064:	6278      	str	r0, [r7, #36]	@ 0x24
 8007066:	e012      	b.n	800708e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007068:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <xTimerGenericCommand+0x98>)
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	f107 0110 	add.w	r1, r7, #16
 8007070:	2300      	movs	r3, #0
 8007072:	2200      	movs	r2, #0
 8007074:	f7fe fbce 	bl	8005814 <xQueueGenericSend>
 8007078:	6278      	str	r0, [r7, #36]	@ 0x24
 800707a:	e008      	b.n	800708e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800707c:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <xTimerGenericCommand+0x98>)
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	f107 0110 	add.w	r1, r7, #16
 8007084:	2300      	movs	r3, #0
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	f7fe fcc6 	bl	8005a18 <xQueueGenericSendFromISR>
 800708c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007090:	4618      	mov	r0, r3
 8007092:	3728      	adds	r7, #40	@ 0x28
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20001174 	.word	0x20001174

0800709c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a6:	4b23      	ldr	r3, [pc, #140]	@ (8007134 <prvProcessExpiredTimer+0x98>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fa3d 	bl	8005534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d023      	beq.n	8007110 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	699a      	ldr	r2, [r3, #24]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	18d1      	adds	r1, r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	6978      	ldr	r0, [r7, #20]
 80070d6:	f000 f8d5 	bl	8007284 <prvInsertTimerInActiveList>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d020      	beq.n	8007122 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070e0:	2300      	movs	r3, #0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	2100      	movs	r1, #0
 80070ea:	6978      	ldr	r0, [r7, #20]
 80070ec:	f7ff ff88 	bl	8007000 <xTimerGenericCommand>
 80070f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d114      	bne.n	8007122 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60fb      	str	r3, [r7, #12]
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	e7fd      	b.n	800710c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	4798      	blx	r3
}
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000116c 	.word	0x2000116c

08007138 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007140:	f107 0308 	add.w	r3, r7, #8
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f859 	bl	80071fc <prvGetNextExpireTime>
 800714a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f805 	bl	8007160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007156:	f000 f8d7 	bl	8007308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800715a:	bf00      	nop
 800715c:	e7f0      	b.n	8007140 <prvTimerTask+0x8>
	...

08007160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800716a:	f7ff fa29 	bl	80065c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	4618      	mov	r0, r3
 8007174:	f000 f866 	bl	8007244 <prvSampleTimeNow>
 8007178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d130      	bne.n	80071e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <prvProcessTimerOrBlockTask+0x3c>
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	429a      	cmp	r2, r3
 800718c:	d806      	bhi.n	800719c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800718e:	f7ff fa25 	bl	80065dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ff81 	bl	800709c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800719a:	e024      	b.n	80071e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071a2:	4b13      	ldr	r3, [pc, #76]	@ (80071f0 <prvProcessTimerOrBlockTask+0x90>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <prvProcessTimerOrBlockTask+0x50>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <prvProcessTimerOrBlockTask+0x52>
 80071b0:	2300      	movs	r3, #0
 80071b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071b4:	4b0f      	ldr	r3, [pc, #60]	@ (80071f4 <prvProcessTimerOrBlockTask+0x94>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7fe ff65 	bl	8006090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071c6:	f7ff fa09 	bl	80065dc <xTaskResumeAll>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071d0:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <prvProcessTimerOrBlockTask+0x98>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
}
 80071e0:	e001      	b.n	80071e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071e2:	f7ff f9fb 	bl	80065dc <xTaskResumeAll>
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20001170 	.word	0x20001170
 80071f4:	20001174 	.word	0x20001174
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007204:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <prvGetNextExpireTime+0x44>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <prvGetNextExpireTime+0x16>
 800720e:	2201      	movs	r2, #1
 8007210:	e000      	b.n	8007214 <prvGetNextExpireTime+0x18>
 8007212:	2200      	movs	r2, #0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007220:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <prvGetNextExpireTime+0x44>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e001      	b.n	8007230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007230:	68fb      	ldr	r3, [r7, #12]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	2000116c 	.word	0x2000116c

08007244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800724c:	f7ff fa64 	bl	8006718 <xTaskGetTickCount>
 8007250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007252:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <prvSampleTimeNow+0x3c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	429a      	cmp	r2, r3
 800725a:	d205      	bcs.n	8007268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800725c:	f000 f93a 	bl	80074d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e002      	b.n	800726e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800726e:	4a04      	ldr	r2, [pc, #16]	@ (8007280 <prvSampleTimeNow+0x3c>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000117c 	.word	0x2000117c

08007284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d812      	bhi.n	80072d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d302      	bcc.n	80072be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072b8:	2301      	movs	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	e01b      	b.n	80072f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072be:	4b10      	ldr	r3, [pc, #64]	@ (8007300 <prvInsertTimerInActiveList+0x7c>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4619      	mov	r1, r3
 80072c8:	4610      	mov	r0, r2
 80072ca:	f7fe f8fa 	bl	80054c2 <vListInsert>
 80072ce:	e012      	b.n	80072f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d206      	bcs.n	80072e6 <prvInsertTimerInActiveList+0x62>
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d302      	bcc.n	80072e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e007      	b.n	80072f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072e6:	4b07      	ldr	r3, [pc, #28]	@ (8007304 <prvInsertTimerInActiveList+0x80>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe f8e6 	bl	80054c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072f6:	697b      	ldr	r3, [r7, #20]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20001170 	.word	0x20001170
 8007304:	2000116c 	.word	0x2000116c

08007308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	@ 0x38
 800730c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800730e:	e0ce      	b.n	80074ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da19      	bge.n	800734a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	3304      	adds	r3, #4
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	61fb      	str	r3, [r7, #28]
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	e7fd      	b.n	8007336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007340:	6850      	ldr	r0, [r2, #4]
 8007342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007344:	6892      	ldr	r2, [r2, #8]
 8007346:	4611      	mov	r1, r2
 8007348:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f2c0 80ae 	blt.w	80074ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	3304      	adds	r3, #4
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe f8e6 	bl	8005534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007368:	463b      	mov	r3, r7
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ff6a 	bl	8007244 <prvSampleTimeNow>
 8007370:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b09      	cmp	r3, #9
 8007376:	f200 8097 	bhi.w	80074a8 <prvProcessReceivedCommands+0x1a0>
 800737a:	a201      	add	r2, pc, #4	@ (adr r2, 8007380 <prvProcessReceivedCommands+0x78>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073a9 	.word	0x080073a9
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073a9 	.word	0x080073a9
 800738c:	0800741f 	.word	0x0800741f
 8007390:	08007433 	.word	0x08007433
 8007394:	0800747f 	.word	0x0800747f
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073a9 	.word	0x080073a9
 80073a0:	0800741f 	.word	0x0800741f
 80073a4:	08007433 	.word	0x08007433
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	18d1      	adds	r1, r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073c8:	f7ff ff5c 	bl	8007284 <prvInsertTimerInActiveList>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d06c      	beq.n	80074ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d061      	beq.n	80074ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	441a      	add	r2, r3
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2300      	movs	r3, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073fa:	f7ff fe01 	bl	8007000 <xTimerGenericCommand>
 80073fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d152      	bne.n	80074ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61bb      	str	r3, [r7, #24]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007430:	e03d      	b.n	80074ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	b2da      	uxtb	r2, r3
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	617b      	str	r3, [r7, #20]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	18d1      	adds	r1, r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007478:	f7ff ff04 	bl	8007284 <prvInsertTimerInActiveList>
					break;
 800747c:	e017      	b.n	80074ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800748c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800748e:	f000 fbeb 	bl	8007c68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007492:	e00c      	b.n	80074ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074a6:	e002      	b.n	80074ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <prvProcessReceivedCommands+0x1a6>
					break;
 80074ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ae:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <prvProcessReceivedCommands+0x1c8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1d39      	adds	r1, r7, #4
 80074b4:	2200      	movs	r2, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fb4c 	bl	8005b54 <xQueueReceive>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af26 	bne.w	8007310 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	3730      	adds	r7, #48	@ 0x30
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20001174 	.word	0x20001174

080074d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074da:	e049      	b.n	8007570 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007598 <prvSwitchTimerLists+0xc4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007598 <prvSwitchTimerLists+0xc4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe f81d 	bl	8005534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d02f      	beq.n	8007570 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	d90e      	bls.n	8007540 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800752e:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <prvSwitchTimerLists+0xc4>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f7fd ffc2 	bl	80054c2 <vListInsert>
 800753e:	e017      	b.n	8007570 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007540:	2300      	movs	r3, #0
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	2100      	movs	r1, #0
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fd58 	bl	8007000 <xTimerGenericCommand>
 8007550:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	603b      	str	r3, [r7, #0]
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007570:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <prvSwitchTimerLists+0xc4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1b0      	bne.n	80074dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800757a:	4b07      	ldr	r3, [pc, #28]	@ (8007598 <prvSwitchTimerLists+0xc4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007580:	4b06      	ldr	r3, [pc, #24]	@ (800759c <prvSwitchTimerLists+0xc8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a04      	ldr	r2, [pc, #16]	@ (8007598 <prvSwitchTimerLists+0xc4>)
 8007586:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007588:	4a04      	ldr	r2, [pc, #16]	@ (800759c <prvSwitchTimerLists+0xc8>)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	6013      	str	r3, [r2, #0]
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000116c 	.word	0x2000116c
 800759c:	20001170 	.word	0x20001170

080075a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075a6:	f000 f96f 	bl	8007888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075aa:	4b15      	ldr	r3, [pc, #84]	@ (8007600 <prvCheckForValidListAndQueue+0x60>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d120      	bne.n	80075f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075b2:	4814      	ldr	r0, [pc, #80]	@ (8007604 <prvCheckForValidListAndQueue+0x64>)
 80075b4:	f7fd ff34 	bl	8005420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075b8:	4813      	ldr	r0, [pc, #76]	@ (8007608 <prvCheckForValidListAndQueue+0x68>)
 80075ba:	f7fd ff31 	bl	8005420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075be:	4b13      	ldr	r3, [pc, #76]	@ (800760c <prvCheckForValidListAndQueue+0x6c>)
 80075c0:	4a10      	ldr	r2, [pc, #64]	@ (8007604 <prvCheckForValidListAndQueue+0x64>)
 80075c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075c4:	4b12      	ldr	r3, [pc, #72]	@ (8007610 <prvCheckForValidListAndQueue+0x70>)
 80075c6:	4a10      	ldr	r2, [pc, #64]	@ (8007608 <prvCheckForValidListAndQueue+0x68>)
 80075c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075ca:	2300      	movs	r3, #0
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	4b11      	ldr	r3, [pc, #68]	@ (8007614 <prvCheckForValidListAndQueue+0x74>)
 80075d0:	4a11      	ldr	r2, [pc, #68]	@ (8007618 <prvCheckForValidListAndQueue+0x78>)
 80075d2:	2110      	movs	r1, #16
 80075d4:	200a      	movs	r0, #10
 80075d6:	f7fe f841 	bl	800565c <xQueueGenericCreateStatic>
 80075da:	4603      	mov	r3, r0
 80075dc:	4a08      	ldr	r2, [pc, #32]	@ (8007600 <prvCheckForValidListAndQueue+0x60>)
 80075de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075e0:	4b07      	ldr	r3, [pc, #28]	@ (8007600 <prvCheckForValidListAndQueue+0x60>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075e8:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <prvCheckForValidListAndQueue+0x60>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	490b      	ldr	r1, [pc, #44]	@ (800761c <prvCheckForValidListAndQueue+0x7c>)
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fd24 	bl	800603c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075f4:	f000 f97a 	bl	80078ec <vPortExitCritical>
}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20001174 	.word	0x20001174
 8007604:	20001144 	.word	0x20001144
 8007608:	20001158 	.word	0x20001158
 800760c:	2000116c 	.word	0x2000116c
 8007610:	20001170 	.word	0x20001170
 8007614:	20001220 	.word	0x20001220
 8007618:	20001180 	.word	0x20001180
 800761c:	0800904c 	.word	0x0800904c

08007620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3b04      	subs	r3, #4
 8007630:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3b04      	subs	r3, #4
 800763e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f023 0201 	bic.w	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b04      	subs	r3, #4
 800764e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007650:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <pxPortInitialiseStack+0x64>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3b14      	subs	r3, #20
 800765a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3b04      	subs	r3, #4
 8007666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f06f 0202 	mvn.w	r2, #2
 800766e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3b20      	subs	r3, #32
 8007674:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	08007689 	.word	0x08007689

08007688 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007692:	4b13      	ldr	r3, [pc, #76]	@ (80076e0 <prvTaskExitError+0x58>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d00b      	beq.n	80076b4 <prvTaskExitError+0x2c>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	60fb      	str	r3, [r7, #12]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <prvTaskExitError+0x28>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60bb      	str	r3, [r7, #8]
}
 80076c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076c8:	bf00      	nop
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0fc      	beq.n	80076ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000000c 	.word	0x2000000c
	...

080076f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076f0:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <pxCurrentTCBConst2>)
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	6808      	ldr	r0, [r1, #0]
 80076f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fa:	f380 8809 	msr	PSP, r0
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f04f 0000 	mov.w	r0, #0
 8007706:	f380 8811 	msr	BASEPRI, r0
 800770a:	4770      	bx	lr
 800770c:	f3af 8000 	nop.w

08007710 <pxCurrentTCBConst2>:
 8007710:	20000c44 	.word	0x20000c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop

08007718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007718:	4808      	ldr	r0, [pc, #32]	@ (800773c <prvPortStartFirstTask+0x24>)
 800771a:	6800      	ldr	r0, [r0, #0]
 800771c:	6800      	ldr	r0, [r0, #0]
 800771e:	f380 8808 	msr	MSP, r0
 8007722:	f04f 0000 	mov.w	r0, #0
 8007726:	f380 8814 	msr	CONTROL, r0
 800772a:	b662      	cpsie	i
 800772c:	b661      	cpsie	f
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	df00      	svc	0
 8007738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800773a:	bf00      	nop
 800773c:	e000ed08 	.word	0xe000ed08

08007740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007746:	4b47      	ldr	r3, [pc, #284]	@ (8007864 <xPortStartScheduler+0x124>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a47      	ldr	r2, [pc, #284]	@ (8007868 <xPortStartScheduler+0x128>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d10b      	bne.n	8007768 <xPortStartScheduler+0x28>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60fb      	str	r3, [r7, #12]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007768:	4b3e      	ldr	r3, [pc, #248]	@ (8007864 <xPortStartScheduler+0x124>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a3f      	ldr	r2, [pc, #252]	@ (800786c <xPortStartScheduler+0x12c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10b      	bne.n	800778a <xPortStartScheduler+0x4a>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	613b      	str	r3, [r7, #16]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800778a:	4b39      	ldr	r3, [pc, #228]	@ (8007870 <xPortStartScheduler+0x130>)
 800778c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	22ff      	movs	r2, #255	@ 0xff
 800779a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	4b31      	ldr	r3, [pc, #196]	@ (8007874 <xPortStartScheduler+0x134>)
 80077b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077b2:	4b31      	ldr	r3, [pc, #196]	@ (8007878 <xPortStartScheduler+0x138>)
 80077b4:	2207      	movs	r2, #7
 80077b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077b8:	e009      	b.n	80077ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80077ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007878 <xPortStartScheduler+0x138>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3b01      	subs	r3, #1
 80077c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007878 <xPortStartScheduler+0x138>)
 80077c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d6:	2b80      	cmp	r3, #128	@ 0x80
 80077d8:	d0ef      	beq.n	80077ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077da:	4b27      	ldr	r3, [pc, #156]	@ (8007878 <xPortStartScheduler+0x138>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f1c3 0307 	rsb	r3, r3, #7
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d00b      	beq.n	80077fe <xPortStartScheduler+0xbe>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60bb      	str	r3, [r7, #8]
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	e7fd      	b.n	80077fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007878 <xPortStartScheduler+0x138>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	4a1c      	ldr	r2, [pc, #112]	@ (8007878 <xPortStartScheduler+0x138>)
 8007806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007808:	4b1b      	ldr	r3, [pc, #108]	@ (8007878 <xPortStartScheduler+0x138>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007810:	4a19      	ldr	r2, [pc, #100]	@ (8007878 <xPortStartScheduler+0x138>)
 8007812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	b2da      	uxtb	r2, r3
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800781c:	4b17      	ldr	r3, [pc, #92]	@ (800787c <xPortStartScheduler+0x13c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a16      	ldr	r2, [pc, #88]	@ (800787c <xPortStartScheduler+0x13c>)
 8007822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007828:	4b14      	ldr	r3, [pc, #80]	@ (800787c <xPortStartScheduler+0x13c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a13      	ldr	r2, [pc, #76]	@ (800787c <xPortStartScheduler+0x13c>)
 800782e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007834:	f000 f8da 	bl	80079ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007838:	4b11      	ldr	r3, [pc, #68]	@ (8007880 <xPortStartScheduler+0x140>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800783e:	f000 f8f9 	bl	8007a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007842:	4b10      	ldr	r3, [pc, #64]	@ (8007884 <xPortStartScheduler+0x144>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a0f      	ldr	r2, [pc, #60]	@ (8007884 <xPortStartScheduler+0x144>)
 8007848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800784c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800784e:	f7ff ff63 	bl	8007718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007852:	f7ff f82b 	bl	80068ac <vTaskSwitchContext>
	prvTaskExitError();
 8007856:	f7ff ff17 	bl	8007688 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	e000ed00 	.word	0xe000ed00
 8007868:	410fc271 	.word	0x410fc271
 800786c:	410fc270 	.word	0x410fc270
 8007870:	e000e400 	.word	0xe000e400
 8007874:	20001270 	.word	0x20001270
 8007878:	20001274 	.word	0x20001274
 800787c:	e000ed20 	.word	0xe000ed20
 8007880:	2000000c 	.word	0x2000000c
 8007884:	e000ef34 	.word	0xe000ef34

08007888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	607b      	str	r3, [r7, #4]
}
 80078a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <vPortEnterCritical+0x5c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	4a0e      	ldr	r2, [pc, #56]	@ (80078e4 <vPortEnterCritical+0x5c>)
 80078aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078ac:	4b0d      	ldr	r3, [pc, #52]	@ (80078e4 <vPortEnterCritical+0x5c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d110      	bne.n	80078d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078b4:	4b0c      	ldr	r3, [pc, #48]	@ (80078e8 <vPortEnterCritical+0x60>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	603b      	str	r3, [r7, #0]
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e7fd      	b.n	80078d2 <vPortEnterCritical+0x4a>
	}
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	2000000c 	.word	0x2000000c
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078f2:	4b12      	ldr	r3, [pc, #72]	@ (800793c <vPortExitCritical+0x50>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <vPortExitCritical+0x26>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	607b      	str	r3, [r7, #4]
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007912:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <vPortExitCritical+0x50>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3b01      	subs	r3, #1
 8007918:	4a08      	ldr	r2, [pc, #32]	@ (800793c <vPortExitCritical+0x50>)
 800791a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800791c:	4b07      	ldr	r3, [pc, #28]	@ (800793c <vPortExitCritical+0x50>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <vPortExitCritical+0x44>
 8007924:	2300      	movs	r3, #0
 8007926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f383 8811 	msr	BASEPRI, r3
}
 800792e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	2000000c 	.word	0x2000000c

08007940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007940:	f3ef 8009 	mrs	r0, PSP
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	4b15      	ldr	r3, [pc, #84]	@ (80079a0 <pxCurrentTCBConst>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	f01e 0f10 	tst.w	lr, #16
 8007950:	bf08      	it	eq
 8007952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	6010      	str	r0, [r2, #0]
 800795c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007964:	f380 8811 	msr	BASEPRI, r0
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f7fe ff9c 	bl	80068ac <vTaskSwitchContext>
 8007974:	f04f 0000 	mov.w	r0, #0
 8007978:	f380 8811 	msr	BASEPRI, r0
 800797c:	bc09      	pop	{r0, r3}
 800797e:	6819      	ldr	r1, [r3, #0]
 8007980:	6808      	ldr	r0, [r1, #0]
 8007982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007986:	f01e 0f10 	tst.w	lr, #16
 800798a:	bf08      	it	eq
 800798c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007990:	f380 8809 	msr	PSP, r0
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	f3af 8000 	nop.w

080079a0 <pxCurrentTCBConst>:
 80079a0:	20000c44 	.word	0x20000c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop

080079a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	607b      	str	r3, [r7, #4]
}
 80079c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079c2:	f7fe feb9 	bl	8006738 <xTaskIncrementTick>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079cc:	4b06      	ldr	r3, [pc, #24]	@ (80079e8 <xPortSysTickHandler+0x40>)
 80079ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	2300      	movs	r3, #0
 80079d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f383 8811 	msr	BASEPRI, r3
}
 80079de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <vPortSetupTimerInterrupt+0x34>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <vPortSetupTimerInterrupt+0x38>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007a28 <vPortSetupTimerInterrupt+0x3c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a0a      	ldr	r2, [pc, #40]	@ (8007a2c <vPortSetupTimerInterrupt+0x40>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	099b      	lsrs	r3, r3, #6
 8007a08:	4a09      	ldr	r2, [pc, #36]	@ (8007a30 <vPortSetupTimerInterrupt+0x44>)
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a0e:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <vPortSetupTimerInterrupt+0x34>)
 8007a10:	2207      	movs	r2, #7
 8007a12:	601a      	str	r2, [r3, #0]
}
 8007a14:	bf00      	nop
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	e000e010 	.word	0xe000e010
 8007a24:	e000e018 	.word	0xe000e018
 8007a28:	20000000 	.word	0x20000000
 8007a2c:	10624dd3 	.word	0x10624dd3
 8007a30:	e000e014 	.word	0xe000e014

08007a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a44 <vPortEnableVFP+0x10>
 8007a38:	6801      	ldr	r1, [r0, #0]
 8007a3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a3e:	6001      	str	r1, [r0, #0]
 8007a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a42:	bf00      	nop
 8007a44:	e000ed88 	.word	0xe000ed88

08007a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a4e:	f3ef 8305 	mrs	r3, IPSR
 8007a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b0f      	cmp	r3, #15
 8007a58:	d915      	bls.n	8007a86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a5a:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <vPortValidateInterruptPriority+0x74>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a64:	4b16      	ldr	r3, [pc, #88]	@ (8007ac0 <vPortValidateInterruptPriority+0x78>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	7afa      	ldrb	r2, [r7, #11]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d20b      	bcs.n	8007a86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac4 <vPortValidateInterruptPriority+0x7c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac8 <vPortValidateInterruptPriority+0x80>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d90b      	bls.n	8007aae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	603b      	str	r3, [r7, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <vPortValidateInterruptPriority+0x62>
	}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	e000e3f0 	.word	0xe000e3f0
 8007ac0:	20001270 	.word	0x20001270
 8007ac4:	e000ed0c 	.word	0xe000ed0c
 8007ac8:	20001274 	.word	0x20001274

08007acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08a      	sub	sp, #40	@ 0x28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ad8:	f7fe fd72 	bl	80065c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007adc:	4b5c      	ldr	r3, [pc, #368]	@ (8007c50 <pvPortMalloc+0x184>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ae4:	f000 f924 	bl	8007d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8007c54 <pvPortMalloc+0x188>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 8095 	bne.w	8007c20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01e      	beq.n	8007b3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007afc:	2208      	movs	r2, #8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d015      	beq.n	8007b3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f023 0307 	bic.w	r3, r3, #7
 8007b14:	3308      	adds	r3, #8
 8007b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <pvPortMalloc+0x6e>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	617b      	str	r3, [r7, #20]
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d06f      	beq.n	8007c20 <pvPortMalloc+0x154>
 8007b40:	4b45      	ldr	r3, [pc, #276]	@ (8007c58 <pvPortMalloc+0x18c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d86a      	bhi.n	8007c20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b4a:	4b44      	ldr	r3, [pc, #272]	@ (8007c5c <pvPortMalloc+0x190>)
 8007b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b4e:	4b43      	ldr	r3, [pc, #268]	@ (8007c5c <pvPortMalloc+0x190>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b54:	e004      	b.n	8007b60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <pvPortMalloc+0xa6>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f1      	bne.n	8007b56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b72:	4b37      	ldr	r3, [pc, #220]	@ (8007c50 <pvPortMalloc+0x184>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d051      	beq.n	8007c20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2208      	movs	r2, #8
 8007b82:	4413      	add	r3, r2
 8007b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	2308      	movs	r3, #8
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d920      	bls.n	8007be0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <pvPortMalloc+0xfc>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	613b      	str	r3, [r7, #16]
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bda:	69b8      	ldr	r0, [r7, #24]
 8007bdc:	f000 f90a 	bl	8007df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007be0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c58 <pvPortMalloc+0x18c>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	4a1b      	ldr	r2, [pc, #108]	@ (8007c58 <pvPortMalloc+0x18c>)
 8007bec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bee:	4b1a      	ldr	r3, [pc, #104]	@ (8007c58 <pvPortMalloc+0x18c>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c60 <pvPortMalloc+0x194>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d203      	bcs.n	8007c02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bfa:	4b17      	ldr	r3, [pc, #92]	@ (8007c58 <pvPortMalloc+0x18c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a18      	ldr	r2, [pc, #96]	@ (8007c60 <pvPortMalloc+0x194>)
 8007c00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	4b13      	ldr	r3, [pc, #76]	@ (8007c54 <pvPortMalloc+0x188>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c16:	4b13      	ldr	r3, [pc, #76]	@ (8007c64 <pvPortMalloc+0x198>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	4a11      	ldr	r2, [pc, #68]	@ (8007c64 <pvPortMalloc+0x198>)
 8007c1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c20:	f7fe fcdc 	bl	80065dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <pvPortMalloc+0x17a>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60fb      	str	r3, [r7, #12]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <pvPortMalloc+0x176>
	return pvReturn;
 8007c46:	69fb      	ldr	r3, [r7, #28]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3728      	adds	r7, #40	@ 0x28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200060a0 	.word	0x200060a0
 8007c54:	200060b4 	.word	0x200060b4
 8007c58:	200060a4 	.word	0x200060a4
 8007c5c:	20006098 	.word	0x20006098
 8007c60:	200060a8 	.word	0x200060a8
 8007c64:	200060ac 	.word	0x200060ac

08007c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d04f      	beq.n	8007d1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	425b      	negs	r3, r3
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4413      	add	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4b25      	ldr	r3, [pc, #148]	@ (8007d24 <vPortFree+0xbc>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <vPortFree+0x46>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00b      	beq.n	8007cce <vPortFree+0x66>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60bb      	str	r3, [r7, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	4b14      	ldr	r3, [pc, #80]	@ (8007d24 <vPortFree+0xbc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01e      	beq.n	8007d1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d11a      	bne.n	8007d1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d24 <vPortFree+0xbc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	43db      	mvns	r3, r3
 8007cee:	401a      	ands	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cf4:	f7fe fc64 	bl	80065c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007d28 <vPortFree+0xc0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4413      	add	r3, r2
 8007d02:	4a09      	ldr	r2, [pc, #36]	@ (8007d28 <vPortFree+0xc0>)
 8007d04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d06:	6938      	ldr	r0, [r7, #16]
 8007d08:	f000 f874 	bl	8007df4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d0c:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <vPortFree+0xc4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	4a06      	ldr	r2, [pc, #24]	@ (8007d2c <vPortFree+0xc4>)
 8007d14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d16:	f7fe fc61 	bl	80065dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200060b4 	.word	0x200060b4
 8007d28:	200060a4 	.word	0x200060a4
 8007d2c:	200060b0 	.word	0x200060b0

08007d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d36:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d3c:	4b27      	ldr	r3, [pc, #156]	@ (8007ddc <prvHeapInit+0xac>)
 8007d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3307      	adds	r3, #7
 8007d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0307 	bic.w	r3, r3, #7
 8007d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ddc <prvHeapInit+0xac>)
 8007d60:	4413      	add	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d68:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <prvHeapInit+0xb0>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007de0 <prvHeapInit+0xb0>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a15      	ldr	r2, [pc, #84]	@ (8007de4 <prvHeapInit+0xb4>)
 8007d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d92:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <prvHeapInit+0xb4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2200      	movs	r2, #0
 8007d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d9a:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <prvHeapInit+0xb4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007db0:	4b0c      	ldr	r3, [pc, #48]	@ (8007de4 <prvHeapInit+0xb4>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007de8 <prvHeapInit+0xb8>)
 8007dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4a09      	ldr	r2, [pc, #36]	@ (8007dec <prvHeapInit+0xbc>)
 8007dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dc8:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <prvHeapInit+0xc0>)
 8007dca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007dce:	601a      	str	r2, [r3, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	20001278 	.word	0x20001278
 8007de0:	20006098 	.word	0x20006098
 8007de4:	200060a0 	.word	0x200060a0
 8007de8:	200060a8 	.word	0x200060a8
 8007dec:	200060a4 	.word	0x200060a4
 8007df0:	200060b4 	.word	0x200060b4

08007df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dfc:	4b28      	ldr	r3, [pc, #160]	@ (8007ea0 <prvInsertBlockIntoFreeList+0xac>)
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e002      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x14>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d8f7      	bhi.n	8007e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d108      	bne.n	8007e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	441a      	add	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	441a      	add	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d118      	bne.n	8007e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d00d      	beq.n	8007e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	441a      	add	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	e008      	b.n	8007e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e003      	b.n	8007e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d002      	beq.n	8007e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20006098 	.word	0x20006098
 8007ea4:	200060a0 	.word	0x200060a0

08007ea8 <std>:
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	b510      	push	{r4, lr}
 8007eac:	4604      	mov	r4, r0
 8007eae:	e9c0 3300 	strd	r3, r3, [r0]
 8007eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eb6:	6083      	str	r3, [r0, #8]
 8007eb8:	8181      	strh	r1, [r0, #12]
 8007eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ebc:	81c2      	strh	r2, [r0, #14]
 8007ebe:	6183      	str	r3, [r0, #24]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	305c      	adds	r0, #92	@ 0x5c
 8007ec6:	f000 fa1d 	bl	8008304 <memset>
 8007eca:	4b0d      	ldr	r3, [pc, #52]	@ (8007f00 <std+0x58>)
 8007ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ece:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <std+0x5c>)
 8007ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f08 <std+0x60>)
 8007ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f0c <std+0x64>)
 8007ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007eda:	4b0d      	ldr	r3, [pc, #52]	@ (8007f10 <std+0x68>)
 8007edc:	6224      	str	r4, [r4, #32]
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	d006      	beq.n	8007ef0 <std+0x48>
 8007ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ee6:	4294      	cmp	r4, r2
 8007ee8:	d002      	beq.n	8007ef0 <std+0x48>
 8007eea:	33d0      	adds	r3, #208	@ 0xd0
 8007eec:	429c      	cmp	r4, r3
 8007eee:	d105      	bne.n	8007efc <std+0x54>
 8007ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef8:	f000 bada 	b.w	80084b0 <__retarget_lock_init_recursive>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	bf00      	nop
 8007f00:	08008155 	.word	0x08008155
 8007f04:	08008177 	.word	0x08008177
 8007f08:	080081af 	.word	0x080081af
 8007f0c:	080081d3 	.word	0x080081d3
 8007f10:	200060b8 	.word	0x200060b8

08007f14 <stdio_exit_handler>:
 8007f14:	4a02      	ldr	r2, [pc, #8]	@ (8007f20 <stdio_exit_handler+0xc>)
 8007f16:	4903      	ldr	r1, [pc, #12]	@ (8007f24 <stdio_exit_handler+0x10>)
 8007f18:	4803      	ldr	r0, [pc, #12]	@ (8007f28 <stdio_exit_handler+0x14>)
 8007f1a:	f000 b869 	b.w	8007ff0 <_fwalk_sglue>
 8007f1e:	bf00      	nop
 8007f20:	20000010 	.word	0x20000010
 8007f24:	08008d95 	.word	0x08008d95
 8007f28:	20000020 	.word	0x20000020

08007f2c <cleanup_stdio>:
 8007f2c:	6841      	ldr	r1, [r0, #4]
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f60 <cleanup_stdio+0x34>)
 8007f30:	4299      	cmp	r1, r3
 8007f32:	b510      	push	{r4, lr}
 8007f34:	4604      	mov	r4, r0
 8007f36:	d001      	beq.n	8007f3c <cleanup_stdio+0x10>
 8007f38:	f000 ff2c 	bl	8008d94 <_fflush_r>
 8007f3c:	68a1      	ldr	r1, [r4, #8]
 8007f3e:	4b09      	ldr	r3, [pc, #36]	@ (8007f64 <cleanup_stdio+0x38>)
 8007f40:	4299      	cmp	r1, r3
 8007f42:	d002      	beq.n	8007f4a <cleanup_stdio+0x1e>
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 ff25 	bl	8008d94 <_fflush_r>
 8007f4a:	68e1      	ldr	r1, [r4, #12]
 8007f4c:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <cleanup_stdio+0x3c>)
 8007f4e:	4299      	cmp	r1, r3
 8007f50:	d004      	beq.n	8007f5c <cleanup_stdio+0x30>
 8007f52:	4620      	mov	r0, r4
 8007f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f58:	f000 bf1c 	b.w	8008d94 <_fflush_r>
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	bf00      	nop
 8007f60:	200060b8 	.word	0x200060b8
 8007f64:	20006120 	.word	0x20006120
 8007f68:	20006188 	.word	0x20006188

08007f6c <global_stdio_init.part.0>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f9c <global_stdio_init.part.0+0x30>)
 8007f70:	4c0b      	ldr	r4, [pc, #44]	@ (8007fa0 <global_stdio_init.part.0+0x34>)
 8007f72:	4a0c      	ldr	r2, [pc, #48]	@ (8007fa4 <global_stdio_init.part.0+0x38>)
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	4620      	mov	r0, r4
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	f7ff ff94 	bl	8007ea8 <std>
 8007f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f84:	2201      	movs	r2, #1
 8007f86:	2109      	movs	r1, #9
 8007f88:	f7ff ff8e 	bl	8007ea8 <std>
 8007f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f90:	2202      	movs	r2, #2
 8007f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f96:	2112      	movs	r1, #18
 8007f98:	f7ff bf86 	b.w	8007ea8 <std>
 8007f9c:	200061f0 	.word	0x200061f0
 8007fa0:	200060b8 	.word	0x200060b8
 8007fa4:	08007f15 	.word	0x08007f15

08007fa8 <__sfp_lock_acquire>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	@ (8007fb0 <__sfp_lock_acquire+0x8>)
 8007faa:	f000 ba82 	b.w	80084b2 <__retarget_lock_acquire_recursive>
 8007fae:	bf00      	nop
 8007fb0:	200061f9 	.word	0x200061f9

08007fb4 <__sfp_lock_release>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	@ (8007fbc <__sfp_lock_release+0x8>)
 8007fb6:	f000 ba7d 	b.w	80084b4 <__retarget_lock_release_recursive>
 8007fba:	bf00      	nop
 8007fbc:	200061f9 	.word	0x200061f9

08007fc0 <__sinit>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	f7ff fff0 	bl	8007fa8 <__sfp_lock_acquire>
 8007fc8:	6a23      	ldr	r3, [r4, #32]
 8007fca:	b11b      	cbz	r3, 8007fd4 <__sinit+0x14>
 8007fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd0:	f7ff bff0 	b.w	8007fb4 <__sfp_lock_release>
 8007fd4:	4b04      	ldr	r3, [pc, #16]	@ (8007fe8 <__sinit+0x28>)
 8007fd6:	6223      	str	r3, [r4, #32]
 8007fd8:	4b04      	ldr	r3, [pc, #16]	@ (8007fec <__sinit+0x2c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1f5      	bne.n	8007fcc <__sinit+0xc>
 8007fe0:	f7ff ffc4 	bl	8007f6c <global_stdio_init.part.0>
 8007fe4:	e7f2      	b.n	8007fcc <__sinit+0xc>
 8007fe6:	bf00      	nop
 8007fe8:	08007f2d 	.word	0x08007f2d
 8007fec:	200061f0 	.word	0x200061f0

08007ff0 <_fwalk_sglue>:
 8007ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	4688      	mov	r8, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008000:	f1b9 0901 	subs.w	r9, r9, #1
 8008004:	d505      	bpl.n	8008012 <_fwalk_sglue+0x22>
 8008006:	6824      	ldr	r4, [r4, #0]
 8008008:	2c00      	cmp	r4, #0
 800800a:	d1f7      	bne.n	8007ffc <_fwalk_sglue+0xc>
 800800c:	4630      	mov	r0, r6
 800800e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d907      	bls.n	8008028 <_fwalk_sglue+0x38>
 8008018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800801c:	3301      	adds	r3, #1
 800801e:	d003      	beq.n	8008028 <_fwalk_sglue+0x38>
 8008020:	4629      	mov	r1, r5
 8008022:	4638      	mov	r0, r7
 8008024:	47c0      	blx	r8
 8008026:	4306      	orrs	r6, r0
 8008028:	3568      	adds	r5, #104	@ 0x68
 800802a:	e7e9      	b.n	8008000 <_fwalk_sglue+0x10>

0800802c <_puts_r>:
 800802c:	6a03      	ldr	r3, [r0, #32]
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	6884      	ldr	r4, [r0, #8]
 8008032:	4605      	mov	r5, r0
 8008034:	460e      	mov	r6, r1
 8008036:	b90b      	cbnz	r3, 800803c <_puts_r+0x10>
 8008038:	f7ff ffc2 	bl	8007fc0 <__sinit>
 800803c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800803e:	07db      	lsls	r3, r3, #31
 8008040:	d405      	bmi.n	800804e <_puts_r+0x22>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	0598      	lsls	r0, r3, #22
 8008046:	d402      	bmi.n	800804e <_puts_r+0x22>
 8008048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800804a:	f000 fa32 	bl	80084b2 <__retarget_lock_acquire_recursive>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	0719      	lsls	r1, r3, #28
 8008052:	d502      	bpl.n	800805a <_puts_r+0x2e>
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d135      	bne.n	80080c6 <_puts_r+0x9a>
 800805a:	4621      	mov	r1, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f000 f8fb 	bl	8008258 <__swsetup_r>
 8008062:	b380      	cbz	r0, 80080c6 <_puts_r+0x9a>
 8008064:	f04f 35ff 	mov.w	r5, #4294967295
 8008068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800806a:	07da      	lsls	r2, r3, #31
 800806c:	d405      	bmi.n	800807a <_puts_r+0x4e>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	059b      	lsls	r3, r3, #22
 8008072:	d402      	bmi.n	800807a <_puts_r+0x4e>
 8008074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008076:	f000 fa1d 	bl	80084b4 <__retarget_lock_release_recursive>
 800807a:	4628      	mov	r0, r5
 800807c:	bd70      	pop	{r4, r5, r6, pc}
 800807e:	2b00      	cmp	r3, #0
 8008080:	da04      	bge.n	800808c <_puts_r+0x60>
 8008082:	69a2      	ldr	r2, [r4, #24]
 8008084:	429a      	cmp	r2, r3
 8008086:	dc17      	bgt.n	80080b8 <_puts_r+0x8c>
 8008088:	290a      	cmp	r1, #10
 800808a:	d015      	beq.n	80080b8 <_puts_r+0x8c>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	7019      	strb	r1, [r3, #0]
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800809a:	3b01      	subs	r3, #1
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	2900      	cmp	r1, #0
 80080a0:	d1ed      	bne.n	800807e <_puts_r+0x52>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da11      	bge.n	80080ca <_puts_r+0x9e>
 80080a6:	4622      	mov	r2, r4
 80080a8:	210a      	movs	r1, #10
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 f895 	bl	80081da <__swbuf_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0d7      	beq.n	8008064 <_puts_r+0x38>
 80080b4:	250a      	movs	r5, #10
 80080b6:	e7d7      	b.n	8008068 <_puts_r+0x3c>
 80080b8:	4622      	mov	r2, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f88d 	bl	80081da <__swbuf_r>
 80080c0:	3001      	adds	r0, #1
 80080c2:	d1e7      	bne.n	8008094 <_puts_r+0x68>
 80080c4:	e7ce      	b.n	8008064 <_puts_r+0x38>
 80080c6:	3e01      	subs	r6, #1
 80080c8:	e7e4      	b.n	8008094 <_puts_r+0x68>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	6022      	str	r2, [r4, #0]
 80080d0:	220a      	movs	r2, #10
 80080d2:	701a      	strb	r2, [r3, #0]
 80080d4:	e7ee      	b.n	80080b4 <_puts_r+0x88>
	...

080080d8 <puts>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	@ (80080e4 <puts+0xc>)
 80080da:	4601      	mov	r1, r0
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f7ff bfa5 	b.w	800802c <_puts_r>
 80080e2:	bf00      	nop
 80080e4:	2000001c 	.word	0x2000001c

080080e8 <sniprintf>:
 80080e8:	b40c      	push	{r2, r3}
 80080ea:	b530      	push	{r4, r5, lr}
 80080ec:	4b18      	ldr	r3, [pc, #96]	@ (8008150 <sniprintf+0x68>)
 80080ee:	1e0c      	subs	r4, r1, #0
 80080f0:	681d      	ldr	r5, [r3, #0]
 80080f2:	b09d      	sub	sp, #116	@ 0x74
 80080f4:	da08      	bge.n	8008108 <sniprintf+0x20>
 80080f6:	238b      	movs	r3, #139	@ 0x8b
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	b01d      	add	sp, #116	@ 0x74
 8008100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008104:	b002      	add	sp, #8
 8008106:	4770      	bx	lr
 8008108:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800810c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008116:	bf14      	ite	ne
 8008118:	f104 33ff 	addne.w	r3, r4, #4294967295
 800811c:	4623      	moveq	r3, r4
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008126:	9002      	str	r0, [sp, #8]
 8008128:	9006      	str	r0, [sp, #24]
 800812a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800812e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008130:	ab21      	add	r3, sp, #132	@ 0x84
 8008132:	a902      	add	r1, sp, #8
 8008134:	4628      	mov	r0, r5
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	f000 fb20 	bl	800877c <_svfiprintf_r>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	bfbc      	itt	lt
 8008140:	238b      	movlt	r3, #139	@ 0x8b
 8008142:	602b      	strlt	r3, [r5, #0]
 8008144:	2c00      	cmp	r4, #0
 8008146:	d0da      	beq.n	80080fe <sniprintf+0x16>
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e7d6      	b.n	80080fe <sniprintf+0x16>
 8008150:	2000001c 	.word	0x2000001c

08008154 <__sread>:
 8008154:	b510      	push	{r4, lr}
 8008156:	460c      	mov	r4, r1
 8008158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815c:	f000 f95a 	bl	8008414 <_read_r>
 8008160:	2800      	cmp	r0, #0
 8008162:	bfab      	itete	ge
 8008164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008166:	89a3      	ldrhlt	r3, [r4, #12]
 8008168:	181b      	addge	r3, r3, r0
 800816a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800816e:	bfac      	ite	ge
 8008170:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008172:	81a3      	strhlt	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__swrite>:
 8008176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800817a:	461f      	mov	r7, r3
 800817c:	898b      	ldrh	r3, [r1, #12]
 800817e:	05db      	lsls	r3, r3, #23
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4616      	mov	r6, r2
 8008186:	d505      	bpl.n	8008194 <__swrite+0x1e>
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	2302      	movs	r3, #2
 800818e:	2200      	movs	r2, #0
 8008190:	f000 f92e 	bl	80083f0 <_lseek_r>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800819a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	4628      	mov	r0, r5
 80081a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081aa:	f000 b945 	b.w	8008438 <_write_r>

080081ae <__sseek>:
 80081ae:	b510      	push	{r4, lr}
 80081b0:	460c      	mov	r4, r1
 80081b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b6:	f000 f91b 	bl	80083f0 <_lseek_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	bf15      	itete	ne
 80081c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081ca:	81a3      	strheq	r3, [r4, #12]
 80081cc:	bf18      	it	ne
 80081ce:	81a3      	strhne	r3, [r4, #12]
 80081d0:	bd10      	pop	{r4, pc}

080081d2 <__sclose>:
 80081d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d6:	f000 b89d 	b.w	8008314 <_close_r>

080081da <__swbuf_r>:
 80081da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081dc:	460e      	mov	r6, r1
 80081de:	4614      	mov	r4, r2
 80081e0:	4605      	mov	r5, r0
 80081e2:	b118      	cbz	r0, 80081ec <__swbuf_r+0x12>
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	b90b      	cbnz	r3, 80081ec <__swbuf_r+0x12>
 80081e8:	f7ff feea 	bl	8007fc0 <__sinit>
 80081ec:	69a3      	ldr	r3, [r4, #24]
 80081ee:	60a3      	str	r3, [r4, #8]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	071a      	lsls	r2, r3, #28
 80081f4:	d501      	bpl.n	80081fa <__swbuf_r+0x20>
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	b943      	cbnz	r3, 800820c <__swbuf_r+0x32>
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f82b 	bl	8008258 <__swsetup_r>
 8008202:	b118      	cbz	r0, 800820c <__swbuf_r+0x32>
 8008204:	f04f 37ff 	mov.w	r7, #4294967295
 8008208:	4638      	mov	r0, r7
 800820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6922      	ldr	r2, [r4, #16]
 8008210:	1a98      	subs	r0, r3, r2
 8008212:	6963      	ldr	r3, [r4, #20]
 8008214:	b2f6      	uxtb	r6, r6
 8008216:	4283      	cmp	r3, r0
 8008218:	4637      	mov	r7, r6
 800821a:	dc05      	bgt.n	8008228 <__swbuf_r+0x4e>
 800821c:	4621      	mov	r1, r4
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fdb8 	bl	8008d94 <_fflush_r>
 8008224:	2800      	cmp	r0, #0
 8008226:	d1ed      	bne.n	8008204 <__swbuf_r+0x2a>
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	3b01      	subs	r3, #1
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	701e      	strb	r6, [r3, #0]
 8008236:	6962      	ldr	r2, [r4, #20]
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	429a      	cmp	r2, r3
 800823c:	d004      	beq.n	8008248 <__swbuf_r+0x6e>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	07db      	lsls	r3, r3, #31
 8008242:	d5e1      	bpl.n	8008208 <__swbuf_r+0x2e>
 8008244:	2e0a      	cmp	r6, #10
 8008246:	d1df      	bne.n	8008208 <__swbuf_r+0x2e>
 8008248:	4621      	mov	r1, r4
 800824a:	4628      	mov	r0, r5
 800824c:	f000 fda2 	bl	8008d94 <_fflush_r>
 8008250:	2800      	cmp	r0, #0
 8008252:	d0d9      	beq.n	8008208 <__swbuf_r+0x2e>
 8008254:	e7d6      	b.n	8008204 <__swbuf_r+0x2a>
	...

08008258 <__swsetup_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4b29      	ldr	r3, [pc, #164]	@ (8008300 <__swsetup_r+0xa8>)
 800825c:	4605      	mov	r5, r0
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	460c      	mov	r4, r1
 8008262:	b118      	cbz	r0, 800826c <__swsetup_r+0x14>
 8008264:	6a03      	ldr	r3, [r0, #32]
 8008266:	b90b      	cbnz	r3, 800826c <__swsetup_r+0x14>
 8008268:	f7ff feaa 	bl	8007fc0 <__sinit>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	d422      	bmi.n	80082ba <__swsetup_r+0x62>
 8008274:	06da      	lsls	r2, r3, #27
 8008276:	d407      	bmi.n	8008288 <__swsetup_r+0x30>
 8008278:	2209      	movs	r2, #9
 800827a:	602a      	str	r2, [r5, #0]
 800827c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	e033      	b.n	80082f0 <__swsetup_r+0x98>
 8008288:	0758      	lsls	r0, r3, #29
 800828a:	d512      	bpl.n	80082b2 <__swsetup_r+0x5a>
 800828c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800828e:	b141      	cbz	r1, 80082a2 <__swsetup_r+0x4a>
 8008290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008294:	4299      	cmp	r1, r3
 8008296:	d002      	beq.n	800829e <__swsetup_r+0x46>
 8008298:	4628      	mov	r0, r5
 800829a:	f000 f91b 	bl	80084d4 <_free_r>
 800829e:	2300      	movs	r3, #0
 80082a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	2300      	movs	r3, #0
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f043 0308 	orr.w	r3, r3, #8
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	b94b      	cbnz	r3, 80082d2 <__swsetup_r+0x7a>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c8:	d003      	beq.n	80082d2 <__swsetup_r+0x7a>
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 fdaf 	bl	8008e30 <__smakebuf_r>
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	f013 0201 	ands.w	r2, r3, #1
 80082da:	d00a      	beq.n	80082f2 <__swsetup_r+0x9a>
 80082dc:	2200      	movs	r2, #0
 80082de:	60a2      	str	r2, [r4, #8]
 80082e0:	6962      	ldr	r2, [r4, #20]
 80082e2:	4252      	negs	r2, r2
 80082e4:	61a2      	str	r2, [r4, #24]
 80082e6:	6922      	ldr	r2, [r4, #16]
 80082e8:	b942      	cbnz	r2, 80082fc <__swsetup_r+0xa4>
 80082ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082ee:	d1c5      	bne.n	800827c <__swsetup_r+0x24>
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	0799      	lsls	r1, r3, #30
 80082f4:	bf58      	it	pl
 80082f6:	6962      	ldrpl	r2, [r4, #20]
 80082f8:	60a2      	str	r2, [r4, #8]
 80082fa:	e7f4      	b.n	80082e6 <__swsetup_r+0x8e>
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7f7      	b.n	80082f0 <__swsetup_r+0x98>
 8008300:	2000001c 	.word	0x2000001c

08008304 <memset>:
 8008304:	4402      	add	r2, r0
 8008306:	4603      	mov	r3, r0
 8008308:	4293      	cmp	r3, r2
 800830a:	d100      	bne.n	800830e <memset+0xa>
 800830c:	4770      	bx	lr
 800830e:	f803 1b01 	strb.w	r1, [r3], #1
 8008312:	e7f9      	b.n	8008308 <memset+0x4>

08008314 <_close_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	@ (8008330 <_close_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7f8 ff35 	bl	800118e <_close>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_close_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_close_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	200061f4 	.word	0x200061f4

08008334 <_reclaim_reent>:
 8008334:	4b2d      	ldr	r3, [pc, #180]	@ (80083ec <_reclaim_reent+0xb8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4283      	cmp	r3, r0
 800833a:	b570      	push	{r4, r5, r6, lr}
 800833c:	4604      	mov	r4, r0
 800833e:	d053      	beq.n	80083e8 <_reclaim_reent+0xb4>
 8008340:	69c3      	ldr	r3, [r0, #28]
 8008342:	b31b      	cbz	r3, 800838c <_reclaim_reent+0x58>
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	b163      	cbz	r3, 8008362 <_reclaim_reent+0x2e>
 8008348:	2500      	movs	r5, #0
 800834a:	69e3      	ldr	r3, [r4, #28]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	5959      	ldr	r1, [r3, r5]
 8008350:	b9b1      	cbnz	r1, 8008380 <_reclaim_reent+0x4c>
 8008352:	3504      	adds	r5, #4
 8008354:	2d80      	cmp	r5, #128	@ 0x80
 8008356:	d1f8      	bne.n	800834a <_reclaim_reent+0x16>
 8008358:	69e3      	ldr	r3, [r4, #28]
 800835a:	4620      	mov	r0, r4
 800835c:	68d9      	ldr	r1, [r3, #12]
 800835e:	f000 f8b9 	bl	80084d4 <_free_r>
 8008362:	69e3      	ldr	r3, [r4, #28]
 8008364:	6819      	ldr	r1, [r3, #0]
 8008366:	b111      	cbz	r1, 800836e <_reclaim_reent+0x3a>
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f8b3 	bl	80084d4 <_free_r>
 800836e:	69e3      	ldr	r3, [r4, #28]
 8008370:	689d      	ldr	r5, [r3, #8]
 8008372:	b15d      	cbz	r5, 800838c <_reclaim_reent+0x58>
 8008374:	4629      	mov	r1, r5
 8008376:	4620      	mov	r0, r4
 8008378:	682d      	ldr	r5, [r5, #0]
 800837a:	f000 f8ab 	bl	80084d4 <_free_r>
 800837e:	e7f8      	b.n	8008372 <_reclaim_reent+0x3e>
 8008380:	680e      	ldr	r6, [r1, #0]
 8008382:	4620      	mov	r0, r4
 8008384:	f000 f8a6 	bl	80084d4 <_free_r>
 8008388:	4631      	mov	r1, r6
 800838a:	e7e1      	b.n	8008350 <_reclaim_reent+0x1c>
 800838c:	6961      	ldr	r1, [r4, #20]
 800838e:	b111      	cbz	r1, 8008396 <_reclaim_reent+0x62>
 8008390:	4620      	mov	r0, r4
 8008392:	f000 f89f 	bl	80084d4 <_free_r>
 8008396:	69e1      	ldr	r1, [r4, #28]
 8008398:	b111      	cbz	r1, 80083a0 <_reclaim_reent+0x6c>
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f89a 	bl	80084d4 <_free_r>
 80083a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083a2:	b111      	cbz	r1, 80083aa <_reclaim_reent+0x76>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 f895 	bl	80084d4 <_free_r>
 80083aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ac:	b111      	cbz	r1, 80083b4 <_reclaim_reent+0x80>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f890 	bl	80084d4 <_free_r>
 80083b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083b6:	b111      	cbz	r1, 80083be <_reclaim_reent+0x8a>
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 f88b 	bl	80084d4 <_free_r>
 80083be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083c0:	b111      	cbz	r1, 80083c8 <_reclaim_reent+0x94>
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f886 	bl	80084d4 <_free_r>
 80083c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083ca:	b111      	cbz	r1, 80083d2 <_reclaim_reent+0x9e>
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 f881 	bl	80084d4 <_free_r>
 80083d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083d4:	b111      	cbz	r1, 80083dc <_reclaim_reent+0xa8>
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f87c 	bl	80084d4 <_free_r>
 80083dc:	6a23      	ldr	r3, [r4, #32]
 80083de:	b11b      	cbz	r3, 80083e8 <_reclaim_reent+0xb4>
 80083e0:	4620      	mov	r0, r4
 80083e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083e6:	4718      	bx	r3
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	bf00      	nop
 80083ec:	2000001c 	.word	0x2000001c

080083f0 <_lseek_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_lseek_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f8 feec 	bl	80011dc <_lseek>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_lseek_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_lseek_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200061f4 	.word	0x200061f4

08008414 <_read_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	@ (8008434 <_read_r+0x20>)
 8008418:	4604      	mov	r4, r0
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	2200      	movs	r2, #0
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f7f8 fe96 	bl	8001154 <_read>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_read_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_read_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	200061f4 	.word	0x200061f4

08008438 <_write_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	@ (8008458 <_write_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7f8 fb90 	bl	8000b6c <_write>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_write_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_write_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	200061f4 	.word	0x200061f4

0800845c <__errno>:
 800845c:	4b01      	ldr	r3, [pc, #4]	@ (8008464 <__errno+0x8>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	2000001c 	.word	0x2000001c

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	@ (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	@ (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	@ (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	@ (80084ac <__libc_init_array+0x44>)
 800847c:	f000 fd96 	bl	8008fac <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	0800911c 	.word	0x0800911c
 80084a4:	0800911c 	.word	0x0800911c
 80084a8:	0800911c 	.word	0x0800911c
 80084ac:	08009120 	.word	0x08009120

080084b0 <__retarget_lock_init_recursive>:
 80084b0:	4770      	bx	lr

080084b2 <__retarget_lock_acquire_recursive>:
 80084b2:	4770      	bx	lr

080084b4 <__retarget_lock_release_recursive>:
 80084b4:	4770      	bx	lr

080084b6 <memcpy>:
 80084b6:	440a      	add	r2, r1
 80084b8:	4291      	cmp	r1, r2
 80084ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80084be:	d100      	bne.n	80084c2 <memcpy+0xc>
 80084c0:	4770      	bx	lr
 80084c2:	b510      	push	{r4, lr}
 80084c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084cc:	4291      	cmp	r1, r2
 80084ce:	d1f9      	bne.n	80084c4 <memcpy+0xe>
 80084d0:	bd10      	pop	{r4, pc}
	...

080084d4 <_free_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4605      	mov	r5, r0
 80084d8:	2900      	cmp	r1, #0
 80084da:	d041      	beq.n	8008560 <_free_r+0x8c>
 80084dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e0:	1f0c      	subs	r4, r1, #4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bfb8      	it	lt
 80084e6:	18e4      	addlt	r4, r4, r3
 80084e8:	f000 f8e0 	bl	80086ac <__malloc_lock>
 80084ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008564 <_free_r+0x90>)
 80084ee:	6813      	ldr	r3, [r2, #0]
 80084f0:	b933      	cbnz	r3, 8008500 <_free_r+0x2c>
 80084f2:	6063      	str	r3, [r4, #4]
 80084f4:	6014      	str	r4, [r2, #0]
 80084f6:	4628      	mov	r0, r5
 80084f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084fc:	f000 b8dc 	b.w	80086b8 <__malloc_unlock>
 8008500:	42a3      	cmp	r3, r4
 8008502:	d908      	bls.n	8008516 <_free_r+0x42>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	1821      	adds	r1, r4, r0
 8008508:	428b      	cmp	r3, r1
 800850a:	bf01      	itttt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	1809      	addeq	r1, r1, r0
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	e7ed      	b.n	80084f2 <_free_r+0x1e>
 8008516:	461a      	mov	r2, r3
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	b10b      	cbz	r3, 8008520 <_free_r+0x4c>
 800851c:	42a3      	cmp	r3, r4
 800851e:	d9fa      	bls.n	8008516 <_free_r+0x42>
 8008520:	6811      	ldr	r1, [r2, #0]
 8008522:	1850      	adds	r0, r2, r1
 8008524:	42a0      	cmp	r0, r4
 8008526:	d10b      	bne.n	8008540 <_free_r+0x6c>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	4401      	add	r1, r0
 800852c:	1850      	adds	r0, r2, r1
 800852e:	4283      	cmp	r3, r0
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	d1e0      	bne.n	80084f6 <_free_r+0x22>
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	6053      	str	r3, [r2, #4]
 800853a:	4408      	add	r0, r1
 800853c:	6010      	str	r0, [r2, #0]
 800853e:	e7da      	b.n	80084f6 <_free_r+0x22>
 8008540:	d902      	bls.n	8008548 <_free_r+0x74>
 8008542:	230c      	movs	r3, #12
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	e7d6      	b.n	80084f6 <_free_r+0x22>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	1821      	adds	r1, r4, r0
 800854c:	428b      	cmp	r3, r1
 800854e:	bf04      	itt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	bf04      	itt	eq
 8008558:	1809      	addeq	r1, r1, r0
 800855a:	6021      	streq	r1, [r4, #0]
 800855c:	6054      	str	r4, [r2, #4]
 800855e:	e7ca      	b.n	80084f6 <_free_r+0x22>
 8008560:	bd38      	pop	{r3, r4, r5, pc}
 8008562:	bf00      	nop
 8008564:	20006200 	.word	0x20006200

08008568 <sbrk_aligned>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	4e0f      	ldr	r6, [pc, #60]	@ (80085a8 <sbrk_aligned+0x40>)
 800856c:	460c      	mov	r4, r1
 800856e:	6831      	ldr	r1, [r6, #0]
 8008570:	4605      	mov	r5, r0
 8008572:	b911      	cbnz	r1, 800857a <sbrk_aligned+0x12>
 8008574:	f000 fcd4 	bl	8008f20 <_sbrk_r>
 8008578:	6030      	str	r0, [r6, #0]
 800857a:	4621      	mov	r1, r4
 800857c:	4628      	mov	r0, r5
 800857e:	f000 fccf 	bl	8008f20 <_sbrk_r>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	d103      	bne.n	800858e <sbrk_aligned+0x26>
 8008586:	f04f 34ff 	mov.w	r4, #4294967295
 800858a:	4620      	mov	r0, r4
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	1cc4      	adds	r4, r0, #3
 8008590:	f024 0403 	bic.w	r4, r4, #3
 8008594:	42a0      	cmp	r0, r4
 8008596:	d0f8      	beq.n	800858a <sbrk_aligned+0x22>
 8008598:	1a21      	subs	r1, r4, r0
 800859a:	4628      	mov	r0, r5
 800859c:	f000 fcc0 	bl	8008f20 <_sbrk_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d1f2      	bne.n	800858a <sbrk_aligned+0x22>
 80085a4:	e7ef      	b.n	8008586 <sbrk_aligned+0x1e>
 80085a6:	bf00      	nop
 80085a8:	200061fc 	.word	0x200061fc

080085ac <_malloc_r>:
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	1ccd      	adds	r5, r1, #3
 80085b2:	f025 0503 	bic.w	r5, r5, #3
 80085b6:	3508      	adds	r5, #8
 80085b8:	2d0c      	cmp	r5, #12
 80085ba:	bf38      	it	cc
 80085bc:	250c      	movcc	r5, #12
 80085be:	2d00      	cmp	r5, #0
 80085c0:	4606      	mov	r6, r0
 80085c2:	db01      	blt.n	80085c8 <_malloc_r+0x1c>
 80085c4:	42a9      	cmp	r1, r5
 80085c6:	d904      	bls.n	80085d2 <_malloc_r+0x26>
 80085c8:	230c      	movs	r3, #12
 80085ca:	6033      	str	r3, [r6, #0]
 80085cc:	2000      	movs	r0, #0
 80085ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086a8 <_malloc_r+0xfc>
 80085d6:	f000 f869 	bl	80086ac <__malloc_lock>
 80085da:	f8d8 3000 	ldr.w	r3, [r8]
 80085de:	461c      	mov	r4, r3
 80085e0:	bb44      	cbnz	r4, 8008634 <_malloc_r+0x88>
 80085e2:	4629      	mov	r1, r5
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7ff ffbf 	bl	8008568 <sbrk_aligned>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	4604      	mov	r4, r0
 80085ee:	d158      	bne.n	80086a2 <_malloc_r+0xf6>
 80085f0:	f8d8 4000 	ldr.w	r4, [r8]
 80085f4:	4627      	mov	r7, r4
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	d143      	bne.n	8008682 <_malloc_r+0xd6>
 80085fa:	2c00      	cmp	r4, #0
 80085fc:	d04b      	beq.n	8008696 <_malloc_r+0xea>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	4639      	mov	r1, r7
 8008602:	4630      	mov	r0, r6
 8008604:	eb04 0903 	add.w	r9, r4, r3
 8008608:	f000 fc8a 	bl	8008f20 <_sbrk_r>
 800860c:	4581      	cmp	r9, r0
 800860e:	d142      	bne.n	8008696 <_malloc_r+0xea>
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	1a6d      	subs	r5, r5, r1
 8008614:	4629      	mov	r1, r5
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff ffa6 	bl	8008568 <sbrk_aligned>
 800861c:	3001      	adds	r0, #1
 800861e:	d03a      	beq.n	8008696 <_malloc_r+0xea>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	442b      	add	r3, r5
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	f8d8 3000 	ldr.w	r3, [r8]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	bb62      	cbnz	r2, 8008688 <_malloc_r+0xdc>
 800862e:	f8c8 7000 	str.w	r7, [r8]
 8008632:	e00f      	b.n	8008654 <_malloc_r+0xa8>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	1b52      	subs	r2, r2, r5
 8008638:	d420      	bmi.n	800867c <_malloc_r+0xd0>
 800863a:	2a0b      	cmp	r2, #11
 800863c:	d917      	bls.n	800866e <_malloc_r+0xc2>
 800863e:	1961      	adds	r1, r4, r5
 8008640:	42a3      	cmp	r3, r4
 8008642:	6025      	str	r5, [r4, #0]
 8008644:	bf18      	it	ne
 8008646:	6059      	strne	r1, [r3, #4]
 8008648:	6863      	ldr	r3, [r4, #4]
 800864a:	bf08      	it	eq
 800864c:	f8c8 1000 	streq.w	r1, [r8]
 8008650:	5162      	str	r2, [r4, r5]
 8008652:	604b      	str	r3, [r1, #4]
 8008654:	4630      	mov	r0, r6
 8008656:	f000 f82f 	bl	80086b8 <__malloc_unlock>
 800865a:	f104 000b 	add.w	r0, r4, #11
 800865e:	1d23      	adds	r3, r4, #4
 8008660:	f020 0007 	bic.w	r0, r0, #7
 8008664:	1ac2      	subs	r2, r0, r3
 8008666:	bf1c      	itt	ne
 8008668:	1a1b      	subne	r3, r3, r0
 800866a:	50a3      	strne	r3, [r4, r2]
 800866c:	e7af      	b.n	80085ce <_malloc_r+0x22>
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	42a3      	cmp	r3, r4
 8008672:	bf0c      	ite	eq
 8008674:	f8c8 2000 	streq.w	r2, [r8]
 8008678:	605a      	strne	r2, [r3, #4]
 800867a:	e7eb      	b.n	8008654 <_malloc_r+0xa8>
 800867c:	4623      	mov	r3, r4
 800867e:	6864      	ldr	r4, [r4, #4]
 8008680:	e7ae      	b.n	80085e0 <_malloc_r+0x34>
 8008682:	463c      	mov	r4, r7
 8008684:	687f      	ldr	r7, [r7, #4]
 8008686:	e7b6      	b.n	80085f6 <_malloc_r+0x4a>
 8008688:	461a      	mov	r2, r3
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	42a3      	cmp	r3, r4
 800868e:	d1fb      	bne.n	8008688 <_malloc_r+0xdc>
 8008690:	2300      	movs	r3, #0
 8008692:	6053      	str	r3, [r2, #4]
 8008694:	e7de      	b.n	8008654 <_malloc_r+0xa8>
 8008696:	230c      	movs	r3, #12
 8008698:	6033      	str	r3, [r6, #0]
 800869a:	4630      	mov	r0, r6
 800869c:	f000 f80c 	bl	80086b8 <__malloc_unlock>
 80086a0:	e794      	b.n	80085cc <_malloc_r+0x20>
 80086a2:	6005      	str	r5, [r0, #0]
 80086a4:	e7d6      	b.n	8008654 <_malloc_r+0xa8>
 80086a6:	bf00      	nop
 80086a8:	20006200 	.word	0x20006200

080086ac <__malloc_lock>:
 80086ac:	4801      	ldr	r0, [pc, #4]	@ (80086b4 <__malloc_lock+0x8>)
 80086ae:	f7ff bf00 	b.w	80084b2 <__retarget_lock_acquire_recursive>
 80086b2:	bf00      	nop
 80086b4:	200061f8 	.word	0x200061f8

080086b8 <__malloc_unlock>:
 80086b8:	4801      	ldr	r0, [pc, #4]	@ (80086c0 <__malloc_unlock+0x8>)
 80086ba:	f7ff befb 	b.w	80084b4 <__retarget_lock_release_recursive>
 80086be:	bf00      	nop
 80086c0:	200061f8 	.word	0x200061f8

080086c4 <__ssputs_r>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	688e      	ldr	r6, [r1, #8]
 80086ca:	461f      	mov	r7, r3
 80086cc:	42be      	cmp	r6, r7
 80086ce:	680b      	ldr	r3, [r1, #0]
 80086d0:	4682      	mov	sl, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	4690      	mov	r8, r2
 80086d6:	d82d      	bhi.n	8008734 <__ssputs_r+0x70>
 80086d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086e0:	d026      	beq.n	8008730 <__ssputs_r+0x6c>
 80086e2:	6965      	ldr	r5, [r4, #20]
 80086e4:	6909      	ldr	r1, [r1, #16]
 80086e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ea:	eba3 0901 	sub.w	r9, r3, r1
 80086ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086f2:	1c7b      	adds	r3, r7, #1
 80086f4:	444b      	add	r3, r9
 80086f6:	106d      	asrs	r5, r5, #1
 80086f8:	429d      	cmp	r5, r3
 80086fa:	bf38      	it	cc
 80086fc:	461d      	movcc	r5, r3
 80086fe:	0553      	lsls	r3, r2, #21
 8008700:	d527      	bpl.n	8008752 <__ssputs_r+0x8e>
 8008702:	4629      	mov	r1, r5
 8008704:	f7ff ff52 	bl	80085ac <_malloc_r>
 8008708:	4606      	mov	r6, r0
 800870a:	b360      	cbz	r0, 8008766 <__ssputs_r+0xa2>
 800870c:	6921      	ldr	r1, [r4, #16]
 800870e:	464a      	mov	r2, r9
 8008710:	f7ff fed1 	bl	80084b6 <memcpy>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800871a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	6126      	str	r6, [r4, #16]
 8008722:	6165      	str	r5, [r4, #20]
 8008724:	444e      	add	r6, r9
 8008726:	eba5 0509 	sub.w	r5, r5, r9
 800872a:	6026      	str	r6, [r4, #0]
 800872c:	60a5      	str	r5, [r4, #8]
 800872e:	463e      	mov	r6, r7
 8008730:	42be      	cmp	r6, r7
 8008732:	d900      	bls.n	8008736 <__ssputs_r+0x72>
 8008734:	463e      	mov	r6, r7
 8008736:	6820      	ldr	r0, [r4, #0]
 8008738:	4632      	mov	r2, r6
 800873a:	4641      	mov	r1, r8
 800873c:	f000 fbb4 	bl	8008ea8 <memmove>
 8008740:	68a3      	ldr	r3, [r4, #8]
 8008742:	1b9b      	subs	r3, r3, r6
 8008744:	60a3      	str	r3, [r4, #8]
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	4433      	add	r3, r6
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	2000      	movs	r0, #0
 800874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008752:	462a      	mov	r2, r5
 8008754:	f000 fbf4 	bl	8008f40 <_realloc_r>
 8008758:	4606      	mov	r6, r0
 800875a:	2800      	cmp	r0, #0
 800875c:	d1e0      	bne.n	8008720 <__ssputs_r+0x5c>
 800875e:	6921      	ldr	r1, [r4, #16]
 8008760:	4650      	mov	r0, sl
 8008762:	f7ff feb7 	bl	80084d4 <_free_r>
 8008766:	230c      	movs	r3, #12
 8008768:	f8ca 3000 	str.w	r3, [sl]
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	e7e9      	b.n	800874e <__ssputs_r+0x8a>
	...

0800877c <_svfiprintf_r>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	4698      	mov	r8, r3
 8008782:	898b      	ldrh	r3, [r1, #12]
 8008784:	061b      	lsls	r3, r3, #24
 8008786:	b09d      	sub	sp, #116	@ 0x74
 8008788:	4607      	mov	r7, r0
 800878a:	460d      	mov	r5, r1
 800878c:	4614      	mov	r4, r2
 800878e:	d510      	bpl.n	80087b2 <_svfiprintf_r+0x36>
 8008790:	690b      	ldr	r3, [r1, #16]
 8008792:	b973      	cbnz	r3, 80087b2 <_svfiprintf_r+0x36>
 8008794:	2140      	movs	r1, #64	@ 0x40
 8008796:	f7ff ff09 	bl	80085ac <_malloc_r>
 800879a:	6028      	str	r0, [r5, #0]
 800879c:	6128      	str	r0, [r5, #16]
 800879e:	b930      	cbnz	r0, 80087ae <_svfiprintf_r+0x32>
 80087a0:	230c      	movs	r3, #12
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b01d      	add	sp, #116	@ 0x74
 80087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	2340      	movs	r3, #64	@ 0x40
 80087b0:	616b      	str	r3, [r5, #20]
 80087b2:	2300      	movs	r3, #0
 80087b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b6:	2320      	movs	r3, #32
 80087b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c0:	2330      	movs	r3, #48	@ 0x30
 80087c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008960 <_svfiprintf_r+0x1e4>
 80087c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087ca:	f04f 0901 	mov.w	r9, #1
 80087ce:	4623      	mov	r3, r4
 80087d0:	469a      	mov	sl, r3
 80087d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d6:	b10a      	cbz	r2, 80087dc <_svfiprintf_r+0x60>
 80087d8:	2a25      	cmp	r2, #37	@ 0x25
 80087da:	d1f9      	bne.n	80087d0 <_svfiprintf_r+0x54>
 80087dc:	ebba 0b04 	subs.w	fp, sl, r4
 80087e0:	d00b      	beq.n	80087fa <_svfiprintf_r+0x7e>
 80087e2:	465b      	mov	r3, fp
 80087e4:	4622      	mov	r2, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ff6b 	bl	80086c4 <__ssputs_r>
 80087ee:	3001      	adds	r0, #1
 80087f0:	f000 80a7 	beq.w	8008942 <_svfiprintf_r+0x1c6>
 80087f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f6:	445a      	add	r2, fp
 80087f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80087fa:	f89a 3000 	ldrb.w	r3, [sl]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 809f 	beq.w	8008942 <_svfiprintf_r+0x1c6>
 8008804:	2300      	movs	r3, #0
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880e:	f10a 0a01 	add.w	sl, sl, #1
 8008812:	9304      	str	r3, [sp, #16]
 8008814:	9307      	str	r3, [sp, #28]
 8008816:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800881a:	931a      	str	r3, [sp, #104]	@ 0x68
 800881c:	4654      	mov	r4, sl
 800881e:	2205      	movs	r2, #5
 8008820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008824:	484e      	ldr	r0, [pc, #312]	@ (8008960 <_svfiprintf_r+0x1e4>)
 8008826:	f7f7 fcdb 	bl	80001e0 <memchr>
 800882a:	9a04      	ldr	r2, [sp, #16]
 800882c:	b9d8      	cbnz	r0, 8008866 <_svfiprintf_r+0xea>
 800882e:	06d0      	lsls	r0, r2, #27
 8008830:	bf44      	itt	mi
 8008832:	2320      	movmi	r3, #32
 8008834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008838:	0711      	lsls	r1, r2, #28
 800883a:	bf44      	itt	mi
 800883c:	232b      	movmi	r3, #43	@ 0x2b
 800883e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008842:	f89a 3000 	ldrb.w	r3, [sl]
 8008846:	2b2a      	cmp	r3, #42	@ 0x2a
 8008848:	d015      	beq.n	8008876 <_svfiprintf_r+0xfa>
 800884a:	9a07      	ldr	r2, [sp, #28]
 800884c:	4654      	mov	r4, sl
 800884e:	2000      	movs	r0, #0
 8008850:	f04f 0c0a 	mov.w	ip, #10
 8008854:	4621      	mov	r1, r4
 8008856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885a:	3b30      	subs	r3, #48	@ 0x30
 800885c:	2b09      	cmp	r3, #9
 800885e:	d94b      	bls.n	80088f8 <_svfiprintf_r+0x17c>
 8008860:	b1b0      	cbz	r0, 8008890 <_svfiprintf_r+0x114>
 8008862:	9207      	str	r2, [sp, #28]
 8008864:	e014      	b.n	8008890 <_svfiprintf_r+0x114>
 8008866:	eba0 0308 	sub.w	r3, r0, r8
 800886a:	fa09 f303 	lsl.w	r3, r9, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	46a2      	mov	sl, r4
 8008874:	e7d2      	b.n	800881c <_svfiprintf_r+0xa0>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	1d19      	adds	r1, r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	9103      	str	r1, [sp, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	bfbb      	ittet	lt
 8008882:	425b      	neglt	r3, r3
 8008884:	f042 0202 	orrlt.w	r2, r2, #2
 8008888:	9307      	strge	r3, [sp, #28]
 800888a:	9307      	strlt	r3, [sp, #28]
 800888c:	bfb8      	it	lt
 800888e:	9204      	strlt	r2, [sp, #16]
 8008890:	7823      	ldrb	r3, [r4, #0]
 8008892:	2b2e      	cmp	r3, #46	@ 0x2e
 8008894:	d10a      	bne.n	80088ac <_svfiprintf_r+0x130>
 8008896:	7863      	ldrb	r3, [r4, #1]
 8008898:	2b2a      	cmp	r3, #42	@ 0x2a
 800889a:	d132      	bne.n	8008902 <_svfiprintf_r+0x186>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	9203      	str	r2, [sp, #12]
 80088a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088a8:	3402      	adds	r4, #2
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008970 <_svfiprintf_r+0x1f4>
 80088b0:	7821      	ldrb	r1, [r4, #0]
 80088b2:	2203      	movs	r2, #3
 80088b4:	4650      	mov	r0, sl
 80088b6:	f7f7 fc93 	bl	80001e0 <memchr>
 80088ba:	b138      	cbz	r0, 80088cc <_svfiprintf_r+0x150>
 80088bc:	9b04      	ldr	r3, [sp, #16]
 80088be:	eba0 000a 	sub.w	r0, r0, sl
 80088c2:	2240      	movs	r2, #64	@ 0x40
 80088c4:	4082      	lsls	r2, r0
 80088c6:	4313      	orrs	r3, r2
 80088c8:	3401      	adds	r4, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d0:	4824      	ldr	r0, [pc, #144]	@ (8008964 <_svfiprintf_r+0x1e8>)
 80088d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088d6:	2206      	movs	r2, #6
 80088d8:	f7f7 fc82 	bl	80001e0 <memchr>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d036      	beq.n	800894e <_svfiprintf_r+0x1d2>
 80088e0:	4b21      	ldr	r3, [pc, #132]	@ (8008968 <_svfiprintf_r+0x1ec>)
 80088e2:	bb1b      	cbnz	r3, 800892c <_svfiprintf_r+0x1b0>
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	3307      	adds	r3, #7
 80088e8:	f023 0307 	bic.w	r3, r3, #7
 80088ec:	3308      	adds	r3, #8
 80088ee:	9303      	str	r3, [sp, #12]
 80088f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f2:	4433      	add	r3, r6
 80088f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f6:	e76a      	b.n	80087ce <_svfiprintf_r+0x52>
 80088f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fc:	460c      	mov	r4, r1
 80088fe:	2001      	movs	r0, #1
 8008900:	e7a8      	b.n	8008854 <_svfiprintf_r+0xd8>
 8008902:	2300      	movs	r3, #0
 8008904:	3401      	adds	r4, #1
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	4619      	mov	r1, r3
 800890a:	f04f 0c0a 	mov.w	ip, #10
 800890e:	4620      	mov	r0, r4
 8008910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008914:	3a30      	subs	r2, #48	@ 0x30
 8008916:	2a09      	cmp	r2, #9
 8008918:	d903      	bls.n	8008922 <_svfiprintf_r+0x1a6>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0c6      	beq.n	80088ac <_svfiprintf_r+0x130>
 800891e:	9105      	str	r1, [sp, #20]
 8008920:	e7c4      	b.n	80088ac <_svfiprintf_r+0x130>
 8008922:	fb0c 2101 	mla	r1, ip, r1, r2
 8008926:	4604      	mov	r4, r0
 8008928:	2301      	movs	r3, #1
 800892a:	e7f0      	b.n	800890e <_svfiprintf_r+0x192>
 800892c:	ab03      	add	r3, sp, #12
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	462a      	mov	r2, r5
 8008932:	4b0e      	ldr	r3, [pc, #56]	@ (800896c <_svfiprintf_r+0x1f0>)
 8008934:	a904      	add	r1, sp, #16
 8008936:	4638      	mov	r0, r7
 8008938:	f3af 8000 	nop.w
 800893c:	1c42      	adds	r2, r0, #1
 800893e:	4606      	mov	r6, r0
 8008940:	d1d6      	bne.n	80088f0 <_svfiprintf_r+0x174>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	065b      	lsls	r3, r3, #25
 8008946:	f53f af2d 	bmi.w	80087a4 <_svfiprintf_r+0x28>
 800894a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800894c:	e72c      	b.n	80087a8 <_svfiprintf_r+0x2c>
 800894e:	ab03      	add	r3, sp, #12
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	462a      	mov	r2, r5
 8008954:	4b05      	ldr	r3, [pc, #20]	@ (800896c <_svfiprintf_r+0x1f0>)
 8008956:	a904      	add	r1, sp, #16
 8008958:	4638      	mov	r0, r7
 800895a:	f000 f879 	bl	8008a50 <_printf_i>
 800895e:	e7ed      	b.n	800893c <_svfiprintf_r+0x1c0>
 8008960:	080090e0 	.word	0x080090e0
 8008964:	080090ea 	.word	0x080090ea
 8008968:	00000000 	.word	0x00000000
 800896c:	080086c5 	.word	0x080086c5
 8008970:	080090e6 	.word	0x080090e6

08008974 <_printf_common>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	4616      	mov	r6, r2
 800897a:	4698      	mov	r8, r3
 800897c:	688a      	ldr	r2, [r1, #8]
 800897e:	690b      	ldr	r3, [r1, #16]
 8008980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008984:	4293      	cmp	r3, r2
 8008986:	bfb8      	it	lt
 8008988:	4613      	movlt	r3, r2
 800898a:	6033      	str	r3, [r6, #0]
 800898c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008990:	4607      	mov	r7, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b10a      	cbz	r2, 800899a <_printf_common+0x26>
 8008996:	3301      	adds	r3, #1
 8008998:	6033      	str	r3, [r6, #0]
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	0699      	lsls	r1, r3, #26
 800899e:	bf42      	ittt	mi
 80089a0:	6833      	ldrmi	r3, [r6, #0]
 80089a2:	3302      	addmi	r3, #2
 80089a4:	6033      	strmi	r3, [r6, #0]
 80089a6:	6825      	ldr	r5, [r4, #0]
 80089a8:	f015 0506 	ands.w	r5, r5, #6
 80089ac:	d106      	bne.n	80089bc <_printf_common+0x48>
 80089ae:	f104 0a19 	add.w	sl, r4, #25
 80089b2:	68e3      	ldr	r3, [r4, #12]
 80089b4:	6832      	ldr	r2, [r6, #0]
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	dc26      	bgt.n	8008a0a <_printf_common+0x96>
 80089bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089c0:	6822      	ldr	r2, [r4, #0]
 80089c2:	3b00      	subs	r3, #0
 80089c4:	bf18      	it	ne
 80089c6:	2301      	movne	r3, #1
 80089c8:	0692      	lsls	r2, r2, #26
 80089ca:	d42b      	bmi.n	8008a24 <_printf_common+0xb0>
 80089cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089d0:	4641      	mov	r1, r8
 80089d2:	4638      	mov	r0, r7
 80089d4:	47c8      	blx	r9
 80089d6:	3001      	adds	r0, #1
 80089d8:	d01e      	beq.n	8008a18 <_printf_common+0xa4>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	6922      	ldr	r2, [r4, #16]
 80089de:	f003 0306 	and.w	r3, r3, #6
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	bf02      	ittt	eq
 80089e6:	68e5      	ldreq	r5, [r4, #12]
 80089e8:	6833      	ldreq	r3, [r6, #0]
 80089ea:	1aed      	subeq	r5, r5, r3
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	bf0c      	ite	eq
 80089f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089f4:	2500      	movne	r5, #0
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bfc4      	itt	gt
 80089fa:	1a9b      	subgt	r3, r3, r2
 80089fc:	18ed      	addgt	r5, r5, r3
 80089fe:	2600      	movs	r6, #0
 8008a00:	341a      	adds	r4, #26
 8008a02:	42b5      	cmp	r5, r6
 8008a04:	d11a      	bne.n	8008a3c <_printf_common+0xc8>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e008      	b.n	8008a1c <_printf_common+0xa8>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	4641      	mov	r1, r8
 8008a10:	4638      	mov	r0, r7
 8008a12:	47c8      	blx	r9
 8008a14:	3001      	adds	r0, #1
 8008a16:	d103      	bne.n	8008a20 <_printf_common+0xac>
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	3501      	adds	r5, #1
 8008a22:	e7c6      	b.n	80089b2 <_printf_common+0x3e>
 8008a24:	18e1      	adds	r1, r4, r3
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	2030      	movs	r0, #48	@ 0x30
 8008a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a2e:	4422      	add	r2, r4
 8008a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a38:	3302      	adds	r3, #2
 8008a3a:	e7c7      	b.n	80089cc <_printf_common+0x58>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4641      	mov	r1, r8
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c8      	blx	r9
 8008a46:	3001      	adds	r0, #1
 8008a48:	d0e6      	beq.n	8008a18 <_printf_common+0xa4>
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7d9      	b.n	8008a02 <_printf_common+0x8e>
	...

08008a50 <_printf_i>:
 8008a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	7e0f      	ldrb	r7, [r1, #24]
 8008a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a58:	2f78      	cmp	r7, #120	@ 0x78
 8008a5a:	4691      	mov	r9, r2
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	469a      	mov	sl, r3
 8008a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a66:	d807      	bhi.n	8008a78 <_printf_i+0x28>
 8008a68:	2f62      	cmp	r7, #98	@ 0x62
 8008a6a:	d80a      	bhi.n	8008a82 <_printf_i+0x32>
 8008a6c:	2f00      	cmp	r7, #0
 8008a6e:	f000 80d1 	beq.w	8008c14 <_printf_i+0x1c4>
 8008a72:	2f58      	cmp	r7, #88	@ 0x58
 8008a74:	f000 80b8 	beq.w	8008be8 <_printf_i+0x198>
 8008a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a80:	e03a      	b.n	8008af8 <_printf_i+0xa8>
 8008a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a86:	2b15      	cmp	r3, #21
 8008a88:	d8f6      	bhi.n	8008a78 <_printf_i+0x28>
 8008a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008a90 <_printf_i+0x40>)
 8008a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a90:	08008ae9 	.word	0x08008ae9
 8008a94:	08008afd 	.word	0x08008afd
 8008a98:	08008a79 	.word	0x08008a79
 8008a9c:	08008a79 	.word	0x08008a79
 8008aa0:	08008a79 	.word	0x08008a79
 8008aa4:	08008a79 	.word	0x08008a79
 8008aa8:	08008afd 	.word	0x08008afd
 8008aac:	08008a79 	.word	0x08008a79
 8008ab0:	08008a79 	.word	0x08008a79
 8008ab4:	08008a79 	.word	0x08008a79
 8008ab8:	08008a79 	.word	0x08008a79
 8008abc:	08008bfb 	.word	0x08008bfb
 8008ac0:	08008b27 	.word	0x08008b27
 8008ac4:	08008bb5 	.word	0x08008bb5
 8008ac8:	08008a79 	.word	0x08008a79
 8008acc:	08008a79 	.word	0x08008a79
 8008ad0:	08008c1d 	.word	0x08008c1d
 8008ad4:	08008a79 	.word	0x08008a79
 8008ad8:	08008b27 	.word	0x08008b27
 8008adc:	08008a79 	.word	0x08008a79
 8008ae0:	08008a79 	.word	0x08008a79
 8008ae4:	08008bbd 	.word	0x08008bbd
 8008ae8:	6833      	ldr	r3, [r6, #0]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6032      	str	r2, [r6, #0]
 8008af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008af8:	2301      	movs	r3, #1
 8008afa:	e09c      	b.n	8008c36 <_printf_i+0x1e6>
 8008afc:	6833      	ldr	r3, [r6, #0]
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	1d19      	adds	r1, r3, #4
 8008b02:	6031      	str	r1, [r6, #0]
 8008b04:	0606      	lsls	r6, r0, #24
 8008b06:	d501      	bpl.n	8008b0c <_printf_i+0xbc>
 8008b08:	681d      	ldr	r5, [r3, #0]
 8008b0a:	e003      	b.n	8008b14 <_printf_i+0xc4>
 8008b0c:	0645      	lsls	r5, r0, #25
 8008b0e:	d5fb      	bpl.n	8008b08 <_printf_i+0xb8>
 8008b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	da03      	bge.n	8008b20 <_printf_i+0xd0>
 8008b18:	232d      	movs	r3, #45	@ 0x2d
 8008b1a:	426d      	negs	r5, r5
 8008b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b20:	4858      	ldr	r0, [pc, #352]	@ (8008c84 <_printf_i+0x234>)
 8008b22:	230a      	movs	r3, #10
 8008b24:	e011      	b.n	8008b4a <_printf_i+0xfa>
 8008b26:	6821      	ldr	r1, [r4, #0]
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	0608      	lsls	r0, r1, #24
 8008b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b30:	d402      	bmi.n	8008b38 <_printf_i+0xe8>
 8008b32:	0649      	lsls	r1, r1, #25
 8008b34:	bf48      	it	mi
 8008b36:	b2ad      	uxthmi	r5, r5
 8008b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b3a:	4852      	ldr	r0, [pc, #328]	@ (8008c84 <_printf_i+0x234>)
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	bf14      	ite	ne
 8008b40:	230a      	movne	r3, #10
 8008b42:	2308      	moveq	r3, #8
 8008b44:	2100      	movs	r1, #0
 8008b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b4a:	6866      	ldr	r6, [r4, #4]
 8008b4c:	60a6      	str	r6, [r4, #8]
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	db05      	blt.n	8008b5e <_printf_i+0x10e>
 8008b52:	6821      	ldr	r1, [r4, #0]
 8008b54:	432e      	orrs	r6, r5
 8008b56:	f021 0104 	bic.w	r1, r1, #4
 8008b5a:	6021      	str	r1, [r4, #0]
 8008b5c:	d04b      	beq.n	8008bf6 <_printf_i+0x1a6>
 8008b5e:	4616      	mov	r6, r2
 8008b60:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b64:	fb03 5711 	mls	r7, r3, r1, r5
 8008b68:	5dc7      	ldrb	r7, [r0, r7]
 8008b6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b6e:	462f      	mov	r7, r5
 8008b70:	42bb      	cmp	r3, r7
 8008b72:	460d      	mov	r5, r1
 8008b74:	d9f4      	bls.n	8008b60 <_printf_i+0x110>
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	d10b      	bne.n	8008b92 <_printf_i+0x142>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	07df      	lsls	r7, r3, #31
 8008b7e:	d508      	bpl.n	8008b92 <_printf_i+0x142>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	6861      	ldr	r1, [r4, #4]
 8008b84:	4299      	cmp	r1, r3
 8008b86:	bfde      	ittt	le
 8008b88:	2330      	movle	r3, #48	@ 0x30
 8008b8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b92:	1b92      	subs	r2, r2, r6
 8008b94:	6122      	str	r2, [r4, #16]
 8008b96:	f8cd a000 	str.w	sl, [sp]
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	aa03      	add	r2, sp, #12
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	f7ff fee7 	bl	8008974 <_printf_common>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d14a      	bne.n	8008c40 <_printf_i+0x1f0>
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	b004      	add	sp, #16
 8008bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	f043 0320 	orr.w	r3, r3, #32
 8008bba:	6023      	str	r3, [r4, #0]
 8008bbc:	4832      	ldr	r0, [pc, #200]	@ (8008c88 <_printf_i+0x238>)
 8008bbe:	2778      	movs	r7, #120	@ 0x78
 8008bc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	6831      	ldr	r1, [r6, #0]
 8008bc8:	061f      	lsls	r7, r3, #24
 8008bca:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bce:	d402      	bmi.n	8008bd6 <_printf_i+0x186>
 8008bd0:	065f      	lsls	r7, r3, #25
 8008bd2:	bf48      	it	mi
 8008bd4:	b2ad      	uxthmi	r5, r5
 8008bd6:	6031      	str	r1, [r6, #0]
 8008bd8:	07d9      	lsls	r1, r3, #31
 8008bda:	bf44      	itt	mi
 8008bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8008be0:	6023      	strmi	r3, [r4, #0]
 8008be2:	b11d      	cbz	r5, 8008bec <_printf_i+0x19c>
 8008be4:	2310      	movs	r3, #16
 8008be6:	e7ad      	b.n	8008b44 <_printf_i+0xf4>
 8008be8:	4826      	ldr	r0, [pc, #152]	@ (8008c84 <_printf_i+0x234>)
 8008bea:	e7e9      	b.n	8008bc0 <_printf_i+0x170>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	f023 0320 	bic.w	r3, r3, #32
 8008bf2:	6023      	str	r3, [r4, #0]
 8008bf4:	e7f6      	b.n	8008be4 <_printf_i+0x194>
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	e7bd      	b.n	8008b76 <_printf_i+0x126>
 8008bfa:	6833      	ldr	r3, [r6, #0]
 8008bfc:	6825      	ldr	r5, [r4, #0]
 8008bfe:	6961      	ldr	r1, [r4, #20]
 8008c00:	1d18      	adds	r0, r3, #4
 8008c02:	6030      	str	r0, [r6, #0]
 8008c04:	062e      	lsls	r6, r5, #24
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	d501      	bpl.n	8008c0e <_printf_i+0x1be>
 8008c0a:	6019      	str	r1, [r3, #0]
 8008c0c:	e002      	b.n	8008c14 <_printf_i+0x1c4>
 8008c0e:	0668      	lsls	r0, r5, #25
 8008c10:	d5fb      	bpl.n	8008c0a <_printf_i+0x1ba>
 8008c12:	8019      	strh	r1, [r3, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	4616      	mov	r6, r2
 8008c1a:	e7bc      	b.n	8008b96 <_printf_i+0x146>
 8008c1c:	6833      	ldr	r3, [r6, #0]
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	6032      	str	r2, [r6, #0]
 8008c22:	681e      	ldr	r6, [r3, #0]
 8008c24:	6862      	ldr	r2, [r4, #4]
 8008c26:	2100      	movs	r1, #0
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7f7 fad9 	bl	80001e0 <memchr>
 8008c2e:	b108      	cbz	r0, 8008c34 <_printf_i+0x1e4>
 8008c30:	1b80      	subs	r0, r0, r6
 8008c32:	6060      	str	r0, [r4, #4]
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	6123      	str	r3, [r4, #16]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c3e:	e7aa      	b.n	8008b96 <_printf_i+0x146>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	4632      	mov	r2, r6
 8008c44:	4649      	mov	r1, r9
 8008c46:	4640      	mov	r0, r8
 8008c48:	47d0      	blx	sl
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d0ad      	beq.n	8008baa <_printf_i+0x15a>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	079b      	lsls	r3, r3, #30
 8008c52:	d413      	bmi.n	8008c7c <_printf_i+0x22c>
 8008c54:	68e0      	ldr	r0, [r4, #12]
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	4298      	cmp	r0, r3
 8008c5a:	bfb8      	it	lt
 8008c5c:	4618      	movlt	r0, r3
 8008c5e:	e7a6      	b.n	8008bae <_printf_i+0x15e>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4632      	mov	r2, r6
 8008c64:	4649      	mov	r1, r9
 8008c66:	4640      	mov	r0, r8
 8008c68:	47d0      	blx	sl
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d09d      	beq.n	8008baa <_printf_i+0x15a>
 8008c6e:	3501      	adds	r5, #1
 8008c70:	68e3      	ldr	r3, [r4, #12]
 8008c72:	9903      	ldr	r1, [sp, #12]
 8008c74:	1a5b      	subs	r3, r3, r1
 8008c76:	42ab      	cmp	r3, r5
 8008c78:	dcf2      	bgt.n	8008c60 <_printf_i+0x210>
 8008c7a:	e7eb      	b.n	8008c54 <_printf_i+0x204>
 8008c7c:	2500      	movs	r5, #0
 8008c7e:	f104 0619 	add.w	r6, r4, #25
 8008c82:	e7f5      	b.n	8008c70 <_printf_i+0x220>
 8008c84:	080090f1 	.word	0x080090f1
 8008c88:	08009102 	.word	0x08009102

08008c8c <__sflush_r>:
 8008c8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c94:	0716      	lsls	r6, r2, #28
 8008c96:	4605      	mov	r5, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	d454      	bmi.n	8008d46 <__sflush_r+0xba>
 8008c9c:	684b      	ldr	r3, [r1, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dc02      	bgt.n	8008ca8 <__sflush_r+0x1c>
 8008ca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd48      	ble.n	8008d3a <__sflush_r+0xae>
 8008ca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	d045      	beq.n	8008d3a <__sflush_r+0xae>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cb4:	682f      	ldr	r7, [r5, #0]
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	d030      	beq.n	8008d1e <__sflush_r+0x92>
 8008cbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	0759      	lsls	r1, r3, #29
 8008cc2:	d505      	bpl.n	8008cd0 <__sflush_r+0x44>
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	1ad2      	subs	r2, r2, r3
 8008cc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cca:	b10b      	cbz	r3, 8008cd0 <__sflush_r+0x44>
 8008ccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cd4:	6a21      	ldr	r1, [r4, #32]
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b0      	blx	r6
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	d106      	bne.n	8008cee <__sflush_r+0x62>
 8008ce0:	6829      	ldr	r1, [r5, #0]
 8008ce2:	291d      	cmp	r1, #29
 8008ce4:	d82b      	bhi.n	8008d3e <__sflush_r+0xb2>
 8008ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d90 <__sflush_r+0x104>)
 8008ce8:	40ca      	lsrs	r2, r1
 8008cea:	07d6      	lsls	r6, r2, #31
 8008cec:	d527      	bpl.n	8008d3e <__sflush_r+0xb2>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	6062      	str	r2, [r4, #4]
 8008cf2:	04d9      	lsls	r1, r3, #19
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	6022      	str	r2, [r4, #0]
 8008cf8:	d504      	bpl.n	8008d04 <__sflush_r+0x78>
 8008cfa:	1c42      	adds	r2, r0, #1
 8008cfc:	d101      	bne.n	8008d02 <__sflush_r+0x76>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b903      	cbnz	r3, 8008d04 <__sflush_r+0x78>
 8008d02:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d06:	602f      	str	r7, [r5, #0]
 8008d08:	b1b9      	cbz	r1, 8008d3a <__sflush_r+0xae>
 8008d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d002      	beq.n	8008d18 <__sflush_r+0x8c>
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7ff fbde 	bl	80084d4 <_free_r>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d1c:	e00d      	b.n	8008d3a <__sflush_r+0xae>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	4602      	mov	r2, r0
 8008d26:	1c50      	adds	r0, r2, #1
 8008d28:	d1c9      	bne.n	8008cbe <__sflush_r+0x32>
 8008d2a:	682b      	ldr	r3, [r5, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0c6      	beq.n	8008cbe <__sflush_r+0x32>
 8008d30:	2b1d      	cmp	r3, #29
 8008d32:	d001      	beq.n	8008d38 <__sflush_r+0xac>
 8008d34:	2b16      	cmp	r3, #22
 8008d36:	d11e      	bne.n	8008d76 <__sflush_r+0xea>
 8008d38:	602f      	str	r7, [r5, #0]
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e022      	b.n	8008d84 <__sflush_r+0xf8>
 8008d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d42:	b21b      	sxth	r3, r3
 8008d44:	e01b      	b.n	8008d7e <__sflush_r+0xf2>
 8008d46:	690f      	ldr	r7, [r1, #16]
 8008d48:	2f00      	cmp	r7, #0
 8008d4a:	d0f6      	beq.n	8008d3a <__sflush_r+0xae>
 8008d4c:	0793      	lsls	r3, r2, #30
 8008d4e:	680e      	ldr	r6, [r1, #0]
 8008d50:	bf08      	it	eq
 8008d52:	694b      	ldreq	r3, [r1, #20]
 8008d54:	600f      	str	r7, [r1, #0]
 8008d56:	bf18      	it	ne
 8008d58:	2300      	movne	r3, #0
 8008d5a:	eba6 0807 	sub.w	r8, r6, r7
 8008d5e:	608b      	str	r3, [r1, #8]
 8008d60:	f1b8 0f00 	cmp.w	r8, #0
 8008d64:	dde9      	ble.n	8008d3a <__sflush_r+0xae>
 8008d66:	6a21      	ldr	r1, [r4, #32]
 8008d68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d6a:	4643      	mov	r3, r8
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b0      	blx	r6
 8008d72:	2800      	cmp	r0, #0
 8008d74:	dc08      	bgt.n	8008d88 <__sflush_r+0xfc>
 8008d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	4407      	add	r7, r0
 8008d8a:	eba8 0800 	sub.w	r8, r8, r0
 8008d8e:	e7e7      	b.n	8008d60 <__sflush_r+0xd4>
 8008d90:	20400001 	.word	0x20400001

08008d94 <_fflush_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	690b      	ldr	r3, [r1, #16]
 8008d98:	4605      	mov	r5, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	b913      	cbnz	r3, 8008da4 <_fflush_r+0x10>
 8008d9e:	2500      	movs	r5, #0
 8008da0:	4628      	mov	r0, r5
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	b118      	cbz	r0, 8008dae <_fflush_r+0x1a>
 8008da6:	6a03      	ldr	r3, [r0, #32]
 8008da8:	b90b      	cbnz	r3, 8008dae <_fflush_r+0x1a>
 8008daa:	f7ff f909 	bl	8007fc0 <__sinit>
 8008dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f3      	beq.n	8008d9e <_fflush_r+0xa>
 8008db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008db8:	07d0      	lsls	r0, r2, #31
 8008dba:	d404      	bmi.n	8008dc6 <_fflush_r+0x32>
 8008dbc:	0599      	lsls	r1, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_fflush_r+0x32>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dc2:	f7ff fb76 	bl	80084b2 <__retarget_lock_acquire_recursive>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f7ff ff5f 	bl	8008c8c <__sflush_r>
 8008dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dd0:	07da      	lsls	r2, r3, #31
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	d4e4      	bmi.n	8008da0 <_fflush_r+0xc>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	059b      	lsls	r3, r3, #22
 8008dda:	d4e1      	bmi.n	8008da0 <_fflush_r+0xc>
 8008ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dde:	f7ff fb69 	bl	80084b4 <__retarget_lock_release_recursive>
 8008de2:	e7dd      	b.n	8008da0 <_fflush_r+0xc>

08008de4 <__swhatbuf_r>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	460c      	mov	r4, r1
 8008de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dec:	2900      	cmp	r1, #0
 8008dee:	b096      	sub	sp, #88	@ 0x58
 8008df0:	4615      	mov	r5, r2
 8008df2:	461e      	mov	r6, r3
 8008df4:	da0d      	bge.n	8008e12 <__swhatbuf_r+0x2e>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008dfc:	f04f 0100 	mov.w	r1, #0
 8008e00:	bf14      	ite	ne
 8008e02:	2340      	movne	r3, #64	@ 0x40
 8008e04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e08:	2000      	movs	r0, #0
 8008e0a:	6031      	str	r1, [r6, #0]
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	b016      	add	sp, #88	@ 0x58
 8008e10:	bd70      	pop	{r4, r5, r6, pc}
 8008e12:	466a      	mov	r2, sp
 8008e14:	f000 f862 	bl	8008edc <_fstat_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	dbec      	blt.n	8008df6 <__swhatbuf_r+0x12>
 8008e1c:	9901      	ldr	r1, [sp, #4]
 8008e1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e26:	4259      	negs	r1, r3
 8008e28:	4159      	adcs	r1, r3
 8008e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e2e:	e7eb      	b.n	8008e08 <__swhatbuf_r+0x24>

08008e30 <__smakebuf_r>:
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e34:	079d      	lsls	r5, r3, #30
 8008e36:	4606      	mov	r6, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	d507      	bpl.n	8008e4c <__smakebuf_r+0x1c>
 8008e3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	2301      	movs	r3, #1
 8008e46:	6163      	str	r3, [r4, #20]
 8008e48:	b003      	add	sp, #12
 8008e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e4c:	ab01      	add	r3, sp, #4
 8008e4e:	466a      	mov	r2, sp
 8008e50:	f7ff ffc8 	bl	8008de4 <__swhatbuf_r>
 8008e54:	9f00      	ldr	r7, [sp, #0]
 8008e56:	4605      	mov	r5, r0
 8008e58:	4639      	mov	r1, r7
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff fba6 	bl	80085ac <_malloc_r>
 8008e60:	b948      	cbnz	r0, 8008e76 <__smakebuf_r+0x46>
 8008e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e66:	059a      	lsls	r2, r3, #22
 8008e68:	d4ee      	bmi.n	8008e48 <__smakebuf_r+0x18>
 8008e6a:	f023 0303 	bic.w	r3, r3, #3
 8008e6e:	f043 0302 	orr.w	r3, r3, #2
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	e7e2      	b.n	8008e3c <__smakebuf_r+0xc>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	6020      	str	r0, [r4, #0]
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e86:	b15b      	cbz	r3, 8008ea0 <__smakebuf_r+0x70>
 8008e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f000 f837 	bl	8008f00 <_isatty_r>
 8008e92:	b128      	cbz	r0, 8008ea0 <__smakebuf_r+0x70>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	f043 0301 	orr.w	r3, r3, #1
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	431d      	orrs	r5, r3
 8008ea4:	81a5      	strh	r5, [r4, #12]
 8008ea6:	e7cf      	b.n	8008e48 <__smakebuf_r+0x18>

08008ea8 <memmove>:
 8008ea8:	4288      	cmp	r0, r1
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	eb01 0402 	add.w	r4, r1, r2
 8008eb0:	d902      	bls.n	8008eb8 <memmove+0x10>
 8008eb2:	4284      	cmp	r4, r0
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	d807      	bhi.n	8008ec8 <memmove+0x20>
 8008eb8:	1e43      	subs	r3, r0, #1
 8008eba:	42a1      	cmp	r1, r4
 8008ebc:	d008      	beq.n	8008ed0 <memmove+0x28>
 8008ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ec6:	e7f8      	b.n	8008eba <memmove+0x12>
 8008ec8:	4402      	add	r2, r0
 8008eca:	4601      	mov	r1, r0
 8008ecc:	428a      	cmp	r2, r1
 8008ece:	d100      	bne.n	8008ed2 <memmove+0x2a>
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eda:	e7f7      	b.n	8008ecc <memmove+0x24>

08008edc <_fstat_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	@ (8008efc <_fstat_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	f7f8 f95c 	bl	80011a6 <_fstat>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d102      	bne.n	8008ef8 <_fstat_r+0x1c>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	b103      	cbz	r3, 8008ef8 <_fstat_r+0x1c>
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	200061f4 	.word	0x200061f4

08008f00 <_isatty_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d06      	ldr	r5, [pc, #24]	@ (8008f1c <_isatty_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7f8 f95b 	bl	80011c6 <_isatty>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_isatty_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_isatty_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	200061f4 	.word	0x200061f4

08008f20 <_sbrk_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d06      	ldr	r5, [pc, #24]	@ (8008f3c <_sbrk_r+0x1c>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7f8 f964 	bl	80011f8 <_sbrk>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_sbrk_r+0x1a>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_sbrk_r+0x1a>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	200061f4 	.word	0x200061f4

08008f40 <_realloc_r>:
 8008f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	4607      	mov	r7, r0
 8008f46:	4614      	mov	r4, r2
 8008f48:	460d      	mov	r5, r1
 8008f4a:	b921      	cbnz	r1, 8008f56 <_realloc_r+0x16>
 8008f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	4611      	mov	r1, r2
 8008f52:	f7ff bb2b 	b.w	80085ac <_malloc_r>
 8008f56:	b92a      	cbnz	r2, 8008f64 <_realloc_r+0x24>
 8008f58:	f7ff fabc 	bl	80084d4 <_free_r>
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	f000 f81a 	bl	8008f9c <_malloc_usable_size_r>
 8008f68:	4284      	cmp	r4, r0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	d802      	bhi.n	8008f74 <_realloc_r+0x34>
 8008f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f72:	d8f4      	bhi.n	8008f5e <_realloc_r+0x1e>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7ff fb18 	bl	80085ac <_malloc_r>
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	b908      	cbnz	r0, 8008f84 <_realloc_r+0x44>
 8008f80:	4645      	mov	r5, r8
 8008f82:	e7ec      	b.n	8008f5e <_realloc_r+0x1e>
 8008f84:	42b4      	cmp	r4, r6
 8008f86:	4622      	mov	r2, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	bf28      	it	cs
 8008f8c:	4632      	movcs	r2, r6
 8008f8e:	f7ff fa92 	bl	80084b6 <memcpy>
 8008f92:	4629      	mov	r1, r5
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff fa9d 	bl	80084d4 <_free_r>
 8008f9a:	e7f1      	b.n	8008f80 <_realloc_r+0x40>

08008f9c <_malloc_usable_size_r>:
 8008f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa0:	1f18      	subs	r0, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bfbc      	itt	lt
 8008fa6:	580b      	ldrlt	r3, [r1, r0]
 8008fa8:	18c0      	addlt	r0, r0, r3
 8008faa:	4770      	bx	lr

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
