
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008020  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080081b0  080081b0  000091b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008350  08008350  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008358  08008358  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008358  08008358  00009358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800835c  0800835c  0000935c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008360  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00005f4c  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005fb8  20005fb8  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001973b  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d2  00000000  00000000  000237d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00026eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d4  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004406  00000000  00000000  00029534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175e4  00000000  00000000  0002d93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd19f  00000000  00000000  00044f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001120bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006344  00000000  00000000  00112100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00118444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008198 	.word	0x08008198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008198 	.word	0x08008198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fe94 	bl	80012dc <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 80005b4:	f000 fb4a 	bl	8000c4c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f842 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f94c 	bl	8000858 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f92a 	bl	8000818 <MX_DMA_Init>
  MX_TIM5_Init();
 80005c4:	f000 f8a6 	bl	8000714 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_USART6_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f003 fe4c 	bl	8004268 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, SERIAL_QUEUE_ITEM_SIZE, NULL);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	200a      	movs	r0, #10
 80005d6:	f003 ff3e 	bl	8004456 <osMessageQueueNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x6c>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <main+0x70>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	480e      	ldr	r0, [pc, #56]	@ (8000620 <main+0x74>)
 80005e6:	f003 fe89 	bl	80042fc <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <main+0x78>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <main+0x7c>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <main+0x80>)
 80005f6:	f003 fe81 	bl	80042fc <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <main+0x84>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <main+0x88>)
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x8c>)
 8000606:	f003 fe79 	bl	80042fc <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <main+0x90>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f003 fe4e 	bl	80042b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x68>
 8000618:	20000210 	.word	0x20000210
 800061c:	08008290 	.word	0x08008290
 8000620:	08000cad 	.word	0x08000cad
 8000624:	20000178 	.word	0x20000178
 8000628:	080082b4 	.word	0x080082b4
 800062c:	08000cbd 	.word	0x08000cbd
 8000630:	2000017c 	.word	0x2000017c
 8000634:	080082d8 	.word	0x080082d8
 8000638:	08000d7d 	.word	0x08000d7d
 800063c:	20000180 	.word	0x20000180

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 ffb4 	bl	80075bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	@ 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fc51 	bl	8001f6c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 fb8c 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 feb2 	bl	800245c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 fb75 	bl	8000dec <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_TIM5_Init+0xac>)
 800073a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 70;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800074a:	2246      	movs	r2, #70	@ 0x46
 800074c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800075a:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800075c:	f002 f95a 	bl	8002a14 <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000766:	f000 fb41 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4619      	mov	r1, r3
 8000778:	4810      	ldr	r0, [pc, #64]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800077a:	f003 f895 	bl	80038a8 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 fb32 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000788:	2360      	movs	r3, #96	@ 0x60
 800078a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007a0:	f002 fc40 	bl	8003024 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fb1f 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007b0:	f000 fba2 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	@ 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000088 	.word	0x20000088
 80007c0:	40000c00 	.word	0x40000c00

080007c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART6_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007fc:	f003 f8e4 	bl	80039c8 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 faf1 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000130 	.word	0x20000130
 8000814:	40011400 	.word	0x40011400

08000818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_DMA_Init+0x3c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a0b      	ldr	r2, [pc, #44]	@ (8000854 <MX_DMA_Init+0x3c>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_DMA_Init+0x3c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2105      	movs	r1, #5
 800083e:	200d      	movs	r0, #13
 8000840:	f000 fe46 	bl	80014d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000844:	200d      	movs	r0, #13
 8000846:	f000 fe5f 	bl	8001508 <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_GPIO_Init+0x94>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <MX_GPIO_Init+0x94>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_GPIO_Init+0x94>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_GPIO_Init+0x94>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a1a      	ldr	r2, [pc, #104]	@ (80008ec <MX_GPIO_Init+0x94>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_GPIO_Init+0x94>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_GPIO_Init+0x94>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <MX_GPIO_Init+0x94>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_GPIO_Init+0x94>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1_RX
 80008d2:	2307      	movs	r3, #7
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_GPIO_Init+0x98>)
 80008de:	f001 f991 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <read_telemetry_pin>:

/* USER CODE BEGIN 4 */
static inline uint8_t read_telemetry_pin(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(TELEMETRY_GPIO_PORT, TELEMETRY_PIN) ? 1 : 0;
 80008f8:	2101      	movs	r1, #1
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <read_telemetry_pin+0x1c>)
 80008fc:	f001 fb1e 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000

08000914 <receive_bdshot_telemetry>:

int receive_bdshot_telemetry(uint32_t *telemetry_out) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    uint32_t value = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
    uint32_t bitcount = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]

    // Wait for line to go low (start bit, up to timeout)
    uint32_t timeout = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
    while (read_telemetry_pin()) {
 8000928:	e00b      	b.n	8000942 <receive_bdshot_telemetry+0x2e>
        delay_us_busy(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 f940 	bl	8000bb0 <delay_us_busy>
        if (++timeout > TELEMETRY_TIMEOUT_US) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b32      	cmp	r3, #50	@ 0x32
 800093a:	d902      	bls.n	8000942 <receive_bdshot_telemetry+0x2e>
            return -1; // Timeout waiting for start bit
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	e021      	b.n	8000986 <receive_bdshot_telemetry+0x72>
    while (read_telemetry_pin()) {
 8000942:	f7ff ffd7 	bl	80008f4 <read_telemetry_pin>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1ee      	bne.n	800092a <receive_bdshot_telemetry+0x16>
        }
    }

    // Sample first bit (start, must be 0), ignore storing
    delay_us_busy(TELEMETRY_BIT_US); // Wait to middle of bit
 800094c:	2001      	movs	r0, #1
 800094e:	f000 f92f 	bl	8000bb0 <delay_us_busy>

    // Now sample the next 20 bits (MSB first is standard)
    for (bitcount = 0; bitcount < 20; bitcount++) {
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e00f      	b.n	8000978 <receive_bdshot_telemetry+0x64>
        value <<= 1;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	617b      	str	r3, [r7, #20]
        value |= read_telemetry_pin();
 800095e:	f7ff ffc9 	bl	80008f4 <read_telemetry_pin>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	4313      	orrs	r3, r2
 800096a:	617b      	str	r3, [r7, #20]
        delay_us_busy(TELEMETRY_BIT_US);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 f91f 	bl	8000bb0 <delay_us_busy>
    for (bitcount = 0; bitcount < 20; bitcount++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b13      	cmp	r3, #19
 800097c:	d9ec      	bls.n	8000958 <receive_bdshot_telemetry+0x44>
    }

    *telemetry_out = value;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	601a      	str	r2, [r3, #0]
    return 0; // Success
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <set_pin_input_PA0>:

void set_pin_input_PA0(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a4:	2301      	movs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4619      	mov	r1, r3
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <set_pin_input_PA0+0x34>)
 80009b6:	f001 f925 	bl	8001c04 <HAL_GPIO_Init>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020000 	.word	0x40020000

080009c8 <set_pin_pwm_PA0>:

void set_pin_pwm_PA0(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009dc:	2301      	movs	r3, #1
 80009de:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5; // Alternate function for TIM5 CH1 on PA0
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <set_pin_pwm_PA0+0x3c>)
 80009f6:	f001 f905 	bl	8001c04 <HAL_GPIO_Init>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40020000 	.word	0x40020000

08000a08 <prepare_bdshot_buffer>:


void prepare_bdshot_buffer(uint16_t frame)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

    // 1️⃣ Insert a dummy 0 at the start to absorb the DMA skip
    //dshot_buffer[buffer_index++] = 0;  // Dummy preload entry

    // 2️⃣ Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 8000a16:	230f      	movs	r3, #15
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	e02a      	b.n	8000a72 <prepare_bdshot_buffer+0x6a>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8000a1c:	88fa      	ldrh	r2, [r7, #6]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	fa42 f303 	asr.w	r3, r2, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00e      	beq.n	8000a50 <prepare_bdshot_buffer+0x48>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	617a      	str	r2, [r7, #20]
 8000a38:	4a19      	ldr	r2, [pc, #100]	@ (8000aa0 <prepare_bdshot_buffer+0x98>)
 8000a3a:	2169      	movs	r1, #105	@ 0x69
 8000a3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	617a      	str	r2, [r7, #20]
 8000a46:	4a16      	ldr	r2, [pc, #88]	@ (8000aa0 <prepare_bdshot_buffer+0x98>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a4e:	e00d      	b.n	8000a6c <prepare_bdshot_buffer+0x64>
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	617a      	str	r2, [r7, #20]
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <prepare_bdshot_buffer+0x98>)
 8000a58:	2134      	movs	r1, #52	@ 0x34
 8000a5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	617a      	str	r2, [r7, #20]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <prepare_bdshot_buffer+0x98>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	dad1      	bge.n	8000a1c <prepare_bdshot_buffer+0x14>
        }
    }

    // 3️⃣ Final low pulses (as before)
    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	617a      	str	r2, [r7, #20]
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <prepare_bdshot_buffer+0x98>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    dshot_buffer[buffer_index++] = 0;  // Extra delay
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	617a      	str	r2, [r7, #20]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <prepare_bdshot_buffer+0x98>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a94:	bf00      	nop
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	20000184 	.word	0x20000184

08000aa4 <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4053      	eors	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4053      	eors	r3, r2
 8000ac2:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	460a      	mov	r2, r1
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4613      	mov	r3, r2
 8000af0:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 8000af8:	230f      	movs	r3, #15
 8000afa:	e01b      	b.n	8000b34 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b02:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 8000b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	797b      	ldrb	r3, [r7, #5]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffc3 	bl	8000aa4 <bdshot_crc>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8000b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29b      	uxth	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	80fb      	strh	r3, [r7, #6]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8000b4c:	797a      	ldrb	r2, [r7, #5]
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffc5 	bl	8000ae2 <make_bdshot_frame>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame);
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff52 	bl	8000a08 <prepare_bdshot_buffer>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <send_bdshot>:

void send_bdshot(uint32_t channel){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000b74:	2322      	movs	r3, #34	@ 0x22
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <send_bdshot+0x34>)
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <send_bdshot+0x38>)
 8000b7c:	f001 ff9a 	bl	8002ab4 <HAL_TIM_PWM_Start_DMA>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <send_bdshot+0x24>
    {
        Error_Handler();
 8000b86:	f000 f931 	bl	8000dec <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8000b8a:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <send_bdshot+0x3c>)
 8000b8c:	f006 fc36 	bl	80073fc <puts>
    }
    //printf("%d\r\n",dshot_buffer);
    dshot_running = 1;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <send_bdshot+0x40>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000184 	.word	0x20000184
 8000ba4:	20000088 	.word	0x20000088
 8000ba8:	080081d4 	.word	0x080081d4
 8000bac:	2000020c 	.word	0x2000020c

08000bb0 <delay_us_busy>:

void delay_us_busy(uint32_t us) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <delay_us_busy+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <delay_us_busy+0x44>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	0c9a      	lsrs	r2, r3, #18
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <delay_us_busy+0x48>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000bd2:	bf00      	nop
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <delay_us_busy+0x48>)
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8f8      	bhi.n	8000bd4 <delay_us_busy+0x24>
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	e0001000 	.word	0xe0001000

08000bfc <_write>:
    }
}


int _write(int file, char *ptr, int len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a4      	sub	sp, #144	@ 0x90
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c0c:	dd01      	ble.n	8000c12 <_write+0x16>
 8000c0e:	237f      	movs	r3, #127	@ 0x7f
 8000c10:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f006 fda7 	bl	800776e <memcpy>
    msg[len] = '\0'; // Null-terminate
 8000c20:	f107 0210 	add.w	r2, r7, #16
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <_write+0x4c>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f107 0110 	add.w	r1, r7, #16
 8000c34:	2300      	movs	r3, #0
 8000c36:	2200      	movs	r2, #0
 8000c38:	f003 fc80 	bl	800453c <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3790      	adds	r7, #144	@ 0x90
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000210 	.word	0x20000210

08000c4c <DWT_Init>:

void DWT_Init(void) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <DWT_Init+0x38>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10e      	bne.n	8000c7a <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <DWT_Init+0x3c>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4a09      	ldr	r2, [pc, #36]	@ (8000c88 <DWT_Init+0x3c>)
 8000c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c66:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <DWT_Init+0x38>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <DWT_Init+0x38>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <DWT_Init+0x38>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
    }
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e0001000 	.word	0xe0001000
 8000c88:	e000edf0 	.word	0xe000edf0

08000c8c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    //HAL_UART_Receive_DMA(&huart6, telemetry_buffer, 2);

    // Optionally set a flag
    dshot_running = 0;
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000020c 	.word	0x2000020c

08000cac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f003 fbb3 	bl	8004420 <osDelay>
 8000cba:	e7fb      	b.n	8000cb4 <StartDefaultTask+0x8>

08000cbc <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8000cc4:	4825      	ldr	r0, [pc, #148]	@ (8000d5c <DShotTask+0xa0>)
 8000cc6:	f006 fb99 	bl	80073fc <puts>
	printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
 8000cca:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <DShotTask+0xa4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4824      	ldr	r0, [pc, #144]	@ (8000d64 <DShotTask+0xa8>)
 8000cd2:	f006 fb2b 	bl	800732c <iprintf>


    // Step 1: Send ARM command (value 0)
	printf("Arming.\r\n");
 8000cd6:	4824      	ldr	r0, [pc, #144]	@ (8000d68 <DShotTask+0xac>)
 8000cd8:	f006 fb90 	bl	80073fc <puts>
	queue_bdshot_pulse(0, false);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff2c 	bl	8000b3c <queue_bdshot_pulse>
	for (int i = 0; i > -1; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e008      	b.n	8000cfc <DShotTask+0x40>
		send_bdshot(TIM_CHANNEL_1);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ff3e 	bl	8000b6c <send_bdshot>
		vTaskDelay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f004 fd3f 	bl	8005774 <vTaskDelay>
	for (int i = 0; i > -1; i++){
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	daf3      	bge.n	8000cea <DShotTask+0x2e>
	}
	printf("Done arming!\r\n");
 8000d02:	481a      	ldr	r0, [pc, #104]	@ (8000d6c <DShotTask+0xb0>)
 8000d04:	f006 fb7a 	bl	80073fc <puts>
    vTaskDelay(300);  // Wait 300ms (Bluejay requires for arming)
 8000d08:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d0c:	f004 fd32 	bl	8005774 <vTaskDelay>

    //Approximately 84 ticks in 1 microsecond (Timer Clock = 84 MHz)
    printf("Throttling.\r\n");
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <DShotTask+0xb4>)
 8000d12:	f006 fb73 	bl	80073fc <puts>
    queue_bdshot_pulse(200, true);
 8000d16:	2101      	movs	r1, #1
 8000d18:	20c8      	movs	r0, #200	@ 0xc8
 8000d1a:	f7ff ff0f 	bl	8000b3c <queue_bdshot_pulse>
    uint32_t telemetry;
    for (;;){
      send_bdshot(TIM_CHANNEL_1);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff24 	bl	8000b6c <send_bdshot>
      delay_us_busy(30);
 8000d24:	201e      	movs	r0, #30
 8000d26:	f7ff ff43 	bl	8000bb0 <delay_us_busy>
      set_pin_input_PA0();
 8000d2a:	f7ff fe31 	bl	8000990 <set_pin_input_PA0>
      if (receive_bdshot_telemetry(&telemetry) == 0) {
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fdee 	bl	8000914 <receive_bdshot_telemetry>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <DShotTask+0x8e>
    	  printf("Telemetry: 0x%05lX\r\n", telemetry); // 5 hex digits (20 bits), upper-case
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <DShotTask+0xb8>)
 8000d44:	f006 faf2 	bl	800732c <iprintf>
 8000d48:	e002      	b.n	8000d50 <DShotTask+0x94>
      } else {
          printf("error reading telemetry\r\n");
 8000d4a:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <DShotTask+0xbc>)
 8000d4c:	f006 fb56 	bl	80073fc <puts>
      }
      set_pin_pwm_PA0();
 8000d50:	f7ff fe3a 	bl	80009c8 <set_pin_pwm_PA0>
      vTaskDelay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f004 fd0d 	bl	8005774 <vTaskDelay>
      send_bdshot(TIM_CHANNEL_1);
 8000d5a:	e7e0      	b.n	8000d1e <DShotTask+0x62>
 8000d5c:	080081ec 	.word	0x080081ec
 8000d60:	20000000 	.word	0x20000000
 8000d64:	08008200 	.word	0x08008200
 8000d68:	08008218 	.word	0x08008218
 8000d6c:	08008224 	.word	0x08008224
 8000d70:	08008234 	.word	0x08008234
 8000d74:	08008244 	.word	0x08008244
 8000d78:	0800825c 	.word	0x0800825c

08000d7c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0a2      	sub	sp, #136	@ 0x88
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  char msg[SERIAL_QUEUE_ITEM_SIZE];

  for (;;)
  {
      // 1️⃣ Process serial debug messages
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <StartSerialTask+0x44>)
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	f107 0108 	add.w	r1, r7, #8
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f003 fc34 	bl	80045fc <osMessageQueueGet>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10d      	bne.n	8000db6 <StartSerialTask+0x3a>
      {
          HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fa16 	bl	80001d0 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f107 0108 	add.w	r1, r7, #8
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <StartSerialTask+0x48>)
 8000db2:	f002 fe59 	bl	8003a68 <HAL_UART_Transmit>
      }

      osDelay(1); // Let other tasks run
 8000db6:	2001      	movs	r0, #1
 8000db8:	f003 fb32 	bl	8004420 <osDelay>
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000dbc:	e7e2      	b.n	8000d84 <StartSerialTask+0x8>
 8000dbe:	bf00      	nop
 8000dc0:	20000210 	.word	0x20000210
 8000dc4:	20000130 	.word	0x20000130

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dda:	f000 faa1 	bl	8001320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40001c00 	.word	0x40001c00

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <Error_Handler+0x8>

08000df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2a:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	210f      	movs	r1, #15
 8000e3a:	f06f 0001 	mvn.w	r0, #1
 8000e3e:	f000 fb47 	bl	80014d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ee8 <HAL_TIM_PWM_MspInit+0x98>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d13e      	bne.n	8000ee0 <HAL_TIM_PWM_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <HAL_TIM_PWM_MspInit+0x9c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a20      	ldr	r2, [pc, #128]	@ (8000eec <HAL_TIM_PWM_MspInit+0x9c>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <HAL_TIM_PWM_MspInit+0x9c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000e80:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <HAL_TIM_PWM_MspInit+0xa4>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000e86:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000e8e:	2240      	movs	r2, #64	@ 0x40
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000ea2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ea6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000eaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eae:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000eb8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ebc:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000ec4:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000ec6:	f000 fb2d 	bl	8001524 <HAL_DMA_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000ed0:	f7ff ff8c 	bl	8000dec <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40000c00 	.word	0x40000c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	200000d0 	.word	0x200000d0
 8000ef4:	40026040 	.word	0x40026040

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_TIM_MspPostInit+0x68>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d11d      	bne.n	8000f56 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_TIM_MspPostInit+0x6c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_TIM_MspPostInit+0x70>)
 8000f52:	f000 fe57 	bl	8001c04 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40000c00 	.word	0x40000c00
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_UART_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc6:	23c0      	movs	r3, #192	@ 0xc0
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_UART_MspInit+0x8c>)
 8000fe2:	f000 fe0f 	bl	8001c04 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40011400 	.word	0x40011400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020800 	.word	0x40020800

08000ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	@ 0x38
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_InitTick+0xe4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a32      	ldr	r2, [pc, #200]	@ (80010e0 <HAL_InitTick+0xe4>)
 8001016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <HAL_InitTick+0xe4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001028:	f107 0210 	add.w	r2, r7, #16
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fbf2 	bl	800281c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800103c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001042:	f001 fbc3 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8001046:	6378      	str	r0, [r7, #52]	@ 0x34
 8001048:	e004      	b.n	8001054 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800104a:	f001 fbbf 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 800104e:	4603      	mov	r3, r0
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001056:	4a23      	ldr	r2, [pc, #140]	@ (80010e4 <HAL_InitTick+0xe8>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	0c9b      	lsrs	r3, r3, #18
 800105e:	3b01      	subs	r3, #1
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_InitTick+0xec>)
 8001064:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <HAL_InitTick+0xf0>)
 8001066:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001068:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <HAL_InitTick+0xec>)
 800106a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800106e:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001070:	4a1d      	ldr	r2, [pc, #116]	@ (80010e8 <HAL_InitTick+0xec>)
 8001072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001074:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_InitTick+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_InitTick+0xec>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_InitTick+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 8001088:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <HAL_InitTick+0xec>)
 800108a:	f001 fbf9 	bl	8002880 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11b      	bne.n	80010d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 800109c:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <HAL_InitTick+0xec>)
 800109e:	f001 fc49 	bl	8002934 <HAL_TIM_Base_Start_IT>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d111      	bne.n	80010d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80010b0:	202c      	movs	r0, #44	@ 0x2c
 80010b2:	f000 fa29 	bl	8001508 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d808      	bhi.n	80010ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	202c      	movs	r0, #44	@ 0x2c
 80010c2:	f000 fa05 	bl	80014d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <HAL_InitTick+0xf4>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e002      	b.n	80010d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3738      	adds	r7, #56	@ 0x38
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	431bde83 	.word	0x431bde83
 80010e8:	20000214 	.word	0x20000214
 80010ec:	40001c00 	.word	0x40001c00
 80010f0:	20000004 	.word	0x20000004

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <NMI_Handler+0x4>

080010fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <MemManage_Handler+0x4>

0800110c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <UsageFault_Handler+0x4>

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8001130:	4802      	ldr	r0, [pc, #8]	@ (800113c <DMA1_Stream2_IRQHandler+0x10>)
 8001132:	f000 fafd 	bl	8001730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000d0 	.word	0x200000d0

08001140 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001146:	f001 fe7d 	bl	8002e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000214 	.word	0x20000214

08001154 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e00a      	b.n	800117c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001166:	f3af 8000 	nop.w
 800116a:	4601      	mov	r1, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbf0      	blt.n	8001166 <_read+0x12>
  }

  return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_close>:

int _close(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b6:	605a      	str	r2, [r3, #4]
  return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_isatty>:

int _isatty(int file)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f006 fa74 	bl	8007714 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20020000 	.word	0x20020000
 8001258:	00000400 	.word	0x00000400
 800125c:	2000025c 	.word	0x2000025c
 8001260:	20005fb8 	.word	0x20005fb8

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800128c:	f7ff ffea 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f006 fa33 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff f977 	bl	80005ac <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012cc:	08008360 	.word	0x08008360
  ldr r2, =_sbss
 80012d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012d4:	20005fb8 	.word	0x20005fb8

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f8d8 	bl	80014ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	200f      	movs	r0, #15
 800130c:	f7ff fe76 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fd72 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000260 	.word	0x20000260

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000260 	.word	0x20000260

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	@ (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff4c 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e2:	f7ff ff61 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff ffb1 	bl	8001454 <NVIC_EncodePriority>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff80 	bl	8001400 <__NVIC_SetPriority>
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff54 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ff0a 	bl	8001348 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e099      	b.n	8001674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001560:	e00f      	b.n	8001582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001562:	f7ff fef1 	bl	8001348 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b05      	cmp	r3, #5
 800156e:	d908      	bls.n	8001582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e078      	b.n	8001674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e8      	bne.n	8001562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <HAL_DMA_Init+0x158>)
 800159c:	4013      	ands	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d107      	bne.n	80015ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	4313      	orrs	r3, r2
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f023 0307 	bic.w	r3, r3, #7
 8001602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	2b04      	cmp	r3, #4
 8001614:	d117      	bne.n	8001646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fa6f 	bl	8001b0c <DMA_CheckFifoParam>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2240      	movs	r2, #64	@ 0x40
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001642:	2301      	movs	r3, #1
 8001644:	e016      	b.n	8001674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fa26 	bl	8001aa0 <DMA_CalcBaseAndBitshift>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	223f      	movs	r2, #63	@ 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	f010803f 	.word	0xf010803f

08001680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_DMA_Start_IT+0x26>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e040      	b.n	8001728 <HAL_DMA_Start_IT+0xa8>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d12f      	bne.n	800171a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2202      	movs	r2, #2
 80016be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f9b8 	bl	8001a44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d8:	223f      	movs	r2, #63	@ 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0216 	orr.w	r2, r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0208 	orr.w	r2, r2, #8
 8001706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e005      	b.n	8001726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001722:	2302      	movs	r3, #2
 8001724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001726:	7dfb      	ldrb	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800173c:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <HAL_DMA_IRQHandler+0x248>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a8e      	ldr	r2, [pc, #568]	@ (800197c <HAL_DMA_IRQHandler+0x24c>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0a9b      	lsrs	r3, r3, #10
 8001748:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175a:	2208      	movs	r2, #8
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01a      	beq.n	800179c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0204 	bic.w	r2, r2, #4
 8001782:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001788:	2208      	movs	r2, #8
 800178a:	409a      	lsls	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2201      	movs	r2, #1
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d012      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	2201      	movs	r2, #1
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	2204      	movs	r2, #4
 80017d8:	409a      	lsls	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d012      	beq.n	8001808 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f4:	2204      	movs	r2, #4
 80017f6:	409a      	lsls	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001800:	f043 0204 	orr.w	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	2210      	movs	r2, #16
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d043      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03c      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182a:	2210      	movs	r2, #16
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d018      	beq.n	8001872 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
 800185e:	e01f      	b.n	80018a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01b      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
 8001870:	e016      	b.n	80018a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d107      	bne.n	8001890 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0208 	bic.w	r2, r2, #8
 800188e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a4:	2220      	movs	r2, #32
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 808f 	beq.w	80019d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8087 	beq.w	80019d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c6:	2220      	movs	r2, #32
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d136      	bne.n	8001948 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0216 	bic.w	r2, r2, #22
 80018e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <HAL_DMA_IRQHandler+0x1da>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0208 	bic.w	r2, r2, #8
 8001918:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191e:	223f      	movs	r2, #63	@ 0x3f
 8001920:	409a      	lsls	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193a:	2b00      	cmp	r3, #0
 800193c:	d07e      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
        }
        return;
 8001946:	e079      	b.n	8001a3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01d      	beq.n	8001992 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	2b00      	cmp	r3, #0
 800196a:	d031      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
 8001974:	e02c      	b.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000
 800197c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
 8001990:	e01e      	b.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0210 	bic.w	r2, r2, #16
 80019ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d032      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2205      	movs	r2, #5
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d307      	bcc.n	8001a18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f2      	bne.n	80019fc <HAL_DMA_IRQHandler+0x2cc>
 8001a16:	e000      	b.n	8001a1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
 8001a3a:	e000      	b.n	8001a3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a3c:	bf00      	nop
    }
  }
}
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b40      	cmp	r3, #64	@ 0x40
 8001a70:	d108      	bne.n	8001a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a82:	e007      	b.n	8001a94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	60da      	str	r2, [r3, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3b10      	subs	r3, #16
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <DMA_CalcBaseAndBitshift+0x64>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aba:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <DMA_CalcBaseAndBitshift+0x68>)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d909      	bls.n	8001ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	1d1a      	adds	r2, r3, #4
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ae0:	e007      	b.n	8001af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	aaaaaaab 	.word	0xaaaaaaab
 8001b08:	08008314 	.word	0x08008314

08001b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11f      	bne.n	8001b66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d856      	bhi.n	8001bda <DMA_CheckFifoParam+0xce>
 8001b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b34 <DMA_CheckFifoParam+0x28>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b45 	.word	0x08001b45
 8001b38:	08001b57 	.word	0x08001b57
 8001b3c:	08001b45 	.word	0x08001b45
 8001b40:	08001bdb 	.word	0x08001bdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d046      	beq.n	8001bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b54:	e043      	b.n	8001bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b5e:	d140      	bne.n	8001be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b64:	e03d      	b.n	8001be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b6e:	d121      	bne.n	8001bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d837      	bhi.n	8001be6 <DMA_CheckFifoParam+0xda>
 8001b76:	a201      	add	r2, pc, #4	@ (adr r2, 8001b7c <DMA_CheckFifoParam+0x70>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001b93 	.word	0x08001b93
 8001b84:	08001b8d 	.word	0x08001b8d
 8001b88:	08001ba5 	.word	0x08001ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b90:	e030      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d025      	beq.n	8001bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba2:	e022      	b.n	8001bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bac:	d11f      	bne.n	8001bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bb2:	e01c      	b.n	8001bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d903      	bls.n	8001bc2 <DMA_CheckFifoParam+0xb6>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d003      	beq.n	8001bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bc0:	e018      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc6:	e015      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e00b      	b.n	8001bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e00a      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
 8001be0:	e008      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001be2:	bf00      	nop
 8001be4:	e006      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
 8001be8:	e004      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bea:	bf00      	nop
 8001bec:	e002      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bee:	bf00      	nop
 8001bf0:	e000      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e16b      	b.n	8001ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 815a 	bne.w	8001ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d130      	bne.n	8001cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 0201 	and.w	r2, r3, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d017      	beq.n	8001cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d123      	bne.n	8001d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80b4 	beq.w	8001ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b60      	ldr	r3, [pc, #384]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a5f      	ldr	r2, [pc, #380]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f14 <HAL_GPIO_Init+0x310>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_GPIO_Init+0x314>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a51      	ldr	r2, [pc, #324]	@ (8001f1c <HAL_GPIO_Init+0x318>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a50      	ldr	r2, [pc, #320]	@ (8001f20 <HAL_GPIO_Init+0x31c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f24 <HAL_GPIO_Init+0x320>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4e      	ldr	r2, [pc, #312]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f2c <HAL_GPIO_Init+0x328>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f30 <HAL_GPIO_Init+0x32c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	@ (8001f34 <HAL_GPIO_Init+0x330>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x20a>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00e      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e0e:	2308      	movs	r3, #8
 8001e10:	e00c      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00a      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3c:	4935      	ldr	r1, [pc, #212]	@ (8001f14 <HAL_GPIO_Init+0x310>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6e:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e98:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eec:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f ae90 	bls.w	8001c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3724      	adds	r7, #36	@ 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40021c00 	.word	0x40021c00
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e267      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d075      	beq.n	8002076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f8a:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d00c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f96:	4b85      	ldr	r3, [pc, #532]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d112      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa2:	4b82      	ldr	r3, [pc, #520]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d05b      	beq.n	8002074 <HAL_RCC_OscConfig+0x108>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d157      	bne.n	8002074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e242      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x74>
 8001fd2:	4b76      	ldr	r3, [pc, #472]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a75      	ldr	r2, [pc, #468]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xb0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6f      	ldr	r2, [pc, #444]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6c      	ldr	r2, [pc, #432]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xb0>
 8002004:	4b69      	ldr	r3, [pc, #420]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a68      	ldr	r2, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a65      	ldr	r2, [pc, #404]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff f990 	bl	8001348 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f98c 	bl	8001348 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e207      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b5b      	ldr	r3, [pc, #364]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xc0>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f97c 	bl	8001348 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f978 	bl	8001348 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1f3      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b51      	ldr	r3, [pc, #324]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0xe8>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002082:	4b4a      	ldr	r3, [pc, #296]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208e:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b44      	ldr	r3, [pc, #272]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x152>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1c7      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4937      	ldr	r1, [pc, #220]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e03a      	b.n	800214a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b34      	ldr	r3, [pc, #208]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f931 	bl	8001348 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f92d 	bl	8001348 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1a8      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4925      	ldr	r1, [pc, #148]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f910 	bl	8001348 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f90c 	bl	8001348 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e187      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d036      	beq.n	80021c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_RCC_OscConfig+0x248>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff f8f0 	bl	8001348 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff f8ec 	bl	8001348 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e167      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_RCC_OscConfig+0x240>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x200>
 800218a:	e01b      	b.n	80021c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_RCC_OscConfig+0x248>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f8d9 	bl	8001348 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	e00e      	b.n	80021b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219a:	f7ff f8d5 	bl	8001348 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d907      	bls.n	80021b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e150      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
 80021ac:	40023800 	.word	0x40023800
 80021b0:	42470000 	.word	0x42470000
 80021b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ea      	bne.n	800219a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8097 	beq.w	8002300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b81      	ldr	r3, [pc, #516]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b7d      	ldr	r3, [pc, #500]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a7c      	ldr	r2, [pc, #496]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b7a      	ldr	r3, [pc, #488]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b77      	ldr	r3, [pc, #476]	@ (80023e0 <HAL_RCC_OscConfig+0x474>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d118      	bne.n	8002240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220e:	4b74      	ldr	r3, [pc, #464]	@ (80023e0 <HAL_RCC_OscConfig+0x474>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a73      	ldr	r2, [pc, #460]	@ (80023e0 <HAL_RCC_OscConfig+0x474>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221a:	f7ff f895 	bl	8001348 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002222:	f7ff f891 	bl	8001348 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e10c      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b6a      	ldr	r3, [pc, #424]	@ (80023e0 <HAL_RCC_OscConfig+0x474>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x2ea>
 8002248:	4b64      	ldr	r3, [pc, #400]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	4a63      	ldr	r2, [pc, #396]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	@ 0x70
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x324>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x30c>
 800225e:	4b5f      	ldr	r3, [pc, #380]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002262:	4a5e      	ldr	r2, [pc, #376]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6713      	str	r3, [r2, #112]	@ 0x70
 800226a:	4b5c      	ldr	r3, [pc, #368]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226e:	4a5b      	ldr	r2, [pc, #364]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6713      	str	r3, [r2, #112]	@ 0x70
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0x324>
 8002278:	4b58      	ldr	r3, [pc, #352]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	4a57      	ldr	r2, [pc, #348]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	@ 0x70
 8002284:	4b55      	ldr	r3, [pc, #340]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002288:	4a54      	ldr	r2, [pc, #336]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f856 	bl	8001348 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7ff f852 	bl	8001348 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0cb      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	4b49      	ldr	r3, [pc, #292]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0ee      	beq.n	80022a0 <HAL_RCC_OscConfig+0x334>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7ff f840 	bl	8001348 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7ff f83c 	bl	8001348 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0b5      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e2:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ee      	bne.n	80022cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b39      	ldr	r3, [pc, #228]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80022fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a1 	beq.w	800244c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230a:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d05c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d141      	bne.n	80023a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <HAL_RCC_OscConfig+0x478>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff f810 	bl	8001348 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f80c 	bl	8001348 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e087      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	491b      	ldr	r1, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_RCC_OscConfig+0x478>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe ffe5 	bl	8001348 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe ffe1 	bl	8001348 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e05c      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x416>
 80023a0:	e054      	b.n	800244c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_RCC_OscConfig+0x478>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe ffce 	bl	8001348 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe ffca 	bl	8001348 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e045      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_RCC_OscConfig+0x470>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
 80023ce:	e03d      	b.n	800244c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e038      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40007000 	.word	0x40007000
 80023e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_RCC_OscConfig+0x4ec>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d028      	beq.n	8002448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d121      	bne.n	8002448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d11a      	bne.n	8002448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800241e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002420:	4293      	cmp	r3, r2
 8002422:	d111      	bne.n	8002448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d107      	bne.n	8002448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0cc      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b68      	ldr	r3, [pc, #416]	@ (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d90c      	bls.n	8002498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b65      	ldr	r3, [pc, #404]	@ (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a58      	ldr	r2, [pc, #352]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d044      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d119      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d003      	beq.n	800251a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e067      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4934      	ldr	r1, [pc, #208]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe fefc 	bl	8001348 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fef8 	bl	8001348 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e04f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d20c      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f821 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fcfa 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00
 8002618:	40023800 	.word	0x40023800
 800261c:	080082fc 	.word	0x080082fc
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800262c:	b090      	sub	sp, #64	@ 0x40
 800262e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002640:	4b59      	ldr	r3, [pc, #356]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d00d      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x40>
 800264c:	2b08      	cmp	r3, #8
 800264e:	f200 80a1 	bhi.w	8002794 <HAL_RCC_GetSysClockFreq+0x16c>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x34>
 8002656:	2b04      	cmp	r3, #4
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x3a>
 800265a:	e09b      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x184>)
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002660:	e09b      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002662:	4b53      	ldr	r3, [pc, #332]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002664:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002666:	e098      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002668:	4b4f      	ldr	r3, [pc, #316]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002672:	4b4d      	ldr	r3, [pc, #308]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d028      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267e:	4b4a      	ldr	r3, [pc, #296]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	2200      	movs	r2, #0
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	627a      	str	r2, [r7, #36]	@ 0x24
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002690:	2100      	movs	r1, #0
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002694:	fb03 f201 	mul.w	r2, r3, r1
 8002698:	2300      	movs	r3, #0
 800269a:	fb00 f303 	mul.w	r3, r0, r3
 800269e:	4413      	add	r3, r2
 80026a0:	4a43      	ldr	r2, [pc, #268]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026a2:	fba0 1202 	umull	r1, r2, r0, r2
 80026a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026a8:	460a      	mov	r2, r1
 80026aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ae:	4413      	add	r3, r2
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b4:	2200      	movs	r2, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	61fa      	str	r2, [r7, #28]
 80026ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026c2:	f7fd fddd 	bl	8000280 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4613      	mov	r3, r2
 80026cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ce:	e053      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d0:	4b35      	ldr	r3, [pc, #212]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	2200      	movs	r2, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	617a      	str	r2, [r7, #20]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026e2:	f04f 0b00 	mov.w	fp, #0
 80026e6:	4652      	mov	r2, sl
 80026e8:	465b      	mov	r3, fp
 80026ea:	f04f 0000 	mov.w	r0, #0
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	0159      	lsls	r1, r3, #5
 80026f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f8:	0150      	lsls	r0, r2, #5
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002702:	eb63 090b 	sbc.w	r9, r3, fp
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800271a:	ebb2 0408 	subs.w	r4, r2, r8
 800271e:	eb63 0509 	sbc.w	r5, r3, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	00eb      	lsls	r3, r5, #3
 800272c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002730:	00e2      	lsls	r2, r4, #3
 8002732:	4614      	mov	r4, r2
 8002734:	461d      	mov	r5, r3
 8002736:	eb14 030a 	adds.w	r3, r4, sl
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	eb45 030b 	adc.w	r3, r5, fp
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274e:	4629      	mov	r1, r5
 8002750:	028b      	lsls	r3, r1, #10
 8002752:	4621      	mov	r1, r4
 8002754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002758:	4621      	mov	r1, r4
 800275a:	028a      	lsls	r2, r1, #10
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002762:	2200      	movs	r2, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	60fa      	str	r2, [r7, #12]
 8002768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800276c:	f7fd fd88 	bl	8000280 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4613      	mov	r3, r2
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002788:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002796:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800279c:	4618      	mov	r0, r3
 800279e:	3740      	adds	r7, #64	@ 0x40
 80027a0:	46bd      	mov	sp, r7
 80027a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	00b71b00 	.word	0x00b71b00

080027b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	@ (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	0800830c 	.word	0x0800830c

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffdc 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	0800830c 	.word	0x0800830c

0800281c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	220f      	movs	r2, #15
 800282a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_GetClockConfig+0x5c>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_RCC_GetClockConfig+0x60>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e041      	b.n	8002916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f839 	bl	800291e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 fd76 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04e      	b.n	80029ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a23      	ldr	r2, [pc, #140]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d022      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002976:	d01d      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_TIM_Base_Start_IT+0xc8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d018      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00e      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x80>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d010      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	e007      	b.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40010400 	.word	0x40010400
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40001800 	.word	0x40001800

08002a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e041      	b.n	8002aaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fa08 	bl	8000e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f000 fcac 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e022      	b.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d109      	bne.n	8002afa <HAL_TIM_PWM_Start_DMA+0x46>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e015      	b.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x72>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d109      	bne.n	8002b14 <HAL_TIM_PWM_Start_DMA+0x60>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e008      	b.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x72>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e171      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_TIM_PWM_Start_DMA+0x94>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e022      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0xda>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d109      	bne.n	8002b62 <HAL_TIM_PWM_Start_DMA+0xae>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	e015      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0xda>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d109      	bne.n	8002b7c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e008      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0xda>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d024      	beq.n	8002bdc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_TIM_PWM_Start_DMA+0xea>
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e137      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bb0:	e016      	b.n	8002be0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc0:	e00e      	b.n	8002be0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd0:	e006      	b.n	8002be0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bda:	e001      	b.n	8002be0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e118      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	f200 80ae 	bhi.w	8002d44 <HAL_TIM_PWM_Start_DMA+0x290>
 8002be8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c25 	.word	0x08002c25
 8002bf4:	08002d45 	.word	0x08002d45
 8002bf8:	08002d45 	.word	0x08002d45
 8002bfc:	08002d45 	.word	0x08002d45
 8002c00:	08002c6d 	.word	0x08002c6d
 8002c04:	08002d45 	.word	0x08002d45
 8002c08:	08002d45 	.word	0x08002d45
 8002c0c:	08002d45 	.word	0x08002d45
 8002c10:	08002cb5 	.word	0x08002cb5
 8002c14:	08002d45 	.word	0x08002d45
 8002c18:	08002d45 	.word	0x08002d45
 8002c1c:	08002d45 	.word	0x08002d45
 8002c20:	08002cfd 	.word	0x08002cfd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	4a7c      	ldr	r2, [pc, #496]	@ (8002e1c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	4a7b      	ldr	r2, [pc, #492]	@ (8002e20 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	4a7a      	ldr	r2, [pc, #488]	@ (8002e24 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002c3a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3334      	adds	r3, #52	@ 0x34
 8002c48:	461a      	mov	r2, r3
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	f7fe fd18 	bl	8001680 <HAL_DMA_Start_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0db      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c68:	60da      	str	r2, [r3, #12]
      break;
 8002c6a:	e06e      	b.n	8002d4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	4a6a      	ldr	r2, [pc, #424]	@ (8002e1c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002c72:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	4a69      	ldr	r2, [pc, #420]	@ (8002e20 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	4a68      	ldr	r2, [pc, #416]	@ (8002e24 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002c82:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3338      	adds	r3, #56	@ 0x38
 8002c90:	461a      	mov	r2, r3
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	f7fe fcf4 	bl	8001680 <HAL_DMA_Start_IT>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0b7      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cb0:	60da      	str	r2, [r3, #12]
      break;
 8002cb2:	e04a      	b.n	8002d4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002cba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4a57      	ldr	r2, [pc, #348]	@ (8002e20 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	4a56      	ldr	r2, [pc, #344]	@ (8002e24 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002cca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	333c      	adds	r3, #60	@ 0x3c
 8002cd8:	461a      	mov	r2, r3
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	f7fe fcd0 	bl	8001680 <HAL_DMA_Start_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e093      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cf8:	60da      	str	r2, [r3, #12]
      break;
 8002cfa:	e026      	b.n	8002d4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	4a46      	ldr	r2, [pc, #280]	@ (8002e1c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	4a45      	ldr	r2, [pc, #276]	@ (8002e20 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4a44      	ldr	r2, [pc, #272]	@ (8002e24 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002d12:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3340      	adds	r3, #64	@ 0x40
 8002d20:	461a      	mov	r2, r3
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	f7fe fcac 	bl	8001680 <HAL_DMA_Start_IT>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06f      	b.n	8002e12 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d40:	60da      	str	r2, [r3, #12]
      break;
 8002d42:	e002      	b.n	8002d4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	75fb      	strb	r3, [r7, #23]
      break;
 8002d48:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d15f      	bne.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2201      	movs	r2, #1
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fd7f 	bl	800385c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a31      	ldr	r2, [pc, #196]	@ (8002e28 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <HAL_TIM_PWM_Start_DMA+0x378>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d022      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9e:	d01d      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d018      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <HAL_TIM_PWM_Start_DMA+0x380>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d013      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <HAL_TIM_PWM_Start_DMA+0x384>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00e      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e2c <HAL_TIM_PWM_Start_DMA+0x378>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d009      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <HAL_TIM_PWM_Start_DMA+0x388>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x328>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e40 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d111      	bne.n	8002e00 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d010      	beq.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfe:	e007      	b.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	0800329f 	.word	0x0800329f
 8002e20:	08003347 	.word	0x08003347
 8002e24:	0800320d 	.word	0x0800320d
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40010400 	.word	0x40010400
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	40001800 	.word	0x40001800

08002e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d020      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01b      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0202 	mvn.w	r2, #2
 8002e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f994 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f986 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fd fef5 	bl	8000c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d020      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0204 	mvn.w	r2, #4
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f96e 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f960 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd fecf 	bl	8000c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d020      	beq.n	8002f40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0208 	mvn.w	r2, #8
 8002f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2204      	movs	r2, #4
 8002f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f948 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f93a 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fd fea9 	bl	8000c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0210 	mvn.w	r2, #16
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f922 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f914 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd fe83 	bl	8000c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0201 	mvn.w	r2, #1
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd ff0c 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fcf0 	bl	80039b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8f6 	bl	80031e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00c      	beq.n	800301c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0220 	mvn.w	r2, #32
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fcc2 	bl	80039a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ae      	b.n	80031a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	f200 809f 	bhi.w	8003190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003052:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800308d 	.word	0x0800308d
 800305c:	08003191 	.word	0x08003191
 8003060:	08003191 	.word	0x08003191
 8003064:	08003191 	.word	0x08003191
 8003068:	080030cd 	.word	0x080030cd
 800306c:	08003191 	.word	0x08003191
 8003070:	08003191 	.word	0x08003191
 8003074:	08003191 	.word	0x08003191
 8003078:	0800310f 	.word	0x0800310f
 800307c:	08003191 	.word	0x08003191
 8003080:	08003191 	.word	0x08003191
 8003084:	08003191 	.word	0x08003191
 8003088:	0800314f 	.word	0x0800314f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fa32 	bl	80034fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	619a      	str	r2, [r3, #24]
      break;
 80030ca:	e064      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa82 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	619a      	str	r2, [r3, #24]
      break;
 800310c:	e043      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fad7 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0204 	bic.w	r2, r2, #4
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
      break;
 800314c:	e023      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fb2b 	bl	80037b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	61da      	str	r2, [r3, #28]
      break;
 800318e:	e002      	b.n	8003196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003232:	e02a      	b.n	800328a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d107      	bne.n	800324e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800324c:	e01d      	b.n	800328a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d107      	bne.n	8003268 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2204      	movs	r2, #4
 800325c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003266:	e010      	b.n	800328a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d107      	bne.n	8003282 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2208      	movs	r2, #8
 8003276:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003280:	e003      	b.n	800328a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff ffb4 	bl	80031f8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	771a      	strb	r2, [r3, #28]
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d10b      	bne.n	80032ce <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d136      	bne.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032cc:	e031      	b.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d10b      	bne.n	80032f0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2202      	movs	r2, #2
 80032dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d125      	bne.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032ee:	e020      	b.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10b      	bne.n	8003312 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2204      	movs	r2, #4
 80032fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d114      	bne.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003310:	e00f      	b.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d10a      	bne.n	8003332 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2208      	movs	r2, #8
 8003320:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7fd fcaa 	bl	8000c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	771a      	strb	r2, [r3, #28]
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d103      	bne.n	8003366 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]
 8003364:	e019      	b.n	800339a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	d103      	bne.n	8003378 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2202      	movs	r2, #2
 8003374:	771a      	strb	r2, [r3, #28]
 8003376:	e010      	b.n	800339a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	d103      	bne.n	800338a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2204      	movs	r2, #4
 8003386:	771a      	strb	r2, [r3, #28]
 8003388:	e007      	b.n	800339a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d102      	bne.n	800339a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2208      	movs	r2, #8
 8003398:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff ff18 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	771a      	strb	r2, [r3, #28]
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a43      	ldr	r2, [pc, #268]	@ (80034d0 <TIM_Base_SetConfig+0x120>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a40      	ldr	r2, [pc, #256]	@ (80034d4 <TIM_Base_SetConfig+0x124>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3f      	ldr	r2, [pc, #252]	@ (80034d8 <TIM_Base_SetConfig+0x128>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3e      	ldr	r2, [pc, #248]	@ (80034dc <TIM_Base_SetConfig+0x12c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3d      	ldr	r2, [pc, #244]	@ (80034e0 <TIM_Base_SetConfig+0x130>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a32      	ldr	r2, [pc, #200]	@ (80034d0 <TIM_Base_SetConfig+0x120>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003410:	d027      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2f      	ldr	r2, [pc, #188]	@ (80034d4 <TIM_Base_SetConfig+0x124>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d023      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2e      	ldr	r2, [pc, #184]	@ (80034d8 <TIM_Base_SetConfig+0x128>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2d      	ldr	r2, [pc, #180]	@ (80034dc <TIM_Base_SetConfig+0x12c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2c      	ldr	r2, [pc, #176]	@ (80034e0 <TIM_Base_SetConfig+0x130>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2b      	ldr	r2, [pc, #172]	@ (80034e4 <TIM_Base_SetConfig+0x134>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2a      	ldr	r2, [pc, #168]	@ (80034e8 <TIM_Base_SetConfig+0x138>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a29      	ldr	r2, [pc, #164]	@ (80034ec <TIM_Base_SetConfig+0x13c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a28      	ldr	r2, [pc, #160]	@ (80034f0 <TIM_Base_SetConfig+0x140>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <TIM_Base_SetConfig+0x144>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a26      	ldr	r2, [pc, #152]	@ (80034f8 <TIM_Base_SetConfig+0x148>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <TIM_Base_SetConfig+0x120>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <TIM_Base_SetConfig+0xf2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <TIM_Base_SetConfig+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d103      	bne.n	80034aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f043 0204 	orr.w	r2, r3, #4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	40001800 	.word	0x40001800
 80034f4:	40001c00 	.word	0x40001c00
 80034f8:	40002000 	.word	0x40002000

080034fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f023 0201 	bic.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 0302 	bic.w	r3, r3, #2
 8003544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <TIM_OC1_SetConfig+0xd8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC1_SetConfig+0x64>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1f      	ldr	r2, [pc, #124]	@ (80035d8 <TIM_OC1_SetConfig+0xdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0308 	bic.w	r3, r3, #8
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <TIM_OC1_SetConfig+0xd8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_OC1_SetConfig+0x8e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <TIM_OC1_SetConfig+0xdc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d111      	bne.n	80035ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010400 	.word	0x40010400

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 0210 	bic.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0320 	bic.w	r3, r3, #32
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a22      	ldr	r2, [pc, #136]	@ (80036c0 <TIM_OC2_SetConfig+0xe4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC2_SetConfig+0x68>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <TIM_OC2_SetConfig+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10d      	bne.n	8003660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a17      	ldr	r2, [pc, #92]	@ (80036c0 <TIM_OC2_SetConfig+0xe4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC2_SetConfig+0x94>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a16      	ldr	r2, [pc, #88]	@ (80036c4 <TIM_OC2_SetConfig+0xe8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d113      	bne.n	8003698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800367e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40010400 	.word	0x40010400

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a21      	ldr	r2, [pc, #132]	@ (80037a8 <TIM_OC3_SetConfig+0xe0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC3_SetConfig+0x66>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <TIM_OC3_SetConfig+0xe4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10d      	bne.n	800374a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <TIM_OC3_SetConfig+0xe0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_OC3_SetConfig+0x92>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <TIM_OC3_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a12      	ldr	r2, [pc, #72]	@ (8003854 <TIM_OC4_SetConfig+0xa4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC4_SetConfig+0x68>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a11      	ldr	r2, [pc, #68]	@ (8003858 <TIM_OC4_SetConfig+0xa8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800381e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400

0800385c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1a      	ldr	r2, [r3, #32]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e05a      	b.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a21      	ldr	r2, [pc, #132]	@ (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d022      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390c:	d01d      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d018      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1a      	ldr	r2, [pc, #104]	@ (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a17      	ldr	r2, [pc, #92]	@ (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a15      	ldr	r2, [pc, #84]	@ (800399c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10c      	bne.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40001800 	.word	0x40001800

080039a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e042      	b.n	8003a60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fabc 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	@ 0x24
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f973 	bl	8003cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	@ 0x28
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d175      	bne.n	8003b74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Transmit+0x2c>
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e06e      	b.n	8003b76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2221      	movs	r2, #33	@ 0x21
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa6:	f7fd fc4f 	bl	8001348 <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac0:	d108      	bne.n	8003ad4 <HAL_UART_Transmit+0x6c>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	e003      	b.n	8003adc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003adc:	e02e      	b.n	8003b3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f848 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e03a      	b.n	8003b76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	3302      	adds	r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e007      	b.n	8003b2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1cb      	bne.n	8003ade <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2140      	movs	r1, #64	@ 0x40
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f814 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	e03b      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d037      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b98:	f7fd fbd6 	bl	8001348 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e03a      	b.n	8003c28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d020      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d01d      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d116      	bne.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f81d 	bl	8003c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e00f      	b.n	8003c28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d0b4      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b095      	sub	sp, #84	@ 0x54
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c58:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e5      	bne.n	8003c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d119      	bne.n	8003cdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc8:	61ba      	str	r2, [r7, #24]
 8003cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6979      	ldr	r1, [r7, #20]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cea:	bf00      	nop
 8003cec:	3754      	adds	r7, #84	@ 0x54
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b0c0      	sub	sp, #256	@ 0x100
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	68d9      	ldr	r1, [r3, #12]
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	ea40 0301 	orr.w	r3, r0, r1
 8003d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d50:	f021 010c 	bic.w	r1, r1, #12
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	6999      	ldr	r1, [r3, #24]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	ea40 0301 	orr.w	r3, r0, r1
 8003d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc4 <UART_SetConfig+0x2cc>)
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d005      	beq.n	8003d98 <UART_SetConfig+0xa0>
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b8d      	ldr	r3, [pc, #564]	@ (8003fc8 <UART_SetConfig+0x2d0>)
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d104      	bne.n	8003da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7fe fd2c 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003da0:	e003      	b.n	8003daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003da2:	f7fe fd13 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8003da6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db4:	f040 810c 	bne.w	8003fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	1891      	adds	r1, r2, r2
 8003dd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dda:	4621      	mov	r1, r4
 8003ddc:	eb12 0801 	adds.w	r8, r2, r1
 8003de0:	4629      	mov	r1, r5
 8003de2:	eb43 0901 	adc.w	r9, r3, r1
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfa:	4690      	mov	r8, r2
 8003dfc:	4699      	mov	r9, r3
 8003dfe:	4623      	mov	r3, r4
 8003e00:	eb18 0303 	adds.w	r3, r8, r3
 8003e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e08:	462b      	mov	r3, r5
 8003e0a:	eb49 0303 	adc.w	r3, r9, r3
 8003e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e26:	460b      	mov	r3, r1
 8003e28:	18db      	adds	r3, r3, r3
 8003e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e3c:	f7fc fa20 	bl	8000280 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4b61      	ldr	r3, [pc, #388]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003e46:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	011c      	lsls	r4, r3, #4
 8003e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e70:	4641      	mov	r1, r8
 8003e72:	eb12 0a01 	adds.w	sl, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb43 0b01 	adc.w	fp, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e90:	4692      	mov	sl, r2
 8003e92:	469b      	mov	fp, r3
 8003e94:	4643      	mov	r3, r8
 8003e96:	eb1a 0303 	adds.w	r3, sl, r3
 8003e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	18db      	adds	r3, r3, r3
 8003ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	eb42 0303 	adc.w	r3, r2, r3
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ed2:	f7fc f9d5 	bl	8000280 <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003ede:	fba3 2301 	umull	r2, r3, r3, r1
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2264      	movs	r2, #100	@ 0x64
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	1acb      	subs	r3, r1, r3
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ef2:	4b36      	ldr	r3, [pc, #216]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f00:	441c      	add	r4, r3
 8003f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f24:	4641      	mov	r1, r8
 8003f26:	1851      	adds	r1, r2, r1
 8003f28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	00cb      	lsls	r3, r1, #3
 8003f40:	4651      	mov	r1, sl
 8003f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f46:	4651      	mov	r1, sl
 8003f48:	00ca      	lsls	r2, r1, #3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4642      	mov	r2, r8
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f58:	464b      	mov	r3, r9
 8003f5a:	460a      	mov	r2, r1
 8003f5c:	eb42 0303 	adc.w	r3, r2, r3
 8003f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f78:	460b      	mov	r3, r1
 8003f7a:	18db      	adds	r3, r3, r3
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7e:	4613      	mov	r3, r2
 8003f80:	eb42 0303 	adc.w	r3, r2, r3
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f8e:	f7fc f977 	bl	8000280 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003f98:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2164      	movs	r1, #100	@ 0x64
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	3332      	adds	r3, #50	@ 0x32
 8003faa:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 0207 	and.w	r2, r3, #7
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4422      	add	r2, r4
 8003fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fc0:	e106      	b.n	80041d0 <UART_SetConfig+0x4d8>
 8003fc2:	bf00      	nop
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	40011400 	.word	0x40011400
 8003fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	6239      	str	r1, [r7, #32]
 8003fea:	415b      	adcs	r3, r3
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	1854      	adds	r4, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb43 0501 	adc.w	r5, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	00eb      	lsls	r3, r5, #3
 8004006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400a:	00e2      	lsls	r2, r4, #3
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	4643      	mov	r3, r8
 8004012:	18e3      	adds	r3, r4, r3
 8004014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004018:	464b      	mov	r3, r9
 800401a:	eb45 0303 	adc.w	r3, r5, r3
 800401e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800403e:	4629      	mov	r1, r5
 8004040:	008b      	lsls	r3, r1, #2
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004048:	4621      	mov	r1, r4
 800404a:	008a      	lsls	r2, r1, #2
 800404c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004050:	f7fc f916 	bl	8000280 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <UART_SetConfig+0x4e4>)
 800405a:	fba3 2302 	umull	r2, r3, r3, r2
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	011c      	lsls	r4, r3, #4
 8004062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800406c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004074:	4642      	mov	r2, r8
 8004076:	464b      	mov	r3, r9
 8004078:	1891      	adds	r1, r2, r2
 800407a:	61b9      	str	r1, [r7, #24]
 800407c:	415b      	adcs	r3, r3
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004084:	4641      	mov	r1, r8
 8004086:	1851      	adds	r1, r2, r1
 8004088:	6139      	str	r1, [r7, #16]
 800408a:	4649      	mov	r1, r9
 800408c:	414b      	adcs	r3, r1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800409c:	4659      	mov	r1, fp
 800409e:	00cb      	lsls	r3, r1, #3
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a6:	4651      	mov	r1, sl
 80040a8:	00ca      	lsls	r2, r1, #3
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	4642      	mov	r2, r8
 80040b2:	189b      	adds	r3, r3, r2
 80040b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b8:	464b      	mov	r3, r9
 80040ba:	460a      	mov	r2, r1
 80040bc:	eb42 0303 	adc.w	r3, r2, r3
 80040c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040dc:	4649      	mov	r1, r9
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	4641      	mov	r1, r8
 80040e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e6:	4641      	mov	r1, r8
 80040e8:	008a      	lsls	r2, r1, #2
 80040ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040ee:	f7fc f8c7 	bl	8000280 <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	4b38      	ldr	r3, [pc, #224]	@ (80041dc <UART_SetConfig+0x4e4>)
 80040fa:	fba3 2301 	umull	r2, r3, r3, r1
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	2264      	movs	r2, #100	@ 0x64
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	1acb      	subs	r3, r1, r3
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	3332      	adds	r3, #50	@ 0x32
 800410c:	4a33      	ldr	r2, [pc, #204]	@ (80041dc <UART_SetConfig+0x4e4>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004118:	441c      	add	r4, r3
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	673b      	str	r3, [r7, #112]	@ 0x70
 8004122:	677a      	str	r2, [r7, #116]	@ 0x74
 8004124:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	415b      	adcs	r3, r3
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004138:	4641      	mov	r1, r8
 800413a:	1851      	adds	r1, r2, r1
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	4649      	mov	r1, r9
 8004140:	414b      	adcs	r3, r1
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004150:	4659      	mov	r1, fp
 8004152:	00cb      	lsls	r3, r1, #3
 8004154:	4651      	mov	r1, sl
 8004156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415a:	4651      	mov	r1, sl
 800415c:	00ca      	lsls	r2, r1, #3
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	4603      	mov	r3, r0
 8004164:	4642      	mov	r2, r8
 8004166:	189b      	adds	r3, r3, r2
 8004168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800416a:	464b      	mov	r3, r9
 800416c:	460a      	mov	r2, r1
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	663b      	str	r3, [r7, #96]	@ 0x60
 800417e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800418c:	4649      	mov	r1, r9
 800418e:	008b      	lsls	r3, r1, #2
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004196:	4641      	mov	r1, r8
 8004198:	008a      	lsls	r2, r1, #2
 800419a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800419e:	f7fc f86f 	bl	8000280 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <UART_SetConfig+0x4e4>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	@ 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	3332      	adds	r3, #50	@ 0x32
 80041ba:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <UART_SetConfig+0x4e4>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 020f 	and.w	r2, r3, #15
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4422      	add	r2, r4
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041d6:	46bd      	mov	sp, r7
 80041d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041dc:	51eb851f 	.word	0x51eb851f

080041e0 <__NVIC_SetPriority>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	6039      	str	r1, [r7, #0]
 80041ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db0a      	blt.n	800420a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	490c      	ldr	r1, [pc, #48]	@ (800422c <__NVIC_SetPriority+0x4c>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	0112      	lsls	r2, r2, #4
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	440b      	add	r3, r1
 8004204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004208:	e00a      	b.n	8004220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4908      	ldr	r1, [pc, #32]	@ (8004230 <__NVIC_SetPriority+0x50>)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	3b04      	subs	r3, #4
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	440b      	add	r3, r1
 800421e:	761a      	strb	r2, [r3, #24]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000e100 	.word	0xe000e100
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <SysTick_Handler+0x1c>)
 800423a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800423c:	f001 ff34 	bl	80060a8 <xTaskGetSchedulerState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004246:	f002 fd2f 	bl	8006ca8 <xPortSysTickHandler>
  }
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004258:	2100      	movs	r1, #0
 800425a:	f06f 0004 	mvn.w	r0, #4
 800425e:	f7ff ffbf 	bl	80041e0 <__NVIC_SetPriority>
#endif
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426e:	f3ef 8305 	mrs	r3, IPSR
 8004272:	603b      	str	r3, [r7, #0]
  return(result);
 8004274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800427a:	f06f 0305 	mvn.w	r3, #5
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	e00c      	b.n	800429c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004282:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <osKernelInitialize+0x44>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800428a:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <osKernelInitialize+0x44>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e002      	b.n	800429c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800429c:	687b      	ldr	r3, [r7, #4]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000264 	.word	0x20000264

080042b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b6:	f3ef 8305 	mrs	r3, IPSR
 80042ba:	603b      	str	r3, [r7, #0]
  return(result);
 80042bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80042c2:	f06f 0305 	mvn.w	r3, #5
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e010      	b.n	80042ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042ca:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <osKernelStart+0x48>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d109      	bne.n	80042e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042d2:	f7ff ffbf 	bl	8004254 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042d6:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <osKernelStart+0x48>)
 80042d8:	2202      	movs	r2, #2
 80042da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042dc:	f001 fa80 	bl	80057e0 <vTaskStartScheduler>
      stat = osOK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e002      	b.n	80042ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042ec:	687b      	ldr	r3, [r7, #4]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000264 	.word	0x20000264

080042fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08e      	sub	sp, #56	@ 0x38
 8004300:	af04      	add	r7, sp, #16
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800430c:	f3ef 8305 	mrs	r3, IPSR
 8004310:	617b      	str	r3, [r7, #20]
  return(result);
 8004312:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004314:	2b00      	cmp	r3, #0
 8004316:	d17e      	bne.n	8004416 <osThreadNew+0x11a>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d07b      	beq.n	8004416 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004322:	2318      	movs	r3, #24
 8004324:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295
 800432e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d045      	beq.n	80043c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <osThreadNew+0x48>
        name = attr->name;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <osThreadNew+0x6e>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b38      	cmp	r3, #56	@ 0x38
 800435c:	d805      	bhi.n	800436a <osThreadNew+0x6e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <osThreadNew+0x72>
        return (NULL);
 800436a:	2300      	movs	r3, #0
 800436c:	e054      	b.n	8004418 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <osThreadNew+0xa8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2ba7      	cmp	r3, #167	@ 0xa7
 800438c:	d90a      	bls.n	80043a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <osThreadNew+0xa8>
        mem = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e010      	b.n	80043c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <osThreadNew+0xca>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <osThreadNew+0xca>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <osThreadNew+0xca>
          mem = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e001      	b.n	80043c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d110      	bne.n	80043ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d4:	9202      	str	r2, [sp, #8]
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6a3a      	ldr	r2, [r7, #32]
 80043e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f001 f808 	bl	80053f8 <xTaskCreateStatic>
 80043e8:	4603      	mov	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	e013      	b.n	8004416 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f001 f856 	bl	80054b8 <xTaskCreate>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <osThreadNew+0x11a>
            hTask = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004416:	693b      	ldr	r3, [r7, #16]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	@ 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004428:	f3ef 8305 	mrs	r3, IPSR
 800442c:	60bb      	str	r3, [r7, #8]
  return(result);
 800442e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <osDelay+0x1c>
    stat = osErrorISR;
 8004434:	f06f 0305 	mvn.w	r3, #5
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e007      	b.n	800444c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 f994 	bl	8005774 <vTaskDelay>
    }
  }

  return (stat);
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004456:	b580      	push	{r7, lr}
 8004458:	b08a      	sub	sp, #40	@ 0x28
 800445a:	af02      	add	r7, sp, #8
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004466:	f3ef 8305 	mrs	r3, IPSR
 800446a:	613b      	str	r3, [r7, #16]
  return(result);
 800446c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800446e:	2b00      	cmp	r3, #0
 8004470:	d15f      	bne.n	8004532 <osMessageQueueNew+0xdc>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d05c      	beq.n	8004532 <osMessageQueueNew+0xdc>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d059      	beq.n	8004532 <osMessageQueueNew+0xdc>
    mem = -1;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d029      	beq.n	80044de <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <osMessageQueueNew+0x62>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b4f      	cmp	r3, #79	@ 0x4f
 8004498:	d90e      	bls.n	80044b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <osMessageQueueNew+0x62>
        mem = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e014      	b.n	80044e2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d110      	bne.n	80044e2 <osMessageQueueNew+0x8c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10c      	bne.n	80044e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <osMessageQueueNew+0x8c>
          mem = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	e001      	b.n	80044e2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10b      	bne.n	8004500 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2100      	movs	r1, #0
 80044f2:	9100      	str	r1, [sp, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fa30 	bl	800495c <xQueueGenericCreateStatic>
 80044fc:	61f8      	str	r0, [r7, #28]
 80044fe:	e008      	b.n	8004512 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d105      	bne.n	8004512 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004506:	2200      	movs	r2, #0
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 faa3 	bl	8004a56 <xQueueGenericCreate>
 8004510:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00c      	beq.n	8004532 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <osMessageQueueNew+0xd0>
        name = attr->name;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e001      	b.n	800452a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	69f8      	ldr	r0, [r7, #28]
 800452e:	f000 ff05 	bl	800533c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004532:	69fb      	ldr	r3, [r7, #28]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004554:	f3ef 8305 	mrs	r3, IPSR
 8004558:	617b      	str	r3, [r7, #20]
  return(result);
 800455a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800455c:	2b00      	cmp	r3, #0
 800455e:	d028      	beq.n	80045b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <osMessageQueuePut+0x36>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <osMessageQueuePut+0x36>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004572:	f06f 0303 	mvn.w	r3, #3
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e038      	b.n	80045ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800457e:	f107 0210 	add.w	r2, r7, #16
 8004582:	2300      	movs	r3, #0
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	69b8      	ldr	r0, [r7, #24]
 8004588:	f000 fbc6 	bl	8004d18 <xQueueGenericSendFromISR>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d003      	beq.n	800459a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004592:	f06f 0302 	mvn.w	r3, #2
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e028      	b.n	80045ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d025      	beq.n	80045ec <osMessageQueuePut+0xb0>
 80045a0:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <osMessageQueuePut+0xbc>)
 80045a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	e01c      	b.n	80045ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <osMessageQueuePut+0x82>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80045be:	f06f 0303 	mvn.w	r3, #3
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e012      	b.n	80045ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80045c6:	2300      	movs	r3, #0
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	69b8      	ldr	r0, [r7, #24]
 80045ce:	f000 faa1 	bl	8004b14 <xQueueGenericSend>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d009      	beq.n	80045ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80045de:	f06f 0301 	mvn.w	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	e002      	b.n	80045ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80045e6:	f06f 0302 	mvn.w	r3, #2
 80045ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80045ec:	69fb      	ldr	r3, [r7, #28]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004612:	f3ef 8305 	mrs	r3, IPSR
 8004616:	617b      	str	r3, [r7, #20]
  return(result);
 8004618:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800461a:	2b00      	cmp	r3, #0
 800461c:	d028      	beq.n	8004670 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <osMessageQueueGet+0x34>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <osMessageQueueGet+0x34>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004630:	f06f 0303 	mvn.w	r3, #3
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e037      	b.n	80046a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	461a      	mov	r2, r3
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	69b8      	ldr	r0, [r7, #24]
 8004646:	f000 fce7 	bl	8005018 <xQueueReceiveFromISR>
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d003      	beq.n	8004658 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004650:	f06f 0302 	mvn.w	r3, #2
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e027      	b.n	80046a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d024      	beq.n	80046a8 <osMessageQueueGet+0xac>
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <osMessageQueueGet+0xb8>)
 8004660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	e01b      	b.n	80046a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <osMessageQueueGet+0x80>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800467c:	f06f 0303 	mvn.w	r3, #3
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e011      	b.n	80046a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	69b8      	ldr	r0, [r7, #24]
 800468a:	f000 fbe3 	bl	8004e54 <xQueueReceive>
 800468e:	4603      	mov	r3, r0
 8004690:	2b01      	cmp	r3, #1
 8004692:	d009      	beq.n	80046a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800469a:	f06f 0301 	mvn.w	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e002      	b.n	80046a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80046a2:	f06f 0302 	mvn.w	r3, #2
 80046a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046a8:	69fb      	ldr	r3, [r7, #28]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a07      	ldr	r2, [pc, #28]	@ (80046e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80046c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a06      	ldr	r2, [pc, #24]	@ (80046e8 <vApplicationGetIdleTaskMemory+0x30>)
 80046ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000268 	.word	0x20000268
 80046e8:	20000310 	.word	0x20000310

080046ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a07      	ldr	r2, [pc, #28]	@ (8004718 <vApplicationGetTimerTaskMemory+0x2c>)
 80046fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a06      	ldr	r2, [pc, #24]	@ (800471c <vApplicationGetTimerTaskMemory+0x30>)
 8004702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800470a:	601a      	str	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000510 	.word	0x20000510
 800471c:	200005b8 	.word	0x200005b8

08004720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f103 0208 	add.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f103 0208 	add.w	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0208 	add.w	r2, r3, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d103      	bne.n	80047e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e00c      	b.n	80047fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3308      	adds	r3, #8
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e002      	b.n	80047f0 <vListInsert+0x2e>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d2f6      	bcs.n	80047ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6852      	ldr	r2, [r2, #4]
 8004854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d103      	bne.n	8004868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048b4:	f002 f968 	bl	8006b88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	3b01      	subs	r3, #1
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	441a      	add	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	22ff      	movs	r2, #255	@ 0xff
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	22ff      	movs	r2, #255	@ 0xff
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d114      	bne.n	8004934 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01a      	beq.n	8004948 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3310      	adds	r3, #16
 8004916:	4618      	mov	r0, r3
 8004918:	f001 fa00 	bl	8005d1c <xTaskRemoveFromEventList>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d012      	beq.n	8004948 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <xQueueGenericReset+0xd0>)
 8004924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	e009      	b.n	8004948 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3310      	adds	r3, #16
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fef1 	bl	8004720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3324      	adds	r3, #36	@ 0x24
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff feec 	bl	8004720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004948:	f002 f950 	bl	8006bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800494c:	2301      	movs	r3, #1
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08e      	sub	sp, #56	@ 0x38
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <xQueueGenericCreateStatic+0x56>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <xQueueGenericCreateStatic+0x5a>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <xQueueGenericCreateStatic+0x5c>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	623b      	str	r3, [r7, #32]
}
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <xQueueGenericCreateStatic+0x84>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <xQueueGenericCreateStatic+0x88>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <xQueueGenericCreateStatic+0x8a>
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a02:	2350      	movs	r3, #80	@ 0x50
 8004a04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b50      	cmp	r3, #80	@ 0x50
 8004a0a:	d00b      	beq.n	8004a24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	61bb      	str	r3, [r7, #24]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f840 	bl	8004acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3730      	adds	r7, #48	@ 0x30
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b08a      	sub	sp, #40	@ 0x28
 8004a5a:	af02      	add	r7, sp, #8
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	613b      	str	r3, [r7, #16]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3350      	adds	r3, #80	@ 0x50
 8004a90:	4618      	mov	r0, r3
 8004a92:	f002 f99b 	bl	8006dcc <pvPortMalloc>
 8004a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3350      	adds	r3, #80	@ 0x50
 8004aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ab0:	79fa      	ldrb	r2, [r7, #7]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f805 	bl	8004acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e002      	b.n	8004aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004afa:	2101      	movs	r1, #1
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f7ff fec3 	bl	8004888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08e      	sub	sp, #56	@ 0x38
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b22:	2300      	movs	r3, #0
 8004b24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10b      	bne.n	8004b48 <xQueueGenericSend+0x34>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <xQueueGenericSend+0x42>
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <xQueueGenericSend+0x46>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <xQueueGenericSend+0x48>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <xQueueGenericSend+0x64>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d103      	bne.n	8004b86 <xQueueGenericSend+0x72>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <xQueueGenericSend+0x76>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <xQueueGenericSend+0x78>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <xQueueGenericSend+0x94>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	623b      	str	r3, [r7, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba8:	f001 fa7e 	bl	80060a8 <xTaskGetSchedulerState>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <xQueueGenericSend+0xa4>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <xQueueGenericSend+0xa8>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <xQueueGenericSend+0xaa>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <xQueueGenericSend+0xc6>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	61fb      	str	r3, [r7, #28]
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bda:	f001 ffd5 	bl	8006b88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <xQueueGenericSend+0xdc>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d129      	bne.n	8004c44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bf6:	f000 fa91 	bl	800511c <prvCopyDataToQueue>
 8004bfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	3324      	adds	r3, #36	@ 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f887 	bl	8005d1c <xTaskRemoveFromEventList>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d013      	beq.n	8004c3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c14:	4b3f      	ldr	r3, [pc, #252]	@ (8004d14 <xQueueGenericSend+0x200>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	e00a      	b.n	8004c3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b39      	ldr	r3, [pc, #228]	@ (8004d14 <xQueueGenericSend+0x200>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c3c:	f001 ffd6 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e063      	b.n	8004d0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c4a:	f001 ffcf 	bl	8006bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e05c      	b.n	8004d0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f8c1 	bl	8005de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c66:	f001 ffc1 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c6a:	f000 fe29 	bl	80058c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6e:	f001 ff8b 	bl	8006b88 <vPortEnterCritical>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d103      	bne.n	8004c88 <xQueueGenericSend+0x174>
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSend+0x18a>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c9e:	f001 ffa5 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca2:	1d3a      	adds	r2, r7, #4
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 f8b0 	bl	8005e10 <xTaskCheckForTimeOut>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d124      	bne.n	8004d00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cb8:	f000 fb28 	bl	800530c <prvIsQueueFull>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	3310      	adds	r3, #16
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 ffd4 	bl	8005c78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cd2:	f000 fab3 	bl	800523c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cd6:	f000 fe01 	bl	80058dc <xTaskResumeAll>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f47f af7c 	bne.w	8004bda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <xQueueGenericSend+0x200>)
 8004ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	e772      	b.n	8004bda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cf6:	f000 faa1 	bl	800523c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cfa:	f000 fdef 	bl	80058dc <xTaskResumeAll>
 8004cfe:	e76c      	b.n	8004bda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d02:	f000 fa9b 	bl	800523c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d06:	f000 fde9 	bl	80058dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3738      	adds	r7, #56	@ 0x38
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b090      	sub	sp, #64	@ 0x40
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <xQueueGenericSendFromISR+0x3e>
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueGenericSendFromISR+0x42>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueGenericSendFromISR+0x44>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSendFromISR+0x6e>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <xQueueGenericSendFromISR+0x72>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <xQueueGenericSendFromISR+0x74>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	623b      	str	r3, [r7, #32]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004da8:	f001 ffce 	bl	8006d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dac:	f3ef 8211 	mrs	r2, BASEPRI
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61fa      	str	r2, [r7, #28]
 8004dc2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <xQueueGenericSendFromISR+0xc2>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d12f      	bne.n	8004e3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004de0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004df0:	f000 f994 	bl	800511c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004df4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d112      	bne.n	8004e24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	3324      	adds	r3, #36	@ 0x24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 ff86 	bl	8005d1c <xTaskRemoveFromEventList>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e28:	3301      	adds	r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	b25a      	sxtb	r2, r3
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e34:	2301      	movs	r3, #1
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004e38:	e001      	b.n	8004e3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3740      	adds	r7, #64	@ 0x40
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08c      	sub	sp, #48	@ 0x30
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <xQueueReceive+0x32>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	623b      	str	r3, [r7, #32]
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	e7fd      	b.n	8004e82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <xQueueReceive+0x40>
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <xQueueReceive+0x44>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <xQueueReceive+0x46>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10b      	bne.n	8004eb6 <xQueueReceive+0x62>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	61fb      	str	r3, [r7, #28]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eb6:	f001 f8f7 	bl	80060a8 <xTaskGetSchedulerState>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <xQueueReceive+0x72>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueReceive+0x76>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueReceive+0x78>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xQueueReceive+0x94>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61bb      	str	r3, [r7, #24]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee8:	f001 fe4e 	bl	8006b88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004efc:	f000 f978 	bl	80051f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00f      	beq.n	8004f30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	3310      	adds	r3, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 ff01 	bl	8005d1c <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f20:	4b3c      	ldr	r3, [pc, #240]	@ (8005014 <xQueueReceive+0x1c0>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f30:	f001 fe5c 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e069      	b.n	800500c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f3e:	f001 fe55 	bl	8006bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e062      	b.n	800500c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 ff47 	bl	8005de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f5a:	f001 fe47 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f5e:	f000 fcaf 	bl	80058c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f62:	f001 fe11 	bl	8006b88 <vPortEnterCritical>
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f6c:	b25b      	sxtb	r3, r3
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d103      	bne.n	8004f7c <xQueueReceive+0x128>
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d103      	bne.n	8004f92 <xQueueReceive+0x13e>
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f92:	f001 fe2b 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f96:	1d3a      	adds	r2, r7, #4
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ff36 	bl	8005e10 <xTaskCheckForTimeOut>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d123      	bne.n	8004ff2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fac:	f000 f998 	bl	80052e0 <prvIsQueueEmpty>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	3324      	adds	r3, #36	@ 0x24
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fe5a 	bl	8005c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fc6:	f000 f939 	bl	800523c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fca:	f000 fc87 	bl	80058dc <xTaskResumeAll>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d189      	bne.n	8004ee8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <xQueueReceive+0x1c0>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e780      	b.n	8004ee8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fe8:	f000 f928 	bl	800523c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fec:	f000 fc76 	bl	80058dc <xTaskResumeAll>
 8004ff0:	e77a      	b.n	8004ee8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff4:	f000 f922 	bl	800523c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff8:	f000 fc70 	bl	80058dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ffe:	f000 f96f 	bl	80052e0 <prvIsQueueEmpty>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f43f af6f 	beq.w	8004ee8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800500a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	@ 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08e      	sub	sp, #56	@ 0x38
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	623b      	str	r3, [r7, #32]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <xQueueReceiveFromISR+0x3c>
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <xQueueReceiveFromISR+0x40>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <xQueueReceiveFromISR+0x42>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	61fb      	str	r3, [r7, #28]
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	e7fd      	b.n	8005072 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005076:	f001 fe67 	bl	8006d48 <vPortValidateInterruptPriority>
	__asm volatile
 800507a:	f3ef 8211 	mrs	r2, BASEPRI
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	61ba      	str	r2, [r7, #24]
 8005090:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005092:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02f      	beq.n	8005102 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b0:	f000 f89e 	bl	80051f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d112      	bne.n	80050ec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	3310      	adds	r3, #16
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fe22 	bl	8005d1c <xTaskRemoveFromEventList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e007      	b.n	80050fc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050f0:	3301      	adds	r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	b25a      	sxtb	r2, r3
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80050fc:	2301      	movs	r3, #1
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005100:	e001      	b.n	8005106 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005102:	2300      	movs	r3, #0
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	613b      	str	r3, [r7, #16]
	__asm volatile
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f383 8811 	msr	BASEPRI, r3
}
 8005110:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005114:	4618      	mov	r0, r3
 8005116:	3738      	adds	r7, #56	@ 0x38
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10d      	bne.n	8005156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d14d      	bne.n	80051de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 ffcc 	bl	80060e4 <xTaskPriorityDisinherit>
 800514c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	e043      	b.n	80051de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d119      	bne.n	8005190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6858      	ldr	r0, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	461a      	mov	r2, r3
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	f002 fb01 	bl	800776e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	441a      	add	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	d32b      	bcc.n	80051de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	e026      	b.n	80051de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68d8      	ldr	r0, [r3, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	461a      	mov	r2, r3
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	f002 fae7 	bl	800776e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	425b      	negs	r3, r3
 80051aa:	441a      	add	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d207      	bcs.n	80051cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	425b      	negs	r3, r3
 80051c6:	441a      	add	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d105      	bne.n	80051de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	3b01      	subs	r3, #1
 80051dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	441a      	add	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d303      	bcc.n	8005224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68d9      	ldr	r1, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	461a      	mov	r2, r3
 800522e:	6838      	ldr	r0, [r7, #0]
 8005230:	f002 fa9d 	bl	800776e <memcpy>
	}
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005244:	f001 fca0 	bl	8006b88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800524e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005250:	e011      	b.n	8005276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3324      	adds	r3, #36	@ 0x24
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fd5c 	bl	8005d1c <xTaskRemoveFromEventList>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800526a:	f000 fe35 	bl	8005ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3b01      	subs	r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	dce9      	bgt.n	8005252 <prvUnlockQueue+0x16>
 800527e:	e000      	b.n	8005282 <prvUnlockQueue+0x46>
					break;
 8005280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	22ff      	movs	r2, #255	@ 0xff
 8005286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800528a:	f001 fcaf 	bl	8006bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800528e:	f001 fc7b 	bl	8006b88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800529a:	e011      	b.n	80052c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3310      	adds	r3, #16
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fd37 	bl	8005d1c <xTaskRemoveFromEventList>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052b4:	f000 fe10 	bl	8005ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dce9      	bgt.n	800529c <prvUnlockQueue+0x60>
 80052c8:	e000      	b.n	80052cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	22ff      	movs	r2, #255	@ 0xff
 80052d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052d4:	f001 fc8a 	bl	8006bec <vPortExitCritical>
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052e8:	f001 fc4e 	bl	8006b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e001      	b.n	80052fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052fe:	f001 fc75 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005314:	f001 fc38 	bl	8006b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005320:	429a      	cmp	r2, r3
 8005322:	d102      	bne.n	800532a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e001      	b.n	800532e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800532e:	f001 fc5d 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e014      	b.n	8005376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800534c:	4a0f      	ldr	r2, [pc, #60]	@ (800538c <vQueueAddToRegistry+0x50>)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005358:	490c      	ldr	r1, [pc, #48]	@ (800538c <vQueueAddToRegistry+0x50>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005362:	4a0a      	ldr	r2, [pc, #40]	@ (800538c <vQueueAddToRegistry+0x50>)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800536e:	e006      	b.n	800537e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b07      	cmp	r3, #7
 800537a:	d9e7      	bls.n	800534c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	200009b8 	.word	0x200009b8

08005390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053a0:	f001 fbf2 	bl	8006b88 <vPortEnterCritical>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <vQueueWaitForMessageRestricted+0x2a>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d103      	bne.n	80053d0 <vQueueWaitForMessageRestricted+0x40>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053d0:	f001 fc0c 	bl	8006bec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3324      	adds	r3, #36	@ 0x24
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fc6d 	bl	8005cc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053ea:	6978      	ldr	r0, [r7, #20]
 80053ec:	f7ff ff26 	bl	800523c <prvUnlockQueue>
	}
 80053f0:	bf00      	nop
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08e      	sub	sp, #56	@ 0x38
 80053fc:	af04      	add	r7, sp, #16
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <xTaskCreateStatic+0x2c>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	623b      	str	r3, [r7, #32]
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10b      	bne.n	8005442 <xTaskCreateStatic+0x4a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	61fb      	str	r3, [r7, #28]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005442:	23a8      	movs	r3, #168	@ 0xa8
 8005444:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2ba8      	cmp	r3, #168	@ 0xa8
 800544a:	d00b      	beq.n	8005464 <xTaskCreateStatic+0x6c>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	61bb      	str	r3, [r7, #24]
}
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005464:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01e      	beq.n	80054aa <xTaskCreateStatic+0xb2>
 800546c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	2202      	movs	r2, #2
 8005480:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005484:	2300      	movs	r3, #0
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	f107 0314 	add.w	r3, r7, #20
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f851 	bl	8005544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054a4:	f000 f8f6 	bl	8005694 <prvAddNewTaskToReadyList>
 80054a8:	e001      	b.n	80054ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054ae:	697b      	ldr	r3, [r7, #20]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3728      	adds	r7, #40	@ 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	@ 0x30
 80054bc:	af04      	add	r7, sp, #16
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 fc7d 	bl	8006dcc <pvPortMalloc>
 80054d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054da:	20a8      	movs	r0, #168	@ 0xa8
 80054dc:	f001 fc76 	bl	8006dcc <pvPortMalloc>
 80054e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ee:	e005      	b.n	80054fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f001 fd39 	bl	8006f68 <vPortFree>
 80054f6:	e001      	b.n	80054fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	2300      	movs	r3, #0
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f80f 	bl	8005544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005526:	69f8      	ldr	r0, [r7, #28]
 8005528:	f000 f8b4 	bl	8005694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800552c:	2301      	movs	r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e002      	b.n	8005538 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005538:	69bb      	ldr	r3, [r7, #24]
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	461a      	mov	r2, r3
 800555c:	21a5      	movs	r1, #165	@ 0xa5
 800555e:	f002 f82d 	bl	80075bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800556c:	3b01      	subs	r3, #1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f023 0307 	bic.w	r3, r3, #7
 800557a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	617b      	str	r3, [r7, #20]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e012      	b.n	80055d0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	7819      	ldrb	r1, [r3, #0]
 80055b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	3334      	adds	r3, #52	@ 0x34
 80055ba:	460a      	mov	r2, r1
 80055bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d9e9      	bls.n	80055aa <prvInitialiseNewTask+0x66>
 80055d6:	e000      	b.n	80055da <prvInitialiseNewTask+0x96>
			{
				break;
 80055d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055e2:	e003      	b.n	80055ec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b37      	cmp	r3, #55	@ 0x37
 80055f0:	d901      	bls.n	80055f6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055f2:	2337      	movs	r3, #55	@ 0x37
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005600:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	2200      	movs	r2, #0
 8005606:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff f8a7 	bl	8004760 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	3318      	adds	r3, #24
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff f8a2 	bl	8004760 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005620:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	2200      	movs	r2, #0
 8005636:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	2200      	movs	r2, #0
 800563e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	3354      	adds	r3, #84	@ 0x54
 8005646:	224c      	movs	r2, #76	@ 0x4c
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f001 ffb6 	bl	80075bc <memset>
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	4a0d      	ldr	r2, [pc, #52]	@ (8005688 <prvInitialiseNewTask+0x144>)
 8005654:	659a      	str	r2, [r3, #88]	@ 0x58
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	4a0c      	ldr	r2, [pc, #48]	@ (800568c <prvInitialiseNewTask+0x148>)
 800565a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	4a0c      	ldr	r2, [pc, #48]	@ (8005690 <prvInitialiseNewTask+0x14c>)
 8005660:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	69b8      	ldr	r0, [r7, #24]
 8005668:	f001 f95a 	bl	8006920 <pxPortInitialiseStack>
 800566c:	4602      	mov	r2, r0
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800567c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567e:	bf00      	nop
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20005e6c 	.word	0x20005e6c
 800568c:	20005ed4 	.word	0x20005ed4
 8005690:	20005f3c 	.word	0x20005f3c

08005694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800569c:	f001 fa74 	bl	8006b88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005758 <prvAddNewTaskToReadyList+0xc4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005758 <prvAddNewTaskToReadyList+0xc4>)
 80056a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <prvAddNewTaskToReadyList+0xc8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056b2:	4a2a      	ldr	r2, [pc, #168]	@ (800575c <prvAddNewTaskToReadyList+0xc8>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056b8:	4b27      	ldr	r3, [pc, #156]	@ (8005758 <prvAddNewTaskToReadyList+0xc4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d110      	bne.n	80056e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056c0:	f000 fc2e 	bl	8005f20 <prvInitialiseTaskLists>
 80056c4:	e00d      	b.n	80056e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056c6:	4b26      	ldr	r3, [pc, #152]	@ (8005760 <prvAddNewTaskToReadyList+0xcc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056ce:	4b23      	ldr	r3, [pc, #140]	@ (800575c <prvAddNewTaskToReadyList+0xc8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	429a      	cmp	r2, r3
 80056da:	d802      	bhi.n	80056e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056dc:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <prvAddNewTaskToReadyList+0xc8>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056e2:	4b20      	ldr	r3, [pc, #128]	@ (8005764 <prvAddNewTaskToReadyList+0xd0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005764 <prvAddNewTaskToReadyList+0xd0>)
 80056ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <prvAddNewTaskToReadyList+0xd0>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005768 <prvAddNewTaskToReadyList+0xd4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d903      	bls.n	8005708 <prvAddNewTaskToReadyList+0x74>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	4a18      	ldr	r2, [pc, #96]	@ (8005768 <prvAddNewTaskToReadyList+0xd4>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a15      	ldr	r2, [pc, #84]	@ (800576c <prvAddNewTaskToReadyList+0xd8>)
 8005716:	441a      	add	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7ff f82b 	bl	800477a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005724:	f001 fa62 	bl	8006bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005728:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <prvAddNewTaskToReadyList+0xcc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005730:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <prvAddNewTaskToReadyList+0xc8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	429a      	cmp	r2, r3
 800573c:	d207      	bcs.n	800574e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800573e:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <prvAddNewTaskToReadyList+0xdc>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000ecc 	.word	0x20000ecc
 800575c:	200009f8 	.word	0x200009f8
 8005760:	20000ed8 	.word	0x20000ed8
 8005764:	20000ee8 	.word	0x20000ee8
 8005768:	20000ed4 	.word	0x20000ed4
 800576c:	200009fc 	.word	0x200009fc
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d018      	beq.n	80057b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005786:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <vTaskDelay+0x64>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <vTaskDelay+0x32>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	e7fd      	b.n	80057a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057a6:	f000 f88b 	bl	80058c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057aa:	2100      	movs	r1, #0
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fd09 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057b2:	f000 f893 	bl	80058dc <xTaskResumeAll>
 80057b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057be:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <vTaskDelay+0x68>)
 80057c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000ef4 	.word	0x20000ef4
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	@ 0x28
 80057e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057ee:	463a      	mov	r2, r7
 80057f0:	1d39      	adds	r1, r7, #4
 80057f2:	f107 0308 	add.w	r3, r7, #8
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe ff5e 	bl	80046b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	9202      	str	r2, [sp, #8]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	2300      	movs	r3, #0
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2300      	movs	r3, #0
 800580c:	460a      	mov	r2, r1
 800580e:	4924      	ldr	r1, [pc, #144]	@ (80058a0 <vTaskStartScheduler+0xc0>)
 8005810:	4824      	ldr	r0, [pc, #144]	@ (80058a4 <vTaskStartScheduler+0xc4>)
 8005812:	f7ff fdf1 	bl	80053f8 <xTaskCreateStatic>
 8005816:	4603      	mov	r3, r0
 8005818:	4a23      	ldr	r2, [pc, #140]	@ (80058a8 <vTaskStartScheduler+0xc8>)
 800581a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800581c:	4b22      	ldr	r3, [pc, #136]	@ (80058a8 <vTaskStartScheduler+0xc8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e001      	b.n	800582e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d102      	bne.n	800583a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005834:	f000 fd1a 	bl	800626c <xTimerCreateTimerTask>
 8005838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d11b      	bne.n	8005878 <vTaskStartScheduler+0x98>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	613b      	str	r3, [r7, #16]
}
 8005852:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005854:	4b15      	ldr	r3, [pc, #84]	@ (80058ac <vTaskStartScheduler+0xcc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3354      	adds	r3, #84	@ 0x54
 800585a:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <vTaskStartScheduler+0xd0>)
 800585c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800585e:	4b15      	ldr	r3, [pc, #84]	@ (80058b4 <vTaskStartScheduler+0xd4>)
 8005860:	f04f 32ff 	mov.w	r2, #4294967295
 8005864:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005866:	4b14      	ldr	r3, [pc, #80]	@ (80058b8 <vTaskStartScheduler+0xd8>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800586c:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <vTaskStartScheduler+0xdc>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005872:	f001 f8e5 	bl	8006a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005876:	e00f      	b.n	8005898 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d10b      	bne.n	8005898 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	60fb      	str	r3, [r7, #12]
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <vTaskStartScheduler+0xb4>
}
 8005898:	bf00      	nop
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	08008278 	.word	0x08008278
 80058a4:	08005ef1 	.word	0x08005ef1
 80058a8:	20000ef0 	.word	0x20000ef0
 80058ac:	200009f8 	.word	0x200009f8
 80058b0:	2000001c 	.word	0x2000001c
 80058b4:	20000eec 	.word	0x20000eec
 80058b8:	20000ed8 	.word	0x20000ed8
 80058bc:	20000ed0 	.word	0x20000ed0

080058c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058c4:	4b04      	ldr	r3, [pc, #16]	@ (80058d8 <vTaskSuspendAll+0x18>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	4a03      	ldr	r2, [pc, #12]	@ (80058d8 <vTaskSuspendAll+0x18>)
 80058cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ce:	bf00      	nop
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000ef4 	.word	0x20000ef4

080058dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058ea:	4b42      	ldr	r3, [pc, #264]	@ (80059f4 <xTaskResumeAll+0x118>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <xTaskResumeAll+0x2e>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	603b      	str	r3, [r7, #0]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800590a:	f001 f93d 	bl	8006b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800590e:	4b39      	ldr	r3, [pc, #228]	@ (80059f4 <xTaskResumeAll+0x118>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	4a37      	ldr	r2, [pc, #220]	@ (80059f4 <xTaskResumeAll+0x118>)
 8005916:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005918:	4b36      	ldr	r3, [pc, #216]	@ (80059f4 <xTaskResumeAll+0x118>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d162      	bne.n	80059e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005920:	4b35      	ldr	r3, [pc, #212]	@ (80059f8 <xTaskResumeAll+0x11c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d05e      	beq.n	80059e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005928:	e02f      	b.n	800598a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592a:	4b34      	ldr	r3, [pc, #208]	@ (80059fc <xTaskResumeAll+0x120>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3318      	adds	r3, #24
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe ff7c 	bl	8004834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3304      	adds	r3, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe ff77 	bl	8004834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <xTaskResumeAll+0x124>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d903      	bls.n	800595a <xTaskResumeAll+0x7e>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005956:	4a2a      	ldr	r2, [pc, #168]	@ (8005a00 <xTaskResumeAll+0x124>)
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4a27      	ldr	r2, [pc, #156]	@ (8005a04 <xTaskResumeAll+0x128>)
 8005968:	441a      	add	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3304      	adds	r3, #4
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f7fe ff02 	bl	800477a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597a:	4b23      	ldr	r3, [pc, #140]	@ (8005a08 <xTaskResumeAll+0x12c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005984:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <xTaskResumeAll+0x130>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800598a:	4b1c      	ldr	r3, [pc, #112]	@ (80059fc <xTaskResumeAll+0x120>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1cb      	bne.n	800592a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005998:	f000 fb66 	bl	8006068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800599c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <xTaskResumeAll+0x134>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059a8:	f000 f846 	bl	8005a38 <xTaskIncrementTick>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059b2:	4b16      	ldr	r3, [pc, #88]	@ (8005a0c <xTaskResumeAll+0x130>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f1      	bne.n	80059a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059c4:	4b12      	ldr	r3, [pc, #72]	@ (8005a10 <xTaskResumeAll+0x134>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059ca:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <xTaskResumeAll+0x130>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a14 <xTaskResumeAll+0x138>)
 80059d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059e6:	f001 f901 	bl	8006bec <vPortExitCritical>

	return xAlreadyYielded;
 80059ea:	68bb      	ldr	r3, [r7, #8]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20000ef4 	.word	0x20000ef4
 80059f8:	20000ecc 	.word	0x20000ecc
 80059fc:	20000e8c 	.word	0x20000e8c
 8005a00:	20000ed4 	.word	0x20000ed4
 8005a04:	200009fc 	.word	0x200009fc
 8005a08:	200009f8 	.word	0x200009f8
 8005a0c:	20000ee0 	.word	0x20000ee0
 8005a10:	20000edc 	.word	0x20000edc
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a1e:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <xTaskGetTickCount+0x1c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a24:	687b      	ldr	r3, [r7, #4]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000ed0 	.word	0x20000ed0

08005a38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a42:	4b4f      	ldr	r3, [pc, #316]	@ (8005b80 <xTaskIncrementTick+0x148>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8090 	bne.w	8005b6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b84 <xTaskIncrementTick+0x14c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a54:	4a4b      	ldr	r2, [pc, #300]	@ (8005b84 <xTaskIncrementTick+0x14c>)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d121      	bne.n	8005aa4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a60:	4b49      	ldr	r3, [pc, #292]	@ (8005b88 <xTaskIncrementTick+0x150>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	603b      	str	r3, [r7, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	e7fd      	b.n	8005a7e <xTaskIncrementTick+0x46>
 8005a82:	4b41      	ldr	r3, [pc, #260]	@ (8005b88 <xTaskIncrementTick+0x150>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	4b40      	ldr	r3, [pc, #256]	@ (8005b8c <xTaskIncrementTick+0x154>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b88 <xTaskIncrementTick+0x150>)
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4a3e      	ldr	r2, [pc, #248]	@ (8005b8c <xTaskIncrementTick+0x154>)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	4b3e      	ldr	r3, [pc, #248]	@ (8005b90 <xTaskIncrementTick+0x158>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b90 <xTaskIncrementTick+0x158>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	f000 fae2 	bl	8006068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8005b94 <xTaskIncrementTick+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d349      	bcc.n	8005b42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aae:	4b36      	ldr	r3, [pc, #216]	@ (8005b88 <xTaskIncrementTick+0x150>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab8:	4b36      	ldr	r3, [pc, #216]	@ (8005b94 <xTaskIncrementTick+0x15c>)
 8005aba:	f04f 32ff 	mov.w	r2, #4294967295
 8005abe:	601a      	str	r2, [r3, #0]
					break;
 8005ac0:	e03f      	b.n	8005b42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac2:	4b31      	ldr	r3, [pc, #196]	@ (8005b88 <xTaskIncrementTick+0x150>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d203      	bcs.n	8005ae2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ada:	4a2e      	ldr	r2, [pc, #184]	@ (8005b94 <xTaskIncrementTick+0x15c>)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ae0:	e02f      	b.n	8005b42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fea4 	bl	8004834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	3318      	adds	r3, #24
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fe fe9b 	bl	8004834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b02:	4b25      	ldr	r3, [pc, #148]	@ (8005b98 <xTaskIncrementTick+0x160>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d903      	bls.n	8005b12 <xTaskIncrementTick+0xda>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	4a22      	ldr	r2, [pc, #136]	@ (8005b98 <xTaskIncrementTick+0x160>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b9c <xTaskIncrementTick+0x164>)
 8005b20:	441a      	add	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7fe fe26 	bl	800477a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <xTaskIncrementTick+0x168>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3b8      	bcc.n	8005aae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b40:	e7b5      	b.n	8005aae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b42:	4b17      	ldr	r3, [pc, #92]	@ (8005ba0 <xTaskIncrementTick+0x168>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	4914      	ldr	r1, [pc, #80]	@ (8005b9c <xTaskIncrementTick+0x164>)
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d901      	bls.n	8005b5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ba4 <xTaskIncrementTick+0x16c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e004      	b.n	8005b76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <xTaskIncrementTick+0x170>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba8 <xTaskIncrementTick+0x170>)
 8005b74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b76:	697b      	ldr	r3, [r7, #20]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000ef4 	.word	0x20000ef4
 8005b84:	20000ed0 	.word	0x20000ed0
 8005b88:	20000e84 	.word	0x20000e84
 8005b8c:	20000e88 	.word	0x20000e88
 8005b90:	20000ee4 	.word	0x20000ee4
 8005b94:	20000eec 	.word	0x20000eec
 8005b98:	20000ed4 	.word	0x20000ed4
 8005b9c:	200009fc 	.word	0x200009fc
 8005ba0:	200009f8 	.word	0x200009f8
 8005ba4:	20000ee0 	.word	0x20000ee0
 8005ba8:	20000edc 	.word	0x20000edc

08005bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <vTaskSwitchContext+0xb4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bba:	4b2a      	ldr	r3, [pc, #168]	@ (8005c64 <vTaskSwitchContext+0xb8>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bc0:	e047      	b.n	8005c52 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005bc2:	4b28      	ldr	r3, [pc, #160]	@ (8005c64 <vTaskSwitchContext+0xb8>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b27      	ldr	r3, [pc, #156]	@ (8005c68 <vTaskSwitchContext+0xbc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e011      	b.n	8005bf4 <vTaskSwitchContext+0x48>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <vTaskSwitchContext+0x42>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	e7fd      	b.n	8005bea <vTaskSwitchContext+0x3e>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	491d      	ldr	r1, [pc, #116]	@ (8005c6c <vTaskSwitchContext+0xc0>)
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0e3      	beq.n	8005bd0 <vTaskSwitchContext+0x24>
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <vTaskSwitchContext+0xc0>)
 8005c14:	4413      	add	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d104      	bne.n	8005c38 <vTaskSwitchContext+0x8c>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c70 <vTaskSwitchContext+0xc4>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4a09      	ldr	r2, [pc, #36]	@ (8005c68 <vTaskSwitchContext+0xbc>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c48:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <vTaskSwitchContext+0xc4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3354      	adds	r3, #84	@ 0x54
 8005c4e:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <vTaskSwitchContext+0xc8>)
 8005c50:	6013      	str	r3, [r2, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000ef4 	.word	0x20000ef4
 8005c64:	20000ee0 	.word	0x20000ee0
 8005c68:	20000ed4 	.word	0x20000ed4
 8005c6c:	200009fc 	.word	0x200009fc
 8005c70:	200009f8 	.word	0x200009f8
 8005c74:	2000001c 	.word	0x2000001c

08005c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ca0:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <vTaskPlaceOnEventList+0x48>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fe fd8a 	bl	80047c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cae:	2101      	movs	r1, #1
 8005cb0:	6838      	ldr	r0, [r7, #0]
 8005cb2:	f000 fa87 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200009f8 	.word	0x200009f8

08005cc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	617b      	str	r3, [r7, #20]
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	e7fd      	b.n	8005cea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cee:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <vTaskPlaceOnEventListRestricted+0x54>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3318      	adds	r3, #24
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7fe fd3f 	bl	800477a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	68b8      	ldr	r0, [r7, #8]
 8005d0c:	f000 fa5a 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
	}
 8005d10:	bf00      	nop
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200009f8 	.word	0x200009f8

08005d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	60fb      	str	r3, [r7, #12]
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fd70 	bl	8004834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d54:	4b1d      	ldr	r3, [pc, #116]	@ (8005dcc <xTaskRemoveFromEventList+0xb0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11d      	bne.n	8005d98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fd67 	bl	8004834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6a:	4b19      	ldr	r3, [pc, #100]	@ (8005dd0 <xTaskRemoveFromEventList+0xb4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d903      	bls.n	8005d7a <xTaskRemoveFromEventList+0x5e>
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d76:	4a16      	ldr	r2, [pc, #88]	@ (8005dd0 <xTaskRemoveFromEventList+0xb4>)
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a13      	ldr	r2, [pc, #76]	@ (8005dd4 <xTaskRemoveFromEventList+0xb8>)
 8005d88:	441a      	add	r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fe fcf2 	bl	800477a <vListInsertEnd>
 8005d96:	e005      	b.n	8005da4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	480e      	ldr	r0, [pc, #56]	@ (8005dd8 <xTaskRemoveFromEventList+0xbc>)
 8005da0:	f7fe fceb 	bl	800477a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da8:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <xTaskRemoveFromEventList+0xc0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d905      	bls.n	8005dbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005db6:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <xTaskRemoveFromEventList+0xc4>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e001      	b.n	8005dc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000ef4 	.word	0x20000ef4
 8005dd0:	20000ed4 	.word	0x20000ed4
 8005dd4:	200009fc 	.word	0x200009fc
 8005dd8:	20000e8c 	.word	0x20000e8c
 8005ddc:	200009f8 	.word	0x200009f8
 8005de0:	20000ee0 	.word	0x20000ee0

08005de4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <vTaskInternalSetTimeOutState+0x24>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <vTaskInternalSetTimeOutState+0x28>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	605a      	str	r2, [r3, #4]
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	20000ee4 	.word	0x20000ee4
 8005e0c:	20000ed0 	.word	0x20000ed0

08005e10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10b      	bne.n	8005e38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	613b      	str	r3, [r7, #16]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10b      	bne.n	8005e56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60fb      	str	r3, [r7, #12]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e56:	f000 fe97 	bl	8006b88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed0 <xTaskCheckForTimeOut+0xc0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d102      	bne.n	8005e7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e023      	b.n	8005ec2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ed4 <xTaskCheckForTimeOut+0xc4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d007      	beq.n	8005e96 <xTaskCheckForTimeOut+0x86>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	e015      	b.n	8005ec2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d20b      	bcs.n	8005eb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ff99 	bl	8005de4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e004      	b.n	8005ec2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ec2:	f000 fe93 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000ed0 	.word	0x20000ed0
 8005ed4:	20000ee4 	.word	0x20000ee4

08005ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005edc:	4b03      	ldr	r3, [pc, #12]	@ (8005eec <vTaskMissedYield+0x14>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000ee0 	.word	0x20000ee0

08005ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ef8:	f000 f852 	bl	8005fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005efc:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <prvIdleTask+0x28>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d9f9      	bls.n	8005ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <prvIdleTask+0x2c>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f14:	e7f0      	b.n	8005ef8 <prvIdleTask+0x8>
 8005f16:	bf00      	nop
 8005f18:	200009fc 	.word	0x200009fc
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	e00c      	b.n	8005f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <prvInitialiseTaskLists+0x60>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fbf0 	bl	8004720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b37      	cmp	r3, #55	@ 0x37
 8005f4a:	d9ef      	bls.n	8005f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f4c:	480d      	ldr	r0, [pc, #52]	@ (8005f84 <prvInitialiseTaskLists+0x64>)
 8005f4e:	f7fe fbe7 	bl	8004720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f52:	480d      	ldr	r0, [pc, #52]	@ (8005f88 <prvInitialiseTaskLists+0x68>)
 8005f54:	f7fe fbe4 	bl	8004720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f58:	480c      	ldr	r0, [pc, #48]	@ (8005f8c <prvInitialiseTaskLists+0x6c>)
 8005f5a:	f7fe fbe1 	bl	8004720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f5e:	480c      	ldr	r0, [pc, #48]	@ (8005f90 <prvInitialiseTaskLists+0x70>)
 8005f60:	f7fe fbde 	bl	8004720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f64:	480b      	ldr	r0, [pc, #44]	@ (8005f94 <prvInitialiseTaskLists+0x74>)
 8005f66:	f7fe fbdb 	bl	8004720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f98 <prvInitialiseTaskLists+0x78>)
 8005f6c:	4a05      	ldr	r2, [pc, #20]	@ (8005f84 <prvInitialiseTaskLists+0x64>)
 8005f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <prvInitialiseTaskLists+0x7c>)
 8005f72:	4a05      	ldr	r2, [pc, #20]	@ (8005f88 <prvInitialiseTaskLists+0x68>)
 8005f74:	601a      	str	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200009fc 	.word	0x200009fc
 8005f84:	20000e5c 	.word	0x20000e5c
 8005f88:	20000e70 	.word	0x20000e70
 8005f8c:	20000e8c 	.word	0x20000e8c
 8005f90:	20000ea0 	.word	0x20000ea0
 8005f94:	20000eb8 	.word	0x20000eb8
 8005f98:	20000e84 	.word	0x20000e84
 8005f9c:	20000e88 	.word	0x20000e88

08005fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fa6:	e019      	b.n	8005fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fa8:	f000 fdee 	bl	8006b88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	4b10      	ldr	r3, [pc, #64]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x50>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fc3b 	bl	8004834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <prvCheckTasksWaitingTermination+0x54>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ff4 <prvCheckTasksWaitingTermination+0x54>)
 8005fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fd2:	f000 fe0b 	bl	8006bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f810 	bl	8005ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e1      	bne.n	8005fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000ea0 	.word	0x20000ea0
 8005ff4:	20000ecc 	.word	0x20000ecc
 8005ff8:	20000eb4 	.word	0x20000eb4

08005ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3354      	adds	r3, #84	@ 0x54
 8006008:	4618      	mov	r0, r3
 800600a:	f001 faef 	bl	80075ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601c:	4618      	mov	r0, r3
 800601e:	f000 ffa3 	bl	8006f68 <vPortFree>
				vPortFree( pxTCB );
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 ffa0 	bl	8006f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006028:	e019      	b.n	800605e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006030:	2b01      	cmp	r3, #1
 8006032:	d103      	bne.n	800603c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 ff97 	bl	8006f68 <vPortFree>
	}
 800603a:	e010      	b.n	800605e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006042:	2b02      	cmp	r3, #2
 8006044:	d00b      	beq.n	800605e <prvDeleteTCB+0x62>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60fb      	str	r3, [r7, #12]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <prvDeleteTCB+0x5e>
	}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606e:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <prvResetNextTaskUnblockTime+0x38>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006078:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <prvResetNextTaskUnblockTime+0x3c>)
 800607a:	f04f 32ff 	mov.w	r2, #4294967295
 800607e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006080:	e008      	b.n	8006094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006082:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <prvResetNextTaskUnblockTime+0x38>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a04      	ldr	r2, [pc, #16]	@ (80060a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000e84 	.word	0x20000e84
 80060a4:	20000eec 	.word	0x20000eec

080060a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060ae:	4b0b      	ldr	r3, [pc, #44]	@ (80060dc <xTaskGetSchedulerState+0x34>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060b6:	2301      	movs	r3, #1
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	e008      	b.n	80060ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060bc:	4b08      	ldr	r3, [pc, #32]	@ (80060e0 <xTaskGetSchedulerState+0x38>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060c4:	2302      	movs	r3, #2
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	e001      	b.n	80060ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060ce:	687b      	ldr	r3, [r7, #4]
	}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000ed8 	.word	0x20000ed8
 80060e0:	20000ef4 	.word	0x20000ef4

080060e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d058      	beq.n	80061ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060fa:	4b2f      	ldr	r3, [pc, #188]	@ (80061b8 <xTaskPriorityDisinherit+0xd4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	429a      	cmp	r2, r3
 8006102:	d00b      	beq.n	800611c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	60fb      	str	r3, [r7, #12]
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60bb      	str	r3, [r7, #8]
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006140:	1e5a      	subs	r2, r3, #1
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800614e:	429a      	cmp	r2, r3
 8006150:	d02c      	beq.n	80061ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006156:	2b00      	cmp	r3, #0
 8006158:	d128      	bne.n	80061ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fb68 	bl	8004834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617c:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <xTaskPriorityDisinherit+0xd8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d903      	bls.n	800618c <xTaskPriorityDisinherit+0xa8>
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006188:	4a0c      	ldr	r2, [pc, #48]	@ (80061bc <xTaskPriorityDisinherit+0xd8>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4a09      	ldr	r2, [pc, #36]	@ (80061c0 <xTaskPriorityDisinherit+0xdc>)
 800619a:	441a      	add	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe fae9 	bl	800477a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061ac:	697b      	ldr	r3, [r7, #20]
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	200009f8 	.word	0x200009f8
 80061bc:	20000ed4 	.word	0x20000ed4
 80061c0:	200009fc 	.word	0x200009fc

080061c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ce:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <prvAddCurrentTaskToDelayedList+0x90>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d4:	4b20      	ldr	r3, [pc, #128]	@ (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3304      	adds	r3, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fb2a 	bl	8004834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d10a      	bne.n	80061fe <prvAddCurrentTaskToDelayedList+0x3a>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4819      	ldr	r0, [pc, #100]	@ (800625c <prvAddCurrentTaskToDelayedList+0x98>)
 80061f8:	f7fe fabf 	bl	800477a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061fc:	e026      	b.n	800624c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006206:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	429a      	cmp	r2, r3
 8006214:	d209      	bcs.n	800622a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006216:	4b12      	ldr	r3, [pc, #72]	@ (8006260 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7fe facd 	bl	80047c2 <vListInsert>
}
 8006228:	e010      	b.n	800624c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800622a:	4b0e      	ldr	r3, [pc, #56]	@ (8006264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe fac3 	bl	80047c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d202      	bcs.n	800624c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006246:	4a08      	ldr	r2, [pc, #32]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6013      	str	r3, [r2, #0]
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000ed0 	.word	0x20000ed0
 8006258:	200009f8 	.word	0x200009f8
 800625c:	20000eb8 	.word	0x20000eb8
 8006260:	20000e88 	.word	0x20000e88
 8006264:	20000e84 	.word	0x20000e84
 8006268:	20000eec 	.word	0x20000eec

0800626c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	@ 0x28
 8006270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006276:	f000 fb13 	bl	80068a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800627a:	4b1d      	ldr	r3, [pc, #116]	@ (80062f0 <xTimerCreateTimerTask+0x84>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d021      	beq.n	80062c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800628a:	1d3a      	adds	r2, r7, #4
 800628c:	f107 0108 	add.w	r1, r7, #8
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fa29 	bl	80046ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	9202      	str	r2, [sp, #8]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	2302      	movs	r3, #2
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	460a      	mov	r2, r1
 80062ac:	4911      	ldr	r1, [pc, #68]	@ (80062f4 <xTimerCreateTimerTask+0x88>)
 80062ae:	4812      	ldr	r0, [pc, #72]	@ (80062f8 <xTimerCreateTimerTask+0x8c>)
 80062b0:	f7ff f8a2 	bl	80053f8 <xTaskCreateStatic>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4a11      	ldr	r2, [pc, #68]	@ (80062fc <xTimerCreateTimerTask+0x90>)
 80062b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ba:	4b10      	ldr	r3, [pc, #64]	@ (80062fc <xTimerCreateTimerTask+0x90>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062c2:	2301      	movs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	613b      	str	r3, [r7, #16]
}
 80062de:	bf00      	nop
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062e4:	697b      	ldr	r3, [r7, #20]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000f28 	.word	0x20000f28
 80062f4:	08008280 	.word	0x08008280
 80062f8:	08006439 	.word	0x08006439
 80062fc:	20000f2c 	.word	0x20000f2c

08006300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	@ 0x28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10b      	bne.n	8006330 <xTimerGenericCommand+0x30>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006330:	4b19      	ldr	r3, [pc, #100]	@ (8006398 <xTimerGenericCommand+0x98>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d02a      	beq.n	800638e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b05      	cmp	r3, #5
 8006348:	dc18      	bgt.n	800637c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800634a:	f7ff fead 	bl	80060a8 <xTaskGetSchedulerState>
 800634e:	4603      	mov	r3, r0
 8006350:	2b02      	cmp	r3, #2
 8006352:	d109      	bne.n	8006368 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006354:	4b10      	ldr	r3, [pc, #64]	@ (8006398 <xTimerGenericCommand+0x98>)
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	f107 0110 	add.w	r1, r7, #16
 800635c:	2300      	movs	r3, #0
 800635e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006360:	f7fe fbd8 	bl	8004b14 <xQueueGenericSend>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24
 8006366:	e012      	b.n	800638e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <xTimerGenericCommand+0x98>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	f107 0110 	add.w	r1, r7, #16
 8006370:	2300      	movs	r3, #0
 8006372:	2200      	movs	r2, #0
 8006374:	f7fe fbce 	bl	8004b14 <xQueueGenericSend>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24
 800637a:	e008      	b.n	800638e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <xTimerGenericCommand+0x98>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	f107 0110 	add.w	r1, r7, #16
 8006384:	2300      	movs	r3, #0
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	f7fe fcc6 	bl	8004d18 <xQueueGenericSendFromISR>
 800638c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006390:	4618      	mov	r0, r3
 8006392:	3728      	adds	r7, #40	@ 0x28
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000f28 	.word	0x20000f28

0800639c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a6:	4b23      	ldr	r3, [pc, #140]	@ (8006434 <prvProcessExpiredTimer+0x98>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fa3d 	bl	8004834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d023      	beq.n	8006410 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	18d1      	adds	r1, r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	6978      	ldr	r0, [r7, #20]
 80063d6:	f000 f8d5 	bl	8006584 <prvInsertTimerInActiveList>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d020      	beq.n	8006422 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063e0:	2300      	movs	r3, #0
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2300      	movs	r3, #0
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	2100      	movs	r1, #0
 80063ea:	6978      	ldr	r0, [r7, #20]
 80063ec:	f7ff ff88 	bl	8006300 <xTimerGenericCommand>
 80063f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d114      	bne.n	8006422 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60fb      	str	r3, [r7, #12]
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	4798      	blx	r3
}
 800642a:	bf00      	nop
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000f20 	.word	0x20000f20

08006438 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006440:	f107 0308 	add.w	r3, r7, #8
 8006444:	4618      	mov	r0, r3
 8006446:	f000 f859 	bl	80064fc <prvGetNextExpireTime>
 800644a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4619      	mov	r1, r3
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f805 	bl	8006460 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006456:	f000 f8d7 	bl	8006608 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800645a:	bf00      	nop
 800645c:	e7f0      	b.n	8006440 <prvTimerTask+0x8>
	...

08006460 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800646a:	f7ff fa29 	bl	80058c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800646e:	f107 0308 	add.w	r3, r7, #8
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f866 	bl	8006544 <prvSampleTimeNow>
 8006478:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d130      	bne.n	80064e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <prvProcessTimerOrBlockTask+0x3c>
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d806      	bhi.n	800649c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800648e:	f7ff fa25 	bl	80058dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff81 	bl	800639c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800649a:	e024      	b.n	80064e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064a2:	4b13      	ldr	r3, [pc, #76]	@ (80064f0 <prvProcessTimerOrBlockTask+0x90>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <prvProcessTimerOrBlockTask+0x50>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <prvProcessTimerOrBlockTask+0x52>
 80064b0:	2300      	movs	r3, #0
 80064b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <prvProcessTimerOrBlockTask+0x94>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	f7fe ff65 	bl	8005390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064c6:	f7ff fa09 	bl	80058dc <xTaskResumeAll>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064d0:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <prvProcessTimerOrBlockTask+0x98>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
}
 80064e0:	e001      	b.n	80064e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064e2:	f7ff f9fb 	bl	80058dc <xTaskResumeAll>
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000f24 	.word	0x20000f24
 80064f4:	20000f28 	.word	0x20000f28
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006504:	4b0e      	ldr	r3, [pc, #56]	@ (8006540 <prvGetNextExpireTime+0x44>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <prvGetNextExpireTime+0x16>
 800650e:	2201      	movs	r2, #1
 8006510:	e000      	b.n	8006514 <prvGetNextExpireTime+0x18>
 8006512:	2200      	movs	r2, #0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006520:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <prvGetNextExpireTime+0x44>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e001      	b.n	8006530 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000f20 	.word	0x20000f20

08006544 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800654c:	f7ff fa64 	bl	8005a18 <xTaskGetTickCount>
 8006550:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <prvSampleTimeNow+0x3c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	429a      	cmp	r2, r3
 800655a:	d205      	bcs.n	8006568 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800655c:	f000 f93a 	bl	80067d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e002      	b.n	800656e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800656e:	4a04      	ldr	r2, [pc, #16]	@ (8006580 <prvSampleTimeNow+0x3c>)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006574:	68fb      	ldr	r3, [r7, #12]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000f30 	.word	0x20000f30

08006584 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d812      	bhi.n	80065d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e01b      	b.n	80065f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065be:	4b10      	ldr	r3, [pc, #64]	@ (8006600 <prvInsertTimerInActiveList+0x7c>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe f8fa 	bl	80047c2 <vListInsert>
 80065ce:	e012      	b.n	80065f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d206      	bcs.n	80065e6 <prvInsertTimerInActiveList+0x62>
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e007      	b.n	80065f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065e6:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <prvInsertTimerInActiveList+0x80>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f7fe f8e6 	bl	80047c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065f6:	697b      	ldr	r3, [r7, #20]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000f24 	.word	0x20000f24
 8006604:	20000f20 	.word	0x20000f20

08006608 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	@ 0x38
 800660c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800660e:	e0ce      	b.n	80067ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da19      	bge.n	800664a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006616:	1d3b      	adds	r3, r7, #4
 8006618:	3304      	adds	r3, #4
 800661a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61fb      	str	r3, [r7, #28]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800663a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006640:	6850      	ldr	r0, [r2, #4]
 8006642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006644:	6892      	ldr	r2, [r2, #8]
 8006646:	4611      	mov	r1, r2
 8006648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f2c0 80ae 	blt.w	80067ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe f8e6 	bl	8004834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006668:	463b      	mov	r3, r7
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff ff6a 	bl	8006544 <prvSampleTimeNow>
 8006670:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b09      	cmp	r3, #9
 8006676:	f200 8097 	bhi.w	80067a8 <prvProcessReceivedCommands+0x1a0>
 800667a:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <prvProcessReceivedCommands+0x78>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066a9 	.word	0x080066a9
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066a9 	.word	0x080066a9
 800668c:	0800671f 	.word	0x0800671f
 8006690:	08006733 	.word	0x08006733
 8006694:	0800677f 	.word	0x0800677f
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066a9 	.word	0x080066a9
 80066a0:	0800671f 	.word	0x0800671f
 80066a4:	08006733 	.word	0x08006733
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	18d1      	adds	r1, r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c8:	f7ff ff5c 	bl	8006584 <prvInsertTimerInActiveList>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d06c      	beq.n	80067ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d061      	beq.n	80067ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	441a      	add	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066fa:	f7ff fe01 	bl	8006300 <xTimerGenericCommand>
 80066fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d152      	bne.n	80067ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	61bb      	str	r3, [r7, #24]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006730:	e03d      	b.n	80067ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	617b      	str	r3, [r7, #20]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	18d1      	adds	r1, r2, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006778:	f7ff ff04 	bl	8006584 <prvInsertTimerInActiveList>
					break;
 800677c:	e017      	b.n	80067ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800678c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678e:	f000 fbeb 	bl	8006f68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006792:	e00c      	b.n	80067ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067a6:	e002      	b.n	80067ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <prvProcessReceivedCommands+0x1a6>
					break;
 80067ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ae:	4b08      	ldr	r3, [pc, #32]	@ (80067d0 <prvProcessReceivedCommands+0x1c8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	1d39      	adds	r1, r7, #4
 80067b4:	2200      	movs	r2, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fb4c 	bl	8004e54 <xQueueReceive>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f47f af26 	bne.w	8006610 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	3730      	adds	r7, #48	@ 0x30
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000f28 	.word	0x20000f28

080067d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067da:	e049      	b.n	8006870 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006898 <prvSwitchTimerLists+0xc4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006898 <prvSwitchTimerLists+0xc4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe f81d 	bl	8004834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d02f      	beq.n	8006870 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	d90e      	bls.n	8006840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800682e:	4b1a      	ldr	r3, [pc, #104]	@ (8006898 <prvSwitchTimerLists+0xc4>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7fd ffc2 	bl	80047c2 <vListInsert>
 800683e:	e017      	b.n	8006870 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006840:	2300      	movs	r3, #0
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	2100      	movs	r1, #0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fd58 	bl	8006300 <xTimerGenericCommand>
 8006850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	603b      	str	r3, [r7, #0]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006870:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <prvSwitchTimerLists+0xc4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1b0      	bne.n	80067dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800687a:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <prvSwitchTimerLists+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006880:	4b06      	ldr	r3, [pc, #24]	@ (800689c <prvSwitchTimerLists+0xc8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a04      	ldr	r2, [pc, #16]	@ (8006898 <prvSwitchTimerLists+0xc4>)
 8006886:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006888:	4a04      	ldr	r2, [pc, #16]	@ (800689c <prvSwitchTimerLists+0xc8>)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6013      	str	r3, [r2, #0]
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000f20 	.word	0x20000f20
 800689c:	20000f24 	.word	0x20000f24

080068a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068a6:	f000 f96f 	bl	8006b88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068aa:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <prvCheckForValidListAndQueue+0x60>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d120      	bne.n	80068f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068b2:	4814      	ldr	r0, [pc, #80]	@ (8006904 <prvCheckForValidListAndQueue+0x64>)
 80068b4:	f7fd ff34 	bl	8004720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068b8:	4813      	ldr	r0, [pc, #76]	@ (8006908 <prvCheckForValidListAndQueue+0x68>)
 80068ba:	f7fd ff31 	bl	8004720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068be:	4b13      	ldr	r3, [pc, #76]	@ (800690c <prvCheckForValidListAndQueue+0x6c>)
 80068c0:	4a10      	ldr	r2, [pc, #64]	@ (8006904 <prvCheckForValidListAndQueue+0x64>)
 80068c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068c4:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <prvCheckForValidListAndQueue+0x70>)
 80068c6:	4a10      	ldr	r2, [pc, #64]	@ (8006908 <prvCheckForValidListAndQueue+0x68>)
 80068c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068ca:	2300      	movs	r3, #0
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	4b11      	ldr	r3, [pc, #68]	@ (8006914 <prvCheckForValidListAndQueue+0x74>)
 80068d0:	4a11      	ldr	r2, [pc, #68]	@ (8006918 <prvCheckForValidListAndQueue+0x78>)
 80068d2:	2110      	movs	r1, #16
 80068d4:	200a      	movs	r0, #10
 80068d6:	f7fe f841 	bl	800495c <xQueueGenericCreateStatic>
 80068da:	4603      	mov	r3, r0
 80068dc:	4a08      	ldr	r2, [pc, #32]	@ (8006900 <prvCheckForValidListAndQueue+0x60>)
 80068de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068e0:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <prvCheckForValidListAndQueue+0x60>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <prvCheckForValidListAndQueue+0x60>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	490b      	ldr	r1, [pc, #44]	@ (800691c <prvCheckForValidListAndQueue+0x7c>)
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fd24 	bl	800533c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068f4:	f000 f97a 	bl	8006bec <vPortExitCritical>
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000f28 	.word	0x20000f28
 8006904:	20000ef8 	.word	0x20000ef8
 8006908:	20000f0c 	.word	0x20000f0c
 800690c:	20000f20 	.word	0x20000f20
 8006910:	20000f24 	.word	0x20000f24
 8006914:	20000fd4 	.word	0x20000fd4
 8006918:	20000f34 	.word	0x20000f34
 800691c:	08008288 	.word	0x08008288

08006920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3b04      	subs	r3, #4
 8006930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b04      	subs	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 0201 	bic.w	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3b04      	subs	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006950:	4a0c      	ldr	r2, [pc, #48]	@ (8006984 <pxPortInitialiseStack+0x64>)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3b14      	subs	r3, #20
 800695a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b04      	subs	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f06f 0202 	mvn.w	r2, #2
 800696e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3b20      	subs	r3, #32
 8006974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	08006989 	.word	0x08006989

08006988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006992:	4b13      	ldr	r3, [pc, #76]	@ (80069e0 <prvTaskExitError+0x58>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d00b      	beq.n	80069b4 <prvTaskExitError+0x2c>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60fb      	str	r3, [r7, #12]
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <prvTaskExitError+0x28>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	60bb      	str	r3, [r7, #8]
}
 80069c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069c8:	bf00      	nop
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0fc      	beq.n	80069ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	2000000c 	.word	0x2000000c
	...

080069f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069f0:	4b07      	ldr	r3, [pc, #28]	@ (8006a10 <pxCurrentTCBConst2>)
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	6808      	ldr	r0, [r1, #0]
 80069f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	f380 8809 	msr	PSP, r0
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8811 	msr	BASEPRI, r0
 8006a0a:	4770      	bx	lr
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst2>:
 8006a10:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a18:	4808      	ldr	r0, [pc, #32]	@ (8006a3c <prvPortStartFirstTask+0x24>)
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	6800      	ldr	r0, [r0, #0]
 8006a1e:	f380 8808 	msr	MSP, r0
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8814 	msr	CONTROL, r0
 8006a2a:	b662      	cpsie	i
 8006a2c:	b661      	cpsie	f
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	df00      	svc	0
 8006a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed08 	.word	0xe000ed08

08006a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a46:	4b47      	ldr	r3, [pc, #284]	@ (8006b64 <xPortStartScheduler+0x124>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a47      	ldr	r2, [pc, #284]	@ (8006b68 <xPortStartScheduler+0x128>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10b      	bne.n	8006a68 <xPortStartScheduler+0x28>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a68:	4b3e      	ldr	r3, [pc, #248]	@ (8006b64 <xPortStartScheduler+0x124>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b6c <xPortStartScheduler+0x12c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d10b      	bne.n	8006a8a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	613b      	str	r3, [r7, #16]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <xPortStartScheduler+0x130>)
 8006a8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	22ff      	movs	r2, #255	@ 0xff
 8006a9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	4b31      	ldr	r3, [pc, #196]	@ (8006b74 <xPortStartScheduler+0x134>)
 8006ab0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ab2:	4b31      	ldr	r3, [pc, #196]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006ab4:	2207      	movs	r2, #7
 8006ab6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab8:	e009      	b.n	8006ace <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aba:	4b2f      	ldr	r3, [pc, #188]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006ac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d0ef      	beq.n	8006aba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ada:	4b27      	ldr	r3, [pc, #156]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1c3 0307 	rsb	r3, r3, #7
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d00b      	beq.n	8006afe <xPortStartScheduler+0xbe>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60bb      	str	r3, [r7, #8]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006afe:	4b1e      	ldr	r3, [pc, #120]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	4a1c      	ldr	r2, [pc, #112]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b08:	4b1b      	ldr	r3, [pc, #108]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b10:	4a19      	ldr	r2, [pc, #100]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b1c:	4b17      	ldr	r3, [pc, #92]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a16      	ldr	r2, [pc, #88]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b28:	4b14      	ldr	r3, [pc, #80]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b34:	f000 f8da 	bl	8006cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b38:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <xPortStartScheduler+0x140>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b3e:	f000 f8f9 	bl	8006d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b42:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <xPortStartScheduler+0x144>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a0f      	ldr	r2, [pc, #60]	@ (8006b84 <xPortStartScheduler+0x144>)
 8006b48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b4e:	f7ff ff63 	bl	8006a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b52:	f7ff f82b 	bl	8005bac <vTaskSwitchContext>
	prvTaskExitError();
 8006b56:	f7ff ff17 	bl	8006988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	e000ed00 	.word	0xe000ed00
 8006b68:	410fc271 	.word	0x410fc271
 8006b6c:	410fc270 	.word	0x410fc270
 8006b70:	e000e400 	.word	0xe000e400
 8006b74:	20001024 	.word	0x20001024
 8006b78:	20001028 	.word	0x20001028
 8006b7c:	e000ed20 	.word	0xe000ed20
 8006b80:	2000000c 	.word	0x2000000c
 8006b84:	e000ef34 	.word	0xe000ef34

08006b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
}
 8006ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006baa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bac:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d110      	bne.n	8006bd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006be8 <vPortEnterCritical+0x60>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	603b      	str	r3, [r7, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <vPortEnterCritical+0x4a>
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000000c 	.word	0x2000000c
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <vPortExitCritical+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <vPortExitCritical+0x26>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c12:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	4a08      	ldr	r2, [pc, #32]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c1c:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <vPortExitCritical+0x44>
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c64:	f380 8811 	msr	BASEPRI, r0
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f7fe ff9c 	bl	8005bac <vTaskSwitchContext>
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f380 8811 	msr	BASEPRI, r0
 8006c7c:	bc09      	pop	{r0, r3}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f01e 0f10 	tst.w	lr, #16
 8006c8a:	bf08      	it	eq
 8006c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c90:	f380 8809 	msr	PSP, r0
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc2:	f7fe feb9 	bl	8005a38 <xTaskIncrementTick>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <xPortSysTickHandler+0x40>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <vPortSetupTimerInterrupt+0x38>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <vPortSetupTimerInterrupt+0x3c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0a      	ldr	r2, [pc, #40]	@ (8006d2c <vPortSetupTimerInterrupt+0x40>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	4a09      	ldr	r2, [pc, #36]	@ (8006d30 <vPortSetupTimerInterrupt+0x44>)
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d0e:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006d10:	2207      	movs	r2, #7
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e010 	.word	0xe000e010
 8006d24:	e000e018 	.word	0xe000e018
 8006d28:	20000000 	.word	0x20000000
 8006d2c:	10624dd3 	.word	0x10624dd3
 8006d30:	e000e014 	.word	0xe000e014

08006d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d44 <vPortEnableVFP+0x10>
 8006d38:	6801      	ldr	r1, [r0, #0]
 8006d3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d3e:	6001      	str	r1, [r0, #0]
 8006d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d42:	bf00      	nop
 8006d44:	e000ed88 	.word	0xe000ed88

08006d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d4e:	f3ef 8305 	mrs	r3, IPSR
 8006d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d915      	bls.n	8006d86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d5a:	4a18      	ldr	r2, [pc, #96]	@ (8006dbc <vPortValidateInterruptPriority+0x74>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d64:	4b16      	ldr	r3, [pc, #88]	@ (8006dc0 <vPortValidateInterruptPriority+0x78>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	7afa      	ldrb	r2, [r7, #11]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d20b      	bcs.n	8006d86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d86:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc4 <vPortValidateInterruptPriority+0x7c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <vPortValidateInterruptPriority+0x80>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d90b      	bls.n	8006dae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	603b      	str	r3, [r7, #0]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vPortValidateInterruptPriority+0x62>
	}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	e000e3f0 	.word	0xe000e3f0
 8006dc0:	20001024 	.word	0x20001024
 8006dc4:	e000ed0c 	.word	0xe000ed0c
 8006dc8:	20001028 	.word	0x20001028

08006dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	@ 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dd8:	f7fe fd72 	bl	80058c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8006f50 <pvPortMalloc+0x184>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006de4:	f000 f924 	bl	8007030 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006de8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f54 <pvPortMalloc+0x188>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 8095 	bne.w	8006f20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d015      	beq.n	8006e3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	3308      	adds	r3, #8
 8006e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <pvPortMalloc+0x6e>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	617b      	str	r3, [r7, #20]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d06f      	beq.n	8006f20 <pvPortMalloc+0x154>
 8006e40:	4b45      	ldr	r3, [pc, #276]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d86a      	bhi.n	8006f20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e4a:	4b44      	ldr	r3, [pc, #272]	@ (8006f5c <pvPortMalloc+0x190>)
 8006e4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e4e:	4b43      	ldr	r3, [pc, #268]	@ (8006f5c <pvPortMalloc+0x190>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e54:	e004      	b.n	8006e60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d903      	bls.n	8006e72 <pvPortMalloc+0xa6>
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f1      	bne.n	8006e56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e72:	4b37      	ldr	r3, [pc, #220]	@ (8006f50 <pvPortMalloc+0x184>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d051      	beq.n	8006f20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2208      	movs	r2, #8
 8006e82:	4413      	add	r3, r2
 8006e84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	1ad2      	subs	r2, r2, r3
 8006e96:	2308      	movs	r3, #8
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d920      	bls.n	8006ee0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <pvPortMalloc+0xfc>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	613b      	str	r3, [r7, #16]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eda:	69b8      	ldr	r0, [r7, #24]
 8006edc:	f000 f90a 	bl	80070f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	4a1b      	ldr	r2, [pc, #108]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006eec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f60 <pvPortMalloc+0x194>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d203      	bcs.n	8006f02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006efa:	4b17      	ldr	r3, [pc, #92]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	@ (8006f60 <pvPortMalloc+0x194>)
 8006f00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <pvPortMalloc+0x188>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <pvPortMalloc+0x198>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	4a11      	ldr	r2, [pc, #68]	@ (8006f64 <pvPortMalloc+0x198>)
 8006f1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f20:	f7fe fcdc 	bl	80058dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <pvPortMalloc+0x17a>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	60fb      	str	r3, [r7, #12]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <pvPortMalloc+0x176>
	return pvReturn;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3728      	adds	r7, #40	@ 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20005e54 	.word	0x20005e54
 8006f54:	20005e68 	.word	0x20005e68
 8006f58:	20005e58 	.word	0x20005e58
 8006f5c:	20005e4c 	.word	0x20005e4c
 8006f60:	20005e5c 	.word	0x20005e5c
 8006f64:	20005e60 	.word	0x20005e60

08006f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d04f      	beq.n	800701a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <vPortFree+0xbc>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <vPortFree+0x46>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <vPortFree+0x66>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	60bb      	str	r3, [r7, #8]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <vPortFree+0xbc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11a      	bne.n	800701a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <vPortFree+0xbc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ff4:	f7fe fc64 	bl	80058c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <vPortFree+0xc0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4413      	add	r3, r2
 8007002:	4a09      	ldr	r2, [pc, #36]	@ (8007028 <vPortFree+0xc0>)
 8007004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f000 f874 	bl	80070f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800700c:	4b07      	ldr	r3, [pc, #28]	@ (800702c <vPortFree+0xc4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	4a06      	ldr	r2, [pc, #24]	@ (800702c <vPortFree+0xc4>)
 8007014:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007016:	f7fe fc61 	bl	80058dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20005e68 	.word	0x20005e68
 8007028:	20005e58 	.word	0x20005e58
 800702c:	20005e64 	.word	0x20005e64

08007030 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007036:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800703a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800703c:	4b27      	ldr	r3, [pc, #156]	@ (80070dc <prvHeapInit+0xac>)
 800703e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3307      	adds	r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	4a1f      	ldr	r2, [pc, #124]	@ (80070dc <prvHeapInit+0xac>)
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007068:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <prvHeapInit+0xb0>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800706e:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <prvHeapInit+0xb0>)
 8007070:	2200      	movs	r2, #0
 8007072:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4413      	add	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800707c:	2208      	movs	r2, #8
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a15      	ldr	r2, [pc, #84]	@ (80070e4 <prvHeapInit+0xb4>)
 8007090:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007092:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <prvHeapInit+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800709a:	4b12      	ldr	r3, [pc, #72]	@ (80070e4 <prvHeapInit+0xb4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <prvHeapInit+0xb4>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a0a      	ldr	r2, [pc, #40]	@ (80070e8 <prvHeapInit+0xb8>)
 80070be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <prvHeapInit+0xbc>)
 80070c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070c8:	4b09      	ldr	r3, [pc, #36]	@ (80070f0 <prvHeapInit+0xc0>)
 80070ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	2000102c 	.word	0x2000102c
 80070e0:	20005e4c 	.word	0x20005e4c
 80070e4:	20005e54 	.word	0x20005e54
 80070e8:	20005e5c 	.word	0x20005e5c
 80070ec:	20005e58 	.word	0x20005e58
 80070f0:	20005e68 	.word	0x20005e68

080070f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070fc:	4b28      	ldr	r3, [pc, #160]	@ (80071a0 <prvInsertBlockIntoFreeList+0xac>)
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e002      	b.n	8007108 <prvInsertBlockIntoFreeList+0x14>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d8f7      	bhi.n	8007102 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4413      	add	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d108      	bne.n	8007136 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	441a      	add	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d118      	bne.n	800717c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d00d      	beq.n	8007172 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e008      	b.n	8007184 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007172:	4b0c      	ldr	r3, [pc, #48]	@ (80071a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e003      	b.n	8007184 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d002      	beq.n	8007192 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20005e4c 	.word	0x20005e4c
 80071a4:	20005e54 	.word	0x20005e54

080071a8 <std>:
 80071a8:	2300      	movs	r3, #0
 80071aa:	b510      	push	{r4, lr}
 80071ac:	4604      	mov	r4, r0
 80071ae:	e9c0 3300 	strd	r3, r3, [r0]
 80071b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071b6:	6083      	str	r3, [r0, #8]
 80071b8:	8181      	strh	r1, [r0, #12]
 80071ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80071bc:	81c2      	strh	r2, [r0, #14]
 80071be:	6183      	str	r3, [r0, #24]
 80071c0:	4619      	mov	r1, r3
 80071c2:	2208      	movs	r2, #8
 80071c4:	305c      	adds	r0, #92	@ 0x5c
 80071c6:	f000 f9f9 	bl	80075bc <memset>
 80071ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007200 <std+0x58>)
 80071cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80071ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <std+0x5c>)
 80071d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007208 <std+0x60>)
 80071d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071d6:	4b0d      	ldr	r3, [pc, #52]	@ (800720c <std+0x64>)
 80071d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <std+0x68>)
 80071dc:	6224      	str	r4, [r4, #32]
 80071de:	429c      	cmp	r4, r3
 80071e0:	d006      	beq.n	80071f0 <std+0x48>
 80071e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071e6:	4294      	cmp	r4, r2
 80071e8:	d002      	beq.n	80071f0 <std+0x48>
 80071ea:	33d0      	adds	r3, #208	@ 0xd0
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d105      	bne.n	80071fc <std+0x54>
 80071f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f8:	f000 bab6 	b.w	8007768 <__retarget_lock_init_recursive>
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	0800740d 	.word	0x0800740d
 8007204:	0800742f 	.word	0x0800742f
 8007208:	08007467 	.word	0x08007467
 800720c:	0800748b 	.word	0x0800748b
 8007210:	20005e6c 	.word	0x20005e6c

08007214 <stdio_exit_handler>:
 8007214:	4a02      	ldr	r2, [pc, #8]	@ (8007220 <stdio_exit_handler+0xc>)
 8007216:	4903      	ldr	r1, [pc, #12]	@ (8007224 <stdio_exit_handler+0x10>)
 8007218:	4803      	ldr	r0, [pc, #12]	@ (8007228 <stdio_exit_handler+0x14>)
 800721a:	f000 b869 	b.w	80072f0 <_fwalk_sglue>
 800721e:	bf00      	nop
 8007220:	20000010 	.word	0x20000010
 8007224:	08008021 	.word	0x08008021
 8007228:	20000020 	.word	0x20000020

0800722c <cleanup_stdio>:
 800722c:	6841      	ldr	r1, [r0, #4]
 800722e:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <cleanup_stdio+0x34>)
 8007230:	4299      	cmp	r1, r3
 8007232:	b510      	push	{r4, lr}
 8007234:	4604      	mov	r4, r0
 8007236:	d001      	beq.n	800723c <cleanup_stdio+0x10>
 8007238:	f000 fef2 	bl	8008020 <_fflush_r>
 800723c:	68a1      	ldr	r1, [r4, #8]
 800723e:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <cleanup_stdio+0x38>)
 8007240:	4299      	cmp	r1, r3
 8007242:	d002      	beq.n	800724a <cleanup_stdio+0x1e>
 8007244:	4620      	mov	r0, r4
 8007246:	f000 feeb 	bl	8008020 <_fflush_r>
 800724a:	68e1      	ldr	r1, [r4, #12]
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <cleanup_stdio+0x3c>)
 800724e:	4299      	cmp	r1, r3
 8007250:	d004      	beq.n	800725c <cleanup_stdio+0x30>
 8007252:	4620      	mov	r0, r4
 8007254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007258:	f000 bee2 	b.w	8008020 <_fflush_r>
 800725c:	bd10      	pop	{r4, pc}
 800725e:	bf00      	nop
 8007260:	20005e6c 	.word	0x20005e6c
 8007264:	20005ed4 	.word	0x20005ed4
 8007268:	20005f3c 	.word	0x20005f3c

0800726c <global_stdio_init.part.0>:
 800726c:	b510      	push	{r4, lr}
 800726e:	4b0b      	ldr	r3, [pc, #44]	@ (800729c <global_stdio_init.part.0+0x30>)
 8007270:	4c0b      	ldr	r4, [pc, #44]	@ (80072a0 <global_stdio_init.part.0+0x34>)
 8007272:	4a0c      	ldr	r2, [pc, #48]	@ (80072a4 <global_stdio_init.part.0+0x38>)
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	4620      	mov	r0, r4
 8007278:	2200      	movs	r2, #0
 800727a:	2104      	movs	r1, #4
 800727c:	f7ff ff94 	bl	80071a8 <std>
 8007280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007284:	2201      	movs	r2, #1
 8007286:	2109      	movs	r1, #9
 8007288:	f7ff ff8e 	bl	80071a8 <std>
 800728c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007290:	2202      	movs	r2, #2
 8007292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007296:	2112      	movs	r1, #18
 8007298:	f7ff bf86 	b.w	80071a8 <std>
 800729c:	20005fa4 	.word	0x20005fa4
 80072a0:	20005e6c 	.word	0x20005e6c
 80072a4:	08007215 	.word	0x08007215

080072a8 <__sfp_lock_acquire>:
 80072a8:	4801      	ldr	r0, [pc, #4]	@ (80072b0 <__sfp_lock_acquire+0x8>)
 80072aa:	f000 ba5e 	b.w	800776a <__retarget_lock_acquire_recursive>
 80072ae:	bf00      	nop
 80072b0:	20005fad 	.word	0x20005fad

080072b4 <__sfp_lock_release>:
 80072b4:	4801      	ldr	r0, [pc, #4]	@ (80072bc <__sfp_lock_release+0x8>)
 80072b6:	f000 ba59 	b.w	800776c <__retarget_lock_release_recursive>
 80072ba:	bf00      	nop
 80072bc:	20005fad 	.word	0x20005fad

080072c0 <__sinit>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	4604      	mov	r4, r0
 80072c4:	f7ff fff0 	bl	80072a8 <__sfp_lock_acquire>
 80072c8:	6a23      	ldr	r3, [r4, #32]
 80072ca:	b11b      	cbz	r3, 80072d4 <__sinit+0x14>
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	f7ff bff0 	b.w	80072b4 <__sfp_lock_release>
 80072d4:	4b04      	ldr	r3, [pc, #16]	@ (80072e8 <__sinit+0x28>)
 80072d6:	6223      	str	r3, [r4, #32]
 80072d8:	4b04      	ldr	r3, [pc, #16]	@ (80072ec <__sinit+0x2c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f5      	bne.n	80072cc <__sinit+0xc>
 80072e0:	f7ff ffc4 	bl	800726c <global_stdio_init.part.0>
 80072e4:	e7f2      	b.n	80072cc <__sinit+0xc>
 80072e6:	bf00      	nop
 80072e8:	0800722d 	.word	0x0800722d
 80072ec:	20005fa4 	.word	0x20005fa4

080072f0 <_fwalk_sglue>:
 80072f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f4:	4607      	mov	r7, r0
 80072f6:	4688      	mov	r8, r1
 80072f8:	4614      	mov	r4, r2
 80072fa:	2600      	movs	r6, #0
 80072fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007300:	f1b9 0901 	subs.w	r9, r9, #1
 8007304:	d505      	bpl.n	8007312 <_fwalk_sglue+0x22>
 8007306:	6824      	ldr	r4, [r4, #0]
 8007308:	2c00      	cmp	r4, #0
 800730a:	d1f7      	bne.n	80072fc <_fwalk_sglue+0xc>
 800730c:	4630      	mov	r0, r6
 800730e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d907      	bls.n	8007328 <_fwalk_sglue+0x38>
 8007318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800731c:	3301      	adds	r3, #1
 800731e:	d003      	beq.n	8007328 <_fwalk_sglue+0x38>
 8007320:	4629      	mov	r1, r5
 8007322:	4638      	mov	r0, r7
 8007324:	47c0      	blx	r8
 8007326:	4306      	orrs	r6, r0
 8007328:	3568      	adds	r5, #104	@ 0x68
 800732a:	e7e9      	b.n	8007300 <_fwalk_sglue+0x10>

0800732c <iprintf>:
 800732c:	b40f      	push	{r0, r1, r2, r3}
 800732e:	b507      	push	{r0, r1, r2, lr}
 8007330:	4906      	ldr	r1, [pc, #24]	@ (800734c <iprintf+0x20>)
 8007332:	ab04      	add	r3, sp, #16
 8007334:	6808      	ldr	r0, [r1, #0]
 8007336:	f853 2b04 	ldr.w	r2, [r3], #4
 800733a:	6881      	ldr	r1, [r0, #8]
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	f000 fb47 	bl	80079d0 <_vfiprintf_r>
 8007342:	b003      	add	sp, #12
 8007344:	f85d eb04 	ldr.w	lr, [sp], #4
 8007348:	b004      	add	sp, #16
 800734a:	4770      	bx	lr
 800734c:	2000001c 	.word	0x2000001c

08007350 <_puts_r>:
 8007350:	6a03      	ldr	r3, [r0, #32]
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	6884      	ldr	r4, [r0, #8]
 8007356:	4605      	mov	r5, r0
 8007358:	460e      	mov	r6, r1
 800735a:	b90b      	cbnz	r3, 8007360 <_puts_r+0x10>
 800735c:	f7ff ffb0 	bl	80072c0 <__sinit>
 8007360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d405      	bmi.n	8007372 <_puts_r+0x22>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	0598      	lsls	r0, r3, #22
 800736a:	d402      	bmi.n	8007372 <_puts_r+0x22>
 800736c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800736e:	f000 f9fc 	bl	800776a <__retarget_lock_acquire_recursive>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	0719      	lsls	r1, r3, #28
 8007376:	d502      	bpl.n	800737e <_puts_r+0x2e>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d135      	bne.n	80073ea <_puts_r+0x9a>
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 f8c5 	bl	8007510 <__swsetup_r>
 8007386:	b380      	cbz	r0, 80073ea <_puts_r+0x9a>
 8007388:	f04f 35ff 	mov.w	r5, #4294967295
 800738c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800738e:	07da      	lsls	r2, r3, #31
 8007390:	d405      	bmi.n	800739e <_puts_r+0x4e>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	d402      	bmi.n	800739e <_puts_r+0x4e>
 8007398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800739a:	f000 f9e7 	bl	800776c <__retarget_lock_release_recursive>
 800739e:	4628      	mov	r0, r5
 80073a0:	bd70      	pop	{r4, r5, r6, pc}
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	da04      	bge.n	80073b0 <_puts_r+0x60>
 80073a6:	69a2      	ldr	r2, [r4, #24]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	dc17      	bgt.n	80073dc <_puts_r+0x8c>
 80073ac:	290a      	cmp	r1, #10
 80073ae:	d015      	beq.n	80073dc <_puts_r+0x8c>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	7019      	strb	r1, [r3, #0]
 80073b8:	68a3      	ldr	r3, [r4, #8]
 80073ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073be:	3b01      	subs	r3, #1
 80073c0:	60a3      	str	r3, [r4, #8]
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d1ed      	bne.n	80073a2 <_puts_r+0x52>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da11      	bge.n	80073ee <_puts_r+0x9e>
 80073ca:	4622      	mov	r2, r4
 80073cc:	210a      	movs	r1, #10
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f85f 	bl	8007492 <__swbuf_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0d7      	beq.n	8007388 <_puts_r+0x38>
 80073d8:	250a      	movs	r5, #10
 80073da:	e7d7      	b.n	800738c <_puts_r+0x3c>
 80073dc:	4622      	mov	r2, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f857 	bl	8007492 <__swbuf_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d1e7      	bne.n	80073b8 <_puts_r+0x68>
 80073e8:	e7ce      	b.n	8007388 <_puts_r+0x38>
 80073ea:	3e01      	subs	r6, #1
 80073ec:	e7e4      	b.n	80073b8 <_puts_r+0x68>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	220a      	movs	r2, #10
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e7ee      	b.n	80073d8 <_puts_r+0x88>
	...

080073fc <puts>:
 80073fc:	4b02      	ldr	r3, [pc, #8]	@ (8007408 <puts+0xc>)
 80073fe:	4601      	mov	r1, r0
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	f7ff bfa5 	b.w	8007350 <_puts_r>
 8007406:	bf00      	nop
 8007408:	2000001c 	.word	0x2000001c

0800740c <__sread>:
 800740c:	b510      	push	{r4, lr}
 800740e:	460c      	mov	r4, r1
 8007410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007414:	f000 f95a 	bl	80076cc <_read_r>
 8007418:	2800      	cmp	r0, #0
 800741a:	bfab      	itete	ge
 800741c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800741e:	89a3      	ldrhlt	r3, [r4, #12]
 8007420:	181b      	addge	r3, r3, r0
 8007422:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007426:	bfac      	ite	ge
 8007428:	6563      	strge	r3, [r4, #84]	@ 0x54
 800742a:	81a3      	strhlt	r3, [r4, #12]
 800742c:	bd10      	pop	{r4, pc}

0800742e <__swrite>:
 800742e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	461f      	mov	r7, r3
 8007434:	898b      	ldrh	r3, [r1, #12]
 8007436:	05db      	lsls	r3, r3, #23
 8007438:	4605      	mov	r5, r0
 800743a:	460c      	mov	r4, r1
 800743c:	4616      	mov	r6, r2
 800743e:	d505      	bpl.n	800744c <__swrite+0x1e>
 8007440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007444:	2302      	movs	r3, #2
 8007446:	2200      	movs	r2, #0
 8007448:	f000 f92e 	bl	80076a8 <_lseek_r>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007452:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	4632      	mov	r2, r6
 800745a:	463b      	mov	r3, r7
 800745c:	4628      	mov	r0, r5
 800745e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007462:	f000 b945 	b.w	80076f0 <_write_r>

08007466 <__sseek>:
 8007466:	b510      	push	{r4, lr}
 8007468:	460c      	mov	r4, r1
 800746a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746e:	f000 f91b 	bl	80076a8 <_lseek_r>
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	bf15      	itete	ne
 8007478:	6560      	strne	r0, [r4, #84]	@ 0x54
 800747a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800747e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007482:	81a3      	strheq	r3, [r4, #12]
 8007484:	bf18      	it	ne
 8007486:	81a3      	strhne	r3, [r4, #12]
 8007488:	bd10      	pop	{r4, pc}

0800748a <__sclose>:
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 b89d 	b.w	80075cc <_close_r>

08007492 <__swbuf_r>:
 8007492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007494:	460e      	mov	r6, r1
 8007496:	4614      	mov	r4, r2
 8007498:	4605      	mov	r5, r0
 800749a:	b118      	cbz	r0, 80074a4 <__swbuf_r+0x12>
 800749c:	6a03      	ldr	r3, [r0, #32]
 800749e:	b90b      	cbnz	r3, 80074a4 <__swbuf_r+0x12>
 80074a0:	f7ff ff0e 	bl	80072c0 <__sinit>
 80074a4:	69a3      	ldr	r3, [r4, #24]
 80074a6:	60a3      	str	r3, [r4, #8]
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	071a      	lsls	r2, r3, #28
 80074ac:	d501      	bpl.n	80074b2 <__swbuf_r+0x20>
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	b943      	cbnz	r3, 80074c4 <__swbuf_r+0x32>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 f82b 	bl	8007510 <__swsetup_r>
 80074ba:	b118      	cbz	r0, 80074c4 <__swbuf_r+0x32>
 80074bc:	f04f 37ff 	mov.w	r7, #4294967295
 80074c0:	4638      	mov	r0, r7
 80074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	6922      	ldr	r2, [r4, #16]
 80074c8:	1a98      	subs	r0, r3, r2
 80074ca:	6963      	ldr	r3, [r4, #20]
 80074cc:	b2f6      	uxtb	r6, r6
 80074ce:	4283      	cmp	r3, r0
 80074d0:	4637      	mov	r7, r6
 80074d2:	dc05      	bgt.n	80074e0 <__swbuf_r+0x4e>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 fda2 	bl	8008020 <_fflush_r>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d1ed      	bne.n	80074bc <__swbuf_r+0x2a>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	701e      	strb	r6, [r3, #0]
 80074ee:	6962      	ldr	r2, [r4, #20]
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d004      	beq.n	8007500 <__swbuf_r+0x6e>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	07db      	lsls	r3, r3, #31
 80074fa:	d5e1      	bpl.n	80074c0 <__swbuf_r+0x2e>
 80074fc:	2e0a      	cmp	r6, #10
 80074fe:	d1df      	bne.n	80074c0 <__swbuf_r+0x2e>
 8007500:	4621      	mov	r1, r4
 8007502:	4628      	mov	r0, r5
 8007504:	f000 fd8c 	bl	8008020 <_fflush_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	d0d9      	beq.n	80074c0 <__swbuf_r+0x2e>
 800750c:	e7d6      	b.n	80074bc <__swbuf_r+0x2a>
	...

08007510 <__swsetup_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4b29      	ldr	r3, [pc, #164]	@ (80075b8 <__swsetup_r+0xa8>)
 8007514:	4605      	mov	r5, r0
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	460c      	mov	r4, r1
 800751a:	b118      	cbz	r0, 8007524 <__swsetup_r+0x14>
 800751c:	6a03      	ldr	r3, [r0, #32]
 800751e:	b90b      	cbnz	r3, 8007524 <__swsetup_r+0x14>
 8007520:	f7ff fece 	bl	80072c0 <__sinit>
 8007524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007528:	0719      	lsls	r1, r3, #28
 800752a:	d422      	bmi.n	8007572 <__swsetup_r+0x62>
 800752c:	06da      	lsls	r2, r3, #27
 800752e:	d407      	bmi.n	8007540 <__swsetup_r+0x30>
 8007530:	2209      	movs	r2, #9
 8007532:	602a      	str	r2, [r5, #0]
 8007534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	e033      	b.n	80075a8 <__swsetup_r+0x98>
 8007540:	0758      	lsls	r0, r3, #29
 8007542:	d512      	bpl.n	800756a <__swsetup_r+0x5a>
 8007544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007546:	b141      	cbz	r1, 800755a <__swsetup_r+0x4a>
 8007548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800754c:	4299      	cmp	r1, r3
 800754e:	d002      	beq.n	8007556 <__swsetup_r+0x46>
 8007550:	4628      	mov	r0, r5
 8007552:	f000 f91b 	bl	800778c <_free_r>
 8007556:	2300      	movs	r3, #0
 8007558:	6363      	str	r3, [r4, #52]	@ 0x34
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	2300      	movs	r3, #0
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f043 0308 	orr.w	r3, r3, #8
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	b94b      	cbnz	r3, 800758a <__swsetup_r+0x7a>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800757c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007580:	d003      	beq.n	800758a <__swsetup_r+0x7a>
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f000 fd99 	bl	80080bc <__smakebuf_r>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	f013 0201 	ands.w	r2, r3, #1
 8007592:	d00a      	beq.n	80075aa <__swsetup_r+0x9a>
 8007594:	2200      	movs	r2, #0
 8007596:	60a2      	str	r2, [r4, #8]
 8007598:	6962      	ldr	r2, [r4, #20]
 800759a:	4252      	negs	r2, r2
 800759c:	61a2      	str	r2, [r4, #24]
 800759e:	6922      	ldr	r2, [r4, #16]
 80075a0:	b942      	cbnz	r2, 80075b4 <__swsetup_r+0xa4>
 80075a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075a6:	d1c5      	bne.n	8007534 <__swsetup_r+0x24>
 80075a8:	bd38      	pop	{r3, r4, r5, pc}
 80075aa:	0799      	lsls	r1, r3, #30
 80075ac:	bf58      	it	pl
 80075ae:	6962      	ldrpl	r2, [r4, #20]
 80075b0:	60a2      	str	r2, [r4, #8]
 80075b2:	e7f4      	b.n	800759e <__swsetup_r+0x8e>
 80075b4:	2000      	movs	r0, #0
 80075b6:	e7f7      	b.n	80075a8 <__swsetup_r+0x98>
 80075b8:	2000001c 	.word	0x2000001c

080075bc <memset>:
 80075bc:	4402      	add	r2, r0
 80075be:	4603      	mov	r3, r0
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d100      	bne.n	80075c6 <memset+0xa>
 80075c4:	4770      	bx	lr
 80075c6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ca:	e7f9      	b.n	80075c0 <memset+0x4>

080075cc <_close_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d06      	ldr	r5, [pc, #24]	@ (80075e8 <_close_r+0x1c>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	f7f9 fdd9 	bl	800118e <_close>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_close_r+0x1a>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_close_r+0x1a>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20005fa8 	.word	0x20005fa8

080075ec <_reclaim_reent>:
 80075ec:	4b2d      	ldr	r3, [pc, #180]	@ (80076a4 <_reclaim_reent+0xb8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4283      	cmp	r3, r0
 80075f2:	b570      	push	{r4, r5, r6, lr}
 80075f4:	4604      	mov	r4, r0
 80075f6:	d053      	beq.n	80076a0 <_reclaim_reent+0xb4>
 80075f8:	69c3      	ldr	r3, [r0, #28]
 80075fa:	b31b      	cbz	r3, 8007644 <_reclaim_reent+0x58>
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	b163      	cbz	r3, 800761a <_reclaim_reent+0x2e>
 8007600:	2500      	movs	r5, #0
 8007602:	69e3      	ldr	r3, [r4, #28]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	5959      	ldr	r1, [r3, r5]
 8007608:	b9b1      	cbnz	r1, 8007638 <_reclaim_reent+0x4c>
 800760a:	3504      	adds	r5, #4
 800760c:	2d80      	cmp	r5, #128	@ 0x80
 800760e:	d1f8      	bne.n	8007602 <_reclaim_reent+0x16>
 8007610:	69e3      	ldr	r3, [r4, #28]
 8007612:	4620      	mov	r0, r4
 8007614:	68d9      	ldr	r1, [r3, #12]
 8007616:	f000 f8b9 	bl	800778c <_free_r>
 800761a:	69e3      	ldr	r3, [r4, #28]
 800761c:	6819      	ldr	r1, [r3, #0]
 800761e:	b111      	cbz	r1, 8007626 <_reclaim_reent+0x3a>
 8007620:	4620      	mov	r0, r4
 8007622:	f000 f8b3 	bl	800778c <_free_r>
 8007626:	69e3      	ldr	r3, [r4, #28]
 8007628:	689d      	ldr	r5, [r3, #8]
 800762a:	b15d      	cbz	r5, 8007644 <_reclaim_reent+0x58>
 800762c:	4629      	mov	r1, r5
 800762e:	4620      	mov	r0, r4
 8007630:	682d      	ldr	r5, [r5, #0]
 8007632:	f000 f8ab 	bl	800778c <_free_r>
 8007636:	e7f8      	b.n	800762a <_reclaim_reent+0x3e>
 8007638:	680e      	ldr	r6, [r1, #0]
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f8a6 	bl	800778c <_free_r>
 8007640:	4631      	mov	r1, r6
 8007642:	e7e1      	b.n	8007608 <_reclaim_reent+0x1c>
 8007644:	6961      	ldr	r1, [r4, #20]
 8007646:	b111      	cbz	r1, 800764e <_reclaim_reent+0x62>
 8007648:	4620      	mov	r0, r4
 800764a:	f000 f89f 	bl	800778c <_free_r>
 800764e:	69e1      	ldr	r1, [r4, #28]
 8007650:	b111      	cbz	r1, 8007658 <_reclaim_reent+0x6c>
 8007652:	4620      	mov	r0, r4
 8007654:	f000 f89a 	bl	800778c <_free_r>
 8007658:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800765a:	b111      	cbz	r1, 8007662 <_reclaim_reent+0x76>
 800765c:	4620      	mov	r0, r4
 800765e:	f000 f895 	bl	800778c <_free_r>
 8007662:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007664:	b111      	cbz	r1, 800766c <_reclaim_reent+0x80>
 8007666:	4620      	mov	r0, r4
 8007668:	f000 f890 	bl	800778c <_free_r>
 800766c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800766e:	b111      	cbz	r1, 8007676 <_reclaim_reent+0x8a>
 8007670:	4620      	mov	r0, r4
 8007672:	f000 f88b 	bl	800778c <_free_r>
 8007676:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007678:	b111      	cbz	r1, 8007680 <_reclaim_reent+0x94>
 800767a:	4620      	mov	r0, r4
 800767c:	f000 f886 	bl	800778c <_free_r>
 8007680:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007682:	b111      	cbz	r1, 800768a <_reclaim_reent+0x9e>
 8007684:	4620      	mov	r0, r4
 8007686:	f000 f881 	bl	800778c <_free_r>
 800768a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800768c:	b111      	cbz	r1, 8007694 <_reclaim_reent+0xa8>
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f87c 	bl	800778c <_free_r>
 8007694:	6a23      	ldr	r3, [r4, #32]
 8007696:	b11b      	cbz	r3, 80076a0 <_reclaim_reent+0xb4>
 8007698:	4620      	mov	r0, r4
 800769a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800769e:	4718      	bx	r3
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	bf00      	nop
 80076a4:	2000001c 	.word	0x2000001c

080076a8 <_lseek_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	@ (80076c8 <_lseek_r+0x20>)
 80076ac:	4604      	mov	r4, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7f9 fd90 	bl	80011dc <_lseek>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_lseek_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_lseek_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20005fa8 	.word	0x20005fa8

080076cc <_read_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	@ (80076ec <_read_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f7f9 fd3a 	bl	8001154 <_read>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_read_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_read_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20005fa8 	.word	0x20005fa8

080076f0 <_write_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	@ (8007710 <_write_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7f9 fa7c 	bl	8000bfc <_write>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_write_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_write_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20005fa8 	.word	0x20005fa8

08007714 <__errno>:
 8007714:	4b01      	ldr	r3, [pc, #4]	@ (800771c <__errno+0x8>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	2000001c 	.word	0x2000001c

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4d0d      	ldr	r5, [pc, #52]	@ (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	@ (800775c <__libc_init_array+0x3c>)
 8007726:	1b64      	subs	r4, r4, r5
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2600      	movs	r6, #0
 800772c:	42a6      	cmp	r6, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4d0b      	ldr	r5, [pc, #44]	@ (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	@ (8007764 <__libc_init_array+0x44>)
 8007734:	f000 fd30 	bl	8008198 <_init>
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2600      	movs	r6, #0
 800773e:	42a6      	cmp	r6, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f855 3b04 	ldr.w	r3, [r5], #4
 8007748:	4798      	blx	r3
 800774a:	3601      	adds	r6, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007752:	4798      	blx	r3
 8007754:	3601      	adds	r6, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	08008358 	.word	0x08008358
 800775c:	08008358 	.word	0x08008358
 8007760:	08008358 	.word	0x08008358
 8007764:	0800835c 	.word	0x0800835c

08007768 <__retarget_lock_init_recursive>:
 8007768:	4770      	bx	lr

0800776a <__retarget_lock_acquire_recursive>:
 800776a:	4770      	bx	lr

0800776c <__retarget_lock_release_recursive>:
 800776c:	4770      	bx	lr

0800776e <memcpy>:
 800776e:	440a      	add	r2, r1
 8007770:	4291      	cmp	r1, r2
 8007772:	f100 33ff 	add.w	r3, r0, #4294967295
 8007776:	d100      	bne.n	800777a <memcpy+0xc>
 8007778:	4770      	bx	lr
 800777a:	b510      	push	{r4, lr}
 800777c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007784:	4291      	cmp	r1, r2
 8007786:	d1f9      	bne.n	800777c <memcpy+0xe>
 8007788:	bd10      	pop	{r4, pc}
	...

0800778c <_free_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4605      	mov	r5, r0
 8007790:	2900      	cmp	r1, #0
 8007792:	d041      	beq.n	8007818 <_free_r+0x8c>
 8007794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007798:	1f0c      	subs	r4, r1, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfb8      	it	lt
 800779e:	18e4      	addlt	r4, r4, r3
 80077a0:	f000 f8e0 	bl	8007964 <__malloc_lock>
 80077a4:	4a1d      	ldr	r2, [pc, #116]	@ (800781c <_free_r+0x90>)
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	b933      	cbnz	r3, 80077b8 <_free_r+0x2c>
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	6014      	str	r4, [r2, #0]
 80077ae:	4628      	mov	r0, r5
 80077b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b4:	f000 b8dc 	b.w	8007970 <__malloc_unlock>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d908      	bls.n	80077ce <_free_r+0x42>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	1821      	adds	r1, r4, r0
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1809      	addeq	r1, r1, r0
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	e7ed      	b.n	80077aa <_free_r+0x1e>
 80077ce:	461a      	mov	r2, r3
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b10b      	cbz	r3, 80077d8 <_free_r+0x4c>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d9fa      	bls.n	80077ce <_free_r+0x42>
 80077d8:	6811      	ldr	r1, [r2, #0]
 80077da:	1850      	adds	r0, r2, r1
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d10b      	bne.n	80077f8 <_free_r+0x6c>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	4401      	add	r1, r0
 80077e4:	1850      	adds	r0, r2, r1
 80077e6:	4283      	cmp	r3, r0
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	d1e0      	bne.n	80077ae <_free_r+0x22>
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6053      	str	r3, [r2, #4]
 80077f2:	4408      	add	r0, r1
 80077f4:	6010      	str	r0, [r2, #0]
 80077f6:	e7da      	b.n	80077ae <_free_r+0x22>
 80077f8:	d902      	bls.n	8007800 <_free_r+0x74>
 80077fa:	230c      	movs	r3, #12
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	e7d6      	b.n	80077ae <_free_r+0x22>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	1821      	adds	r1, r4, r0
 8007804:	428b      	cmp	r3, r1
 8007806:	bf04      	itt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	bf04      	itt	eq
 8007810:	1809      	addeq	r1, r1, r0
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	6054      	str	r4, [r2, #4]
 8007816:	e7ca      	b.n	80077ae <_free_r+0x22>
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	20005fb4 	.word	0x20005fb4

08007820 <sbrk_aligned>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0f      	ldr	r6, [pc, #60]	@ (8007860 <sbrk_aligned+0x40>)
 8007824:	460c      	mov	r4, r1
 8007826:	6831      	ldr	r1, [r6, #0]
 8007828:	4605      	mov	r5, r0
 800782a:	b911      	cbnz	r1, 8007832 <sbrk_aligned+0x12>
 800782c:	f000 fca4 	bl	8008178 <_sbrk_r>
 8007830:	6030      	str	r0, [r6, #0]
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fc9f 	bl	8008178 <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d103      	bne.n	8007846 <sbrk_aligned+0x26>
 800783e:	f04f 34ff 	mov.w	r4, #4294967295
 8007842:	4620      	mov	r0, r4
 8007844:	bd70      	pop	{r4, r5, r6, pc}
 8007846:	1cc4      	adds	r4, r0, #3
 8007848:	f024 0403 	bic.w	r4, r4, #3
 800784c:	42a0      	cmp	r0, r4
 800784e:	d0f8      	beq.n	8007842 <sbrk_aligned+0x22>
 8007850:	1a21      	subs	r1, r4, r0
 8007852:	4628      	mov	r0, r5
 8007854:	f000 fc90 	bl	8008178 <_sbrk_r>
 8007858:	3001      	adds	r0, #1
 800785a:	d1f2      	bne.n	8007842 <sbrk_aligned+0x22>
 800785c:	e7ef      	b.n	800783e <sbrk_aligned+0x1e>
 800785e:	bf00      	nop
 8007860:	20005fb0 	.word	0x20005fb0

08007864 <_malloc_r>:
 8007864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007868:	1ccd      	adds	r5, r1, #3
 800786a:	f025 0503 	bic.w	r5, r5, #3
 800786e:	3508      	adds	r5, #8
 8007870:	2d0c      	cmp	r5, #12
 8007872:	bf38      	it	cc
 8007874:	250c      	movcc	r5, #12
 8007876:	2d00      	cmp	r5, #0
 8007878:	4606      	mov	r6, r0
 800787a:	db01      	blt.n	8007880 <_malloc_r+0x1c>
 800787c:	42a9      	cmp	r1, r5
 800787e:	d904      	bls.n	800788a <_malloc_r+0x26>
 8007880:	230c      	movs	r3, #12
 8007882:	6033      	str	r3, [r6, #0]
 8007884:	2000      	movs	r0, #0
 8007886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007960 <_malloc_r+0xfc>
 800788e:	f000 f869 	bl	8007964 <__malloc_lock>
 8007892:	f8d8 3000 	ldr.w	r3, [r8]
 8007896:	461c      	mov	r4, r3
 8007898:	bb44      	cbnz	r4, 80078ec <_malloc_r+0x88>
 800789a:	4629      	mov	r1, r5
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff ffbf 	bl	8007820 <sbrk_aligned>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	4604      	mov	r4, r0
 80078a6:	d158      	bne.n	800795a <_malloc_r+0xf6>
 80078a8:	f8d8 4000 	ldr.w	r4, [r8]
 80078ac:	4627      	mov	r7, r4
 80078ae:	2f00      	cmp	r7, #0
 80078b0:	d143      	bne.n	800793a <_malloc_r+0xd6>
 80078b2:	2c00      	cmp	r4, #0
 80078b4:	d04b      	beq.n	800794e <_malloc_r+0xea>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	4639      	mov	r1, r7
 80078ba:	4630      	mov	r0, r6
 80078bc:	eb04 0903 	add.w	r9, r4, r3
 80078c0:	f000 fc5a 	bl	8008178 <_sbrk_r>
 80078c4:	4581      	cmp	r9, r0
 80078c6:	d142      	bne.n	800794e <_malloc_r+0xea>
 80078c8:	6821      	ldr	r1, [r4, #0]
 80078ca:	1a6d      	subs	r5, r5, r1
 80078cc:	4629      	mov	r1, r5
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ffa6 	bl	8007820 <sbrk_aligned>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d03a      	beq.n	800794e <_malloc_r+0xea>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	442b      	add	r3, r5
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	f8d8 3000 	ldr.w	r3, [r8]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	bb62      	cbnz	r2, 8007940 <_malloc_r+0xdc>
 80078e6:	f8c8 7000 	str.w	r7, [r8]
 80078ea:	e00f      	b.n	800790c <_malloc_r+0xa8>
 80078ec:	6822      	ldr	r2, [r4, #0]
 80078ee:	1b52      	subs	r2, r2, r5
 80078f0:	d420      	bmi.n	8007934 <_malloc_r+0xd0>
 80078f2:	2a0b      	cmp	r2, #11
 80078f4:	d917      	bls.n	8007926 <_malloc_r+0xc2>
 80078f6:	1961      	adds	r1, r4, r5
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	6025      	str	r5, [r4, #0]
 80078fc:	bf18      	it	ne
 80078fe:	6059      	strne	r1, [r3, #4]
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	bf08      	it	eq
 8007904:	f8c8 1000 	streq.w	r1, [r8]
 8007908:	5162      	str	r2, [r4, r5]
 800790a:	604b      	str	r3, [r1, #4]
 800790c:	4630      	mov	r0, r6
 800790e:	f000 f82f 	bl	8007970 <__malloc_unlock>
 8007912:	f104 000b 	add.w	r0, r4, #11
 8007916:	1d23      	adds	r3, r4, #4
 8007918:	f020 0007 	bic.w	r0, r0, #7
 800791c:	1ac2      	subs	r2, r0, r3
 800791e:	bf1c      	itt	ne
 8007920:	1a1b      	subne	r3, r3, r0
 8007922:	50a3      	strne	r3, [r4, r2]
 8007924:	e7af      	b.n	8007886 <_malloc_r+0x22>
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	42a3      	cmp	r3, r4
 800792a:	bf0c      	ite	eq
 800792c:	f8c8 2000 	streq.w	r2, [r8]
 8007930:	605a      	strne	r2, [r3, #4]
 8007932:	e7eb      	b.n	800790c <_malloc_r+0xa8>
 8007934:	4623      	mov	r3, r4
 8007936:	6864      	ldr	r4, [r4, #4]
 8007938:	e7ae      	b.n	8007898 <_malloc_r+0x34>
 800793a:	463c      	mov	r4, r7
 800793c:	687f      	ldr	r7, [r7, #4]
 800793e:	e7b6      	b.n	80078ae <_malloc_r+0x4a>
 8007940:	461a      	mov	r2, r3
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	42a3      	cmp	r3, r4
 8007946:	d1fb      	bne.n	8007940 <_malloc_r+0xdc>
 8007948:	2300      	movs	r3, #0
 800794a:	6053      	str	r3, [r2, #4]
 800794c:	e7de      	b.n	800790c <_malloc_r+0xa8>
 800794e:	230c      	movs	r3, #12
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	4630      	mov	r0, r6
 8007954:	f000 f80c 	bl	8007970 <__malloc_unlock>
 8007958:	e794      	b.n	8007884 <_malloc_r+0x20>
 800795a:	6005      	str	r5, [r0, #0]
 800795c:	e7d6      	b.n	800790c <_malloc_r+0xa8>
 800795e:	bf00      	nop
 8007960:	20005fb4 	.word	0x20005fb4

08007964 <__malloc_lock>:
 8007964:	4801      	ldr	r0, [pc, #4]	@ (800796c <__malloc_lock+0x8>)
 8007966:	f7ff bf00 	b.w	800776a <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	20005fac 	.word	0x20005fac

08007970 <__malloc_unlock>:
 8007970:	4801      	ldr	r0, [pc, #4]	@ (8007978 <__malloc_unlock+0x8>)
 8007972:	f7ff befb 	b.w	800776c <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	20005fac 	.word	0x20005fac

0800797c <__sfputc_r>:
 800797c:	6893      	ldr	r3, [r2, #8]
 800797e:	3b01      	subs	r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	b410      	push	{r4}
 8007984:	6093      	str	r3, [r2, #8]
 8007986:	da08      	bge.n	800799a <__sfputc_r+0x1e>
 8007988:	6994      	ldr	r4, [r2, #24]
 800798a:	42a3      	cmp	r3, r4
 800798c:	db01      	blt.n	8007992 <__sfputc_r+0x16>
 800798e:	290a      	cmp	r1, #10
 8007990:	d103      	bne.n	800799a <__sfputc_r+0x1e>
 8007992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007996:	f7ff bd7c 	b.w	8007492 <__swbuf_r>
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	1c58      	adds	r0, r3, #1
 800799e:	6010      	str	r0, [r2, #0]
 80079a0:	7019      	strb	r1, [r3, #0]
 80079a2:	4608      	mov	r0, r1
 80079a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <__sfputs_r>:
 80079aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	18d5      	adds	r5, r2, r3
 80079b4:	42ac      	cmp	r4, r5
 80079b6:	d101      	bne.n	80079bc <__sfputs_r+0x12>
 80079b8:	2000      	movs	r0, #0
 80079ba:	e007      	b.n	80079cc <__sfputs_r+0x22>
 80079bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c0:	463a      	mov	r2, r7
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffda 	bl	800797c <__sfputc_r>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d1f3      	bne.n	80079b4 <__sfputs_r+0xa>
 80079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079d0 <_vfiprintf_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	460d      	mov	r5, r1
 80079d6:	b09d      	sub	sp, #116	@ 0x74
 80079d8:	4614      	mov	r4, r2
 80079da:	4698      	mov	r8, r3
 80079dc:	4606      	mov	r6, r0
 80079de:	b118      	cbz	r0, 80079e8 <_vfiprintf_r+0x18>
 80079e0:	6a03      	ldr	r3, [r0, #32]
 80079e2:	b90b      	cbnz	r3, 80079e8 <_vfiprintf_r+0x18>
 80079e4:	f7ff fc6c 	bl	80072c0 <__sinit>
 80079e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079ea:	07d9      	lsls	r1, r3, #31
 80079ec:	d405      	bmi.n	80079fa <_vfiprintf_r+0x2a>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	059a      	lsls	r2, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_vfiprintf_r+0x2a>
 80079f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079f6:	f7ff feb8 	bl	800776a <__retarget_lock_acquire_recursive>
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	071b      	lsls	r3, r3, #28
 80079fe:	d501      	bpl.n	8007a04 <_vfiprintf_r+0x34>
 8007a00:	692b      	ldr	r3, [r5, #16]
 8007a02:	b99b      	cbnz	r3, 8007a2c <_vfiprintf_r+0x5c>
 8007a04:	4629      	mov	r1, r5
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff fd82 	bl	8007510 <__swsetup_r>
 8007a0c:	b170      	cbz	r0, 8007a2c <_vfiprintf_r+0x5c>
 8007a0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a10:	07dc      	lsls	r4, r3, #31
 8007a12:	d504      	bpl.n	8007a1e <_vfiprintf_r+0x4e>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	b01d      	add	sp, #116	@ 0x74
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	0598      	lsls	r0, r3, #22
 8007a22:	d4f7      	bmi.n	8007a14 <_vfiprintf_r+0x44>
 8007a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a26:	f7ff fea1 	bl	800776c <__retarget_lock_release_recursive>
 8007a2a:	e7f3      	b.n	8007a14 <_vfiprintf_r+0x44>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a30:	2320      	movs	r3, #32
 8007a32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a3a:	2330      	movs	r3, #48	@ 0x30
 8007a3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bec <_vfiprintf_r+0x21c>
 8007a40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a44:	f04f 0901 	mov.w	r9, #1
 8007a48:	4623      	mov	r3, r4
 8007a4a:	469a      	mov	sl, r3
 8007a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a50:	b10a      	cbz	r2, 8007a56 <_vfiprintf_r+0x86>
 8007a52:	2a25      	cmp	r2, #37	@ 0x25
 8007a54:	d1f9      	bne.n	8007a4a <_vfiprintf_r+0x7a>
 8007a56:	ebba 0b04 	subs.w	fp, sl, r4
 8007a5a:	d00b      	beq.n	8007a74 <_vfiprintf_r+0xa4>
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7ff ffa1 	bl	80079aa <__sfputs_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f000 80a7 	beq.w	8007bbc <_vfiprintf_r+0x1ec>
 8007a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a70:	445a      	add	r2, fp
 8007a72:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a74:	f89a 3000 	ldrb.w	r3, [sl]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 809f 	beq.w	8007bbc <_vfiprintf_r+0x1ec>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f04f 32ff 	mov.w	r2, #4294967295
 8007a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a88:	f10a 0a01 	add.w	sl, sl, #1
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a96:	4654      	mov	r4, sl
 8007a98:	2205      	movs	r2, #5
 8007a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9e:	4853      	ldr	r0, [pc, #332]	@ (8007bec <_vfiprintf_r+0x21c>)
 8007aa0:	f7f8 fb9e 	bl	80001e0 <memchr>
 8007aa4:	9a04      	ldr	r2, [sp, #16]
 8007aa6:	b9d8      	cbnz	r0, 8007ae0 <_vfiprintf_r+0x110>
 8007aa8:	06d1      	lsls	r1, r2, #27
 8007aaa:	bf44      	itt	mi
 8007aac:	2320      	movmi	r3, #32
 8007aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ab2:	0713      	lsls	r3, r2, #28
 8007ab4:	bf44      	itt	mi
 8007ab6:	232b      	movmi	r3, #43	@ 0x2b
 8007ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007abc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ac2:	d015      	beq.n	8007af0 <_vfiprintf_r+0x120>
 8007ac4:	9a07      	ldr	r2, [sp, #28]
 8007ac6:	4654      	mov	r4, sl
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f04f 0c0a 	mov.w	ip, #10
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad4:	3b30      	subs	r3, #48	@ 0x30
 8007ad6:	2b09      	cmp	r3, #9
 8007ad8:	d94b      	bls.n	8007b72 <_vfiprintf_r+0x1a2>
 8007ada:	b1b0      	cbz	r0, 8007b0a <_vfiprintf_r+0x13a>
 8007adc:	9207      	str	r2, [sp, #28]
 8007ade:	e014      	b.n	8007b0a <_vfiprintf_r+0x13a>
 8007ae0:	eba0 0308 	sub.w	r3, r0, r8
 8007ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	46a2      	mov	sl, r4
 8007aee:	e7d2      	b.n	8007a96 <_vfiprintf_r+0xc6>
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	1d19      	adds	r1, r3, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	9103      	str	r1, [sp, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfbb      	ittet	lt
 8007afc:	425b      	neglt	r3, r3
 8007afe:	f042 0202 	orrlt.w	r2, r2, #2
 8007b02:	9307      	strge	r3, [sp, #28]
 8007b04:	9307      	strlt	r3, [sp, #28]
 8007b06:	bfb8      	it	lt
 8007b08:	9204      	strlt	r2, [sp, #16]
 8007b0a:	7823      	ldrb	r3, [r4, #0]
 8007b0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b0e:	d10a      	bne.n	8007b26 <_vfiprintf_r+0x156>
 8007b10:	7863      	ldrb	r3, [r4, #1]
 8007b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b14:	d132      	bne.n	8007b7c <_vfiprintf_r+0x1ac>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	9203      	str	r2, [sp, #12]
 8007b1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b22:	3402      	adds	r4, #2
 8007b24:	9305      	str	r3, [sp, #20]
 8007b26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bfc <_vfiprintf_r+0x22c>
 8007b2a:	7821      	ldrb	r1, [r4, #0]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f7f8 fb56 	bl	80001e0 <memchr>
 8007b34:	b138      	cbz	r0, 8007b46 <_vfiprintf_r+0x176>
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	eba0 000a 	sub.w	r0, r0, sl
 8007b3c:	2240      	movs	r2, #64	@ 0x40
 8007b3e:	4082      	lsls	r2, r0
 8007b40:	4313      	orrs	r3, r2
 8007b42:	3401      	adds	r4, #1
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4a:	4829      	ldr	r0, [pc, #164]	@ (8007bf0 <_vfiprintf_r+0x220>)
 8007b4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b50:	2206      	movs	r2, #6
 8007b52:	f7f8 fb45 	bl	80001e0 <memchr>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d03f      	beq.n	8007bda <_vfiprintf_r+0x20a>
 8007b5a:	4b26      	ldr	r3, [pc, #152]	@ (8007bf4 <_vfiprintf_r+0x224>)
 8007b5c:	bb1b      	cbnz	r3, 8007ba6 <_vfiprintf_r+0x1d6>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	3307      	adds	r3, #7
 8007b62:	f023 0307 	bic.w	r3, r3, #7
 8007b66:	3308      	adds	r3, #8
 8007b68:	9303      	str	r3, [sp, #12]
 8007b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6c:	443b      	add	r3, r7
 8007b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b70:	e76a      	b.n	8007a48 <_vfiprintf_r+0x78>
 8007b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b76:	460c      	mov	r4, r1
 8007b78:	2001      	movs	r0, #1
 8007b7a:	e7a8      	b.n	8007ace <_vfiprintf_r+0xfe>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	3401      	adds	r4, #1
 8007b80:	9305      	str	r3, [sp, #20]
 8007b82:	4619      	mov	r1, r3
 8007b84:	f04f 0c0a 	mov.w	ip, #10
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b8e:	3a30      	subs	r2, #48	@ 0x30
 8007b90:	2a09      	cmp	r2, #9
 8007b92:	d903      	bls.n	8007b9c <_vfiprintf_r+0x1cc>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0c6      	beq.n	8007b26 <_vfiprintf_r+0x156>
 8007b98:	9105      	str	r1, [sp, #20]
 8007b9a:	e7c4      	b.n	8007b26 <_vfiprintf_r+0x156>
 8007b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e7f0      	b.n	8007b88 <_vfiprintf_r+0x1b8>
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4b12      	ldr	r3, [pc, #72]	@ (8007bf8 <_vfiprintf_r+0x228>)
 8007bae:	a904      	add	r1, sp, #16
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f3af 8000 	nop.w
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	1c78      	adds	r0, r7, #1
 8007bba:	d1d6      	bne.n	8007b6a <_vfiprintf_r+0x19a>
 8007bbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bbe:	07d9      	lsls	r1, r3, #31
 8007bc0:	d405      	bmi.n	8007bce <_vfiprintf_r+0x1fe>
 8007bc2:	89ab      	ldrh	r3, [r5, #12]
 8007bc4:	059a      	lsls	r2, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_vfiprintf_r+0x1fe>
 8007bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bca:	f7ff fdcf 	bl	800776c <__retarget_lock_release_recursive>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	065b      	lsls	r3, r3, #25
 8007bd2:	f53f af1f 	bmi.w	8007a14 <_vfiprintf_r+0x44>
 8007bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bd8:	e71e      	b.n	8007a18 <_vfiprintf_r+0x48>
 8007bda:	ab03      	add	r3, sp, #12
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	462a      	mov	r2, r5
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <_vfiprintf_r+0x228>)
 8007be2:	a904      	add	r1, sp, #16
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 f879 	bl	8007cdc <_printf_i>
 8007bea:	e7e4      	b.n	8007bb6 <_vfiprintf_r+0x1e6>
 8007bec:	0800831c 	.word	0x0800831c
 8007bf0:	08008326 	.word	0x08008326
 8007bf4:	00000000 	.word	0x00000000
 8007bf8:	080079ab 	.word	0x080079ab
 8007bfc:	08008322 	.word	0x08008322

08007c00 <_printf_common>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	4616      	mov	r6, r2
 8007c06:	4698      	mov	r8, r3
 8007c08:	688a      	ldr	r2, [r1, #8]
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	bfb8      	it	lt
 8007c14:	4613      	movlt	r3, r2
 8007c16:	6033      	str	r3, [r6, #0]
 8007c18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b10a      	cbz	r2, 8007c26 <_printf_common+0x26>
 8007c22:	3301      	adds	r3, #1
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	0699      	lsls	r1, r3, #26
 8007c2a:	bf42      	ittt	mi
 8007c2c:	6833      	ldrmi	r3, [r6, #0]
 8007c2e:	3302      	addmi	r3, #2
 8007c30:	6033      	strmi	r3, [r6, #0]
 8007c32:	6825      	ldr	r5, [r4, #0]
 8007c34:	f015 0506 	ands.w	r5, r5, #6
 8007c38:	d106      	bne.n	8007c48 <_printf_common+0x48>
 8007c3a:	f104 0a19 	add.w	sl, r4, #25
 8007c3e:	68e3      	ldr	r3, [r4, #12]
 8007c40:	6832      	ldr	r2, [r6, #0]
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	42ab      	cmp	r3, r5
 8007c46:	dc26      	bgt.n	8007c96 <_printf_common+0x96>
 8007c48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c4c:	6822      	ldr	r2, [r4, #0]
 8007c4e:	3b00      	subs	r3, #0
 8007c50:	bf18      	it	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	0692      	lsls	r2, r2, #26
 8007c56:	d42b      	bmi.n	8007cb0 <_printf_common+0xb0>
 8007c58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c5c:	4641      	mov	r1, r8
 8007c5e:	4638      	mov	r0, r7
 8007c60:	47c8      	blx	r9
 8007c62:	3001      	adds	r0, #1
 8007c64:	d01e      	beq.n	8007ca4 <_printf_common+0xa4>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	6922      	ldr	r2, [r4, #16]
 8007c6a:	f003 0306 	and.w	r3, r3, #6
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	bf02      	ittt	eq
 8007c72:	68e5      	ldreq	r5, [r4, #12]
 8007c74:	6833      	ldreq	r3, [r6, #0]
 8007c76:	1aed      	subeq	r5, r5, r3
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	bf0c      	ite	eq
 8007c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c80:	2500      	movne	r5, #0
 8007c82:	4293      	cmp	r3, r2
 8007c84:	bfc4      	itt	gt
 8007c86:	1a9b      	subgt	r3, r3, r2
 8007c88:	18ed      	addgt	r5, r5, r3
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	341a      	adds	r4, #26
 8007c8e:	42b5      	cmp	r5, r6
 8007c90:	d11a      	bne.n	8007cc8 <_printf_common+0xc8>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e008      	b.n	8007ca8 <_printf_common+0xa8>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	47c8      	blx	r9
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d103      	bne.n	8007cac <_printf_common+0xac>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	3501      	adds	r5, #1
 8007cae:	e7c6      	b.n	8007c3e <_printf_common+0x3e>
 8007cb0:	18e1      	adds	r1, r4, r3
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	2030      	movs	r0, #48	@ 0x30
 8007cb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cba:	4422      	add	r2, r4
 8007cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	e7c7      	b.n	8007c58 <_printf_common+0x58>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4622      	mov	r2, r4
 8007ccc:	4641      	mov	r1, r8
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c8      	blx	r9
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d0e6      	beq.n	8007ca4 <_printf_common+0xa4>
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7d9      	b.n	8007c8e <_printf_common+0x8e>
	...

08007cdc <_printf_i>:
 8007cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	7e0f      	ldrb	r7, [r1, #24]
 8007ce2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ce4:	2f78      	cmp	r7, #120	@ 0x78
 8007ce6:	4691      	mov	r9, r2
 8007ce8:	4680      	mov	r8, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	469a      	mov	sl, r3
 8007cee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cf2:	d807      	bhi.n	8007d04 <_printf_i+0x28>
 8007cf4:	2f62      	cmp	r7, #98	@ 0x62
 8007cf6:	d80a      	bhi.n	8007d0e <_printf_i+0x32>
 8007cf8:	2f00      	cmp	r7, #0
 8007cfa:	f000 80d1 	beq.w	8007ea0 <_printf_i+0x1c4>
 8007cfe:	2f58      	cmp	r7, #88	@ 0x58
 8007d00:	f000 80b8 	beq.w	8007e74 <_printf_i+0x198>
 8007d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d0c:	e03a      	b.n	8007d84 <_printf_i+0xa8>
 8007d0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d12:	2b15      	cmp	r3, #21
 8007d14:	d8f6      	bhi.n	8007d04 <_printf_i+0x28>
 8007d16:	a101      	add	r1, pc, #4	@ (adr r1, 8007d1c <_printf_i+0x40>)
 8007d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d1c:	08007d75 	.word	0x08007d75
 8007d20:	08007d89 	.word	0x08007d89
 8007d24:	08007d05 	.word	0x08007d05
 8007d28:	08007d05 	.word	0x08007d05
 8007d2c:	08007d05 	.word	0x08007d05
 8007d30:	08007d05 	.word	0x08007d05
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007d05 	.word	0x08007d05
 8007d3c:	08007d05 	.word	0x08007d05
 8007d40:	08007d05 	.word	0x08007d05
 8007d44:	08007d05 	.word	0x08007d05
 8007d48:	08007e87 	.word	0x08007e87
 8007d4c:	08007db3 	.word	0x08007db3
 8007d50:	08007e41 	.word	0x08007e41
 8007d54:	08007d05 	.word	0x08007d05
 8007d58:	08007d05 	.word	0x08007d05
 8007d5c:	08007ea9 	.word	0x08007ea9
 8007d60:	08007d05 	.word	0x08007d05
 8007d64:	08007db3 	.word	0x08007db3
 8007d68:	08007d05 	.word	0x08007d05
 8007d6c:	08007d05 	.word	0x08007d05
 8007d70:	08007e49 	.word	0x08007e49
 8007d74:	6833      	ldr	r3, [r6, #0]
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6032      	str	r2, [r6, #0]
 8007d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d84:	2301      	movs	r3, #1
 8007d86:	e09c      	b.n	8007ec2 <_printf_i+0x1e6>
 8007d88:	6833      	ldr	r3, [r6, #0]
 8007d8a:	6820      	ldr	r0, [r4, #0]
 8007d8c:	1d19      	adds	r1, r3, #4
 8007d8e:	6031      	str	r1, [r6, #0]
 8007d90:	0606      	lsls	r6, r0, #24
 8007d92:	d501      	bpl.n	8007d98 <_printf_i+0xbc>
 8007d94:	681d      	ldr	r5, [r3, #0]
 8007d96:	e003      	b.n	8007da0 <_printf_i+0xc4>
 8007d98:	0645      	lsls	r5, r0, #25
 8007d9a:	d5fb      	bpl.n	8007d94 <_printf_i+0xb8>
 8007d9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	da03      	bge.n	8007dac <_printf_i+0xd0>
 8007da4:	232d      	movs	r3, #45	@ 0x2d
 8007da6:	426d      	negs	r5, r5
 8007da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dac:	4858      	ldr	r0, [pc, #352]	@ (8007f10 <_printf_i+0x234>)
 8007dae:	230a      	movs	r3, #10
 8007db0:	e011      	b.n	8007dd6 <_printf_i+0xfa>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	0608      	lsls	r0, r1, #24
 8007db8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dbc:	d402      	bmi.n	8007dc4 <_printf_i+0xe8>
 8007dbe:	0649      	lsls	r1, r1, #25
 8007dc0:	bf48      	it	mi
 8007dc2:	b2ad      	uxthmi	r5, r5
 8007dc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dc6:	4852      	ldr	r0, [pc, #328]	@ (8007f10 <_printf_i+0x234>)
 8007dc8:	6033      	str	r3, [r6, #0]
 8007dca:	bf14      	ite	ne
 8007dcc:	230a      	movne	r3, #10
 8007dce:	2308      	moveq	r3, #8
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dd6:	6866      	ldr	r6, [r4, #4]
 8007dd8:	60a6      	str	r6, [r4, #8]
 8007dda:	2e00      	cmp	r6, #0
 8007ddc:	db05      	blt.n	8007dea <_printf_i+0x10e>
 8007dde:	6821      	ldr	r1, [r4, #0]
 8007de0:	432e      	orrs	r6, r5
 8007de2:	f021 0104 	bic.w	r1, r1, #4
 8007de6:	6021      	str	r1, [r4, #0]
 8007de8:	d04b      	beq.n	8007e82 <_printf_i+0x1a6>
 8007dea:	4616      	mov	r6, r2
 8007dec:	fbb5 f1f3 	udiv	r1, r5, r3
 8007df0:	fb03 5711 	mls	r7, r3, r1, r5
 8007df4:	5dc7      	ldrb	r7, [r0, r7]
 8007df6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dfa:	462f      	mov	r7, r5
 8007dfc:	42bb      	cmp	r3, r7
 8007dfe:	460d      	mov	r5, r1
 8007e00:	d9f4      	bls.n	8007dec <_printf_i+0x110>
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d10b      	bne.n	8007e1e <_printf_i+0x142>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	07df      	lsls	r7, r3, #31
 8007e0a:	d508      	bpl.n	8007e1e <_printf_i+0x142>
 8007e0c:	6923      	ldr	r3, [r4, #16]
 8007e0e:	6861      	ldr	r1, [r4, #4]
 8007e10:	4299      	cmp	r1, r3
 8007e12:	bfde      	ittt	le
 8007e14:	2330      	movle	r3, #48	@ 0x30
 8007e16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e1e:	1b92      	subs	r2, r2, r6
 8007e20:	6122      	str	r2, [r4, #16]
 8007e22:	f8cd a000 	str.w	sl, [sp]
 8007e26:	464b      	mov	r3, r9
 8007e28:	aa03      	add	r2, sp, #12
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	f7ff fee7 	bl	8007c00 <_printf_common>
 8007e32:	3001      	adds	r0, #1
 8007e34:	d14a      	bne.n	8007ecc <_printf_i+0x1f0>
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	b004      	add	sp, #16
 8007e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	f043 0320 	orr.w	r3, r3, #32
 8007e46:	6023      	str	r3, [r4, #0]
 8007e48:	4832      	ldr	r0, [pc, #200]	@ (8007f14 <_printf_i+0x238>)
 8007e4a:	2778      	movs	r7, #120	@ 0x78
 8007e4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	6831      	ldr	r1, [r6, #0]
 8007e54:	061f      	lsls	r7, r3, #24
 8007e56:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e5a:	d402      	bmi.n	8007e62 <_printf_i+0x186>
 8007e5c:	065f      	lsls	r7, r3, #25
 8007e5e:	bf48      	it	mi
 8007e60:	b2ad      	uxthmi	r5, r5
 8007e62:	6031      	str	r1, [r6, #0]
 8007e64:	07d9      	lsls	r1, r3, #31
 8007e66:	bf44      	itt	mi
 8007e68:	f043 0320 	orrmi.w	r3, r3, #32
 8007e6c:	6023      	strmi	r3, [r4, #0]
 8007e6e:	b11d      	cbz	r5, 8007e78 <_printf_i+0x19c>
 8007e70:	2310      	movs	r3, #16
 8007e72:	e7ad      	b.n	8007dd0 <_printf_i+0xf4>
 8007e74:	4826      	ldr	r0, [pc, #152]	@ (8007f10 <_printf_i+0x234>)
 8007e76:	e7e9      	b.n	8007e4c <_printf_i+0x170>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	f023 0320 	bic.w	r3, r3, #32
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	e7f6      	b.n	8007e70 <_printf_i+0x194>
 8007e82:	4616      	mov	r6, r2
 8007e84:	e7bd      	b.n	8007e02 <_printf_i+0x126>
 8007e86:	6833      	ldr	r3, [r6, #0]
 8007e88:	6825      	ldr	r5, [r4, #0]
 8007e8a:	6961      	ldr	r1, [r4, #20]
 8007e8c:	1d18      	adds	r0, r3, #4
 8007e8e:	6030      	str	r0, [r6, #0]
 8007e90:	062e      	lsls	r6, r5, #24
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	d501      	bpl.n	8007e9a <_printf_i+0x1be>
 8007e96:	6019      	str	r1, [r3, #0]
 8007e98:	e002      	b.n	8007ea0 <_printf_i+0x1c4>
 8007e9a:	0668      	lsls	r0, r5, #25
 8007e9c:	d5fb      	bpl.n	8007e96 <_printf_i+0x1ba>
 8007e9e:	8019      	strh	r1, [r3, #0]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	e7bc      	b.n	8007e22 <_printf_i+0x146>
 8007ea8:	6833      	ldr	r3, [r6, #0]
 8007eaa:	1d1a      	adds	r2, r3, #4
 8007eac:	6032      	str	r2, [r6, #0]
 8007eae:	681e      	ldr	r6, [r3, #0]
 8007eb0:	6862      	ldr	r2, [r4, #4]
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f7f8 f993 	bl	80001e0 <memchr>
 8007eba:	b108      	cbz	r0, 8007ec0 <_printf_i+0x1e4>
 8007ebc:	1b80      	subs	r0, r0, r6
 8007ebe:	6060      	str	r0, [r4, #4]
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eca:	e7aa      	b.n	8007e22 <_printf_i+0x146>
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	4632      	mov	r2, r6
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	47d0      	blx	sl
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d0ad      	beq.n	8007e36 <_printf_i+0x15a>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	079b      	lsls	r3, r3, #30
 8007ede:	d413      	bmi.n	8007f08 <_printf_i+0x22c>
 8007ee0:	68e0      	ldr	r0, [r4, #12]
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	4298      	cmp	r0, r3
 8007ee6:	bfb8      	it	lt
 8007ee8:	4618      	movlt	r0, r3
 8007eea:	e7a6      	b.n	8007e3a <_printf_i+0x15e>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4632      	mov	r2, r6
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	47d0      	blx	sl
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d09d      	beq.n	8007e36 <_printf_i+0x15a>
 8007efa:	3501      	adds	r5, #1
 8007efc:	68e3      	ldr	r3, [r4, #12]
 8007efe:	9903      	ldr	r1, [sp, #12]
 8007f00:	1a5b      	subs	r3, r3, r1
 8007f02:	42ab      	cmp	r3, r5
 8007f04:	dcf2      	bgt.n	8007eec <_printf_i+0x210>
 8007f06:	e7eb      	b.n	8007ee0 <_printf_i+0x204>
 8007f08:	2500      	movs	r5, #0
 8007f0a:	f104 0619 	add.w	r6, r4, #25
 8007f0e:	e7f5      	b.n	8007efc <_printf_i+0x220>
 8007f10:	0800832d 	.word	0x0800832d
 8007f14:	0800833e 	.word	0x0800833e

08007f18 <__sflush_r>:
 8007f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	0716      	lsls	r6, r2, #28
 8007f22:	4605      	mov	r5, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	d454      	bmi.n	8007fd2 <__sflush_r+0xba>
 8007f28:	684b      	ldr	r3, [r1, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc02      	bgt.n	8007f34 <__sflush_r+0x1c>
 8007f2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dd48      	ble.n	8007fc6 <__sflush_r+0xae>
 8007f34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d045      	beq.n	8007fc6 <__sflush_r+0xae>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f40:	682f      	ldr	r7, [r5, #0]
 8007f42:	6a21      	ldr	r1, [r4, #32]
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	d030      	beq.n	8007faa <__sflush_r+0x92>
 8007f48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	0759      	lsls	r1, r3, #29
 8007f4e:	d505      	bpl.n	8007f5c <__sflush_r+0x44>
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f56:	b10b      	cbz	r3, 8007f5c <__sflush_r+0x44>
 8007f58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f60:	6a21      	ldr	r1, [r4, #32]
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b0      	blx	r6
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	d106      	bne.n	8007f7a <__sflush_r+0x62>
 8007f6c:	6829      	ldr	r1, [r5, #0]
 8007f6e:	291d      	cmp	r1, #29
 8007f70:	d82b      	bhi.n	8007fca <__sflush_r+0xb2>
 8007f72:	4a2a      	ldr	r2, [pc, #168]	@ (800801c <__sflush_r+0x104>)
 8007f74:	40ca      	lsrs	r2, r1
 8007f76:	07d6      	lsls	r6, r2, #31
 8007f78:	d527      	bpl.n	8007fca <__sflush_r+0xb2>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	6062      	str	r2, [r4, #4]
 8007f7e:	04d9      	lsls	r1, r3, #19
 8007f80:	6922      	ldr	r2, [r4, #16]
 8007f82:	6022      	str	r2, [r4, #0]
 8007f84:	d504      	bpl.n	8007f90 <__sflush_r+0x78>
 8007f86:	1c42      	adds	r2, r0, #1
 8007f88:	d101      	bne.n	8007f8e <__sflush_r+0x76>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	b903      	cbnz	r3, 8007f90 <__sflush_r+0x78>
 8007f8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f92:	602f      	str	r7, [r5, #0]
 8007f94:	b1b9      	cbz	r1, 8007fc6 <__sflush_r+0xae>
 8007f96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	d002      	beq.n	8007fa4 <__sflush_r+0x8c>
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f7ff fbf4 	bl	800778c <_free_r>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fa8:	e00d      	b.n	8007fc6 <__sflush_r+0xae>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b0      	blx	r6
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	1c50      	adds	r0, r2, #1
 8007fb4:	d1c9      	bne.n	8007f4a <__sflush_r+0x32>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0c6      	beq.n	8007f4a <__sflush_r+0x32>
 8007fbc:	2b1d      	cmp	r3, #29
 8007fbe:	d001      	beq.n	8007fc4 <__sflush_r+0xac>
 8007fc0:	2b16      	cmp	r3, #22
 8007fc2:	d11e      	bne.n	8008002 <__sflush_r+0xea>
 8007fc4:	602f      	str	r7, [r5, #0]
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e022      	b.n	8008010 <__sflush_r+0xf8>
 8007fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fce:	b21b      	sxth	r3, r3
 8007fd0:	e01b      	b.n	800800a <__sflush_r+0xf2>
 8007fd2:	690f      	ldr	r7, [r1, #16]
 8007fd4:	2f00      	cmp	r7, #0
 8007fd6:	d0f6      	beq.n	8007fc6 <__sflush_r+0xae>
 8007fd8:	0793      	lsls	r3, r2, #30
 8007fda:	680e      	ldr	r6, [r1, #0]
 8007fdc:	bf08      	it	eq
 8007fde:	694b      	ldreq	r3, [r1, #20]
 8007fe0:	600f      	str	r7, [r1, #0]
 8007fe2:	bf18      	it	ne
 8007fe4:	2300      	movne	r3, #0
 8007fe6:	eba6 0807 	sub.w	r8, r6, r7
 8007fea:	608b      	str	r3, [r1, #8]
 8007fec:	f1b8 0f00 	cmp.w	r8, #0
 8007ff0:	dde9      	ble.n	8007fc6 <__sflush_r+0xae>
 8007ff2:	6a21      	ldr	r1, [r4, #32]
 8007ff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ff6:	4643      	mov	r3, r8
 8007ff8:	463a      	mov	r2, r7
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b0      	blx	r6
 8007ffe:	2800      	cmp	r0, #0
 8008000:	dc08      	bgt.n	8008014 <__sflush_r+0xfc>
 8008002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008014:	4407      	add	r7, r0
 8008016:	eba8 0800 	sub.w	r8, r8, r0
 800801a:	e7e7      	b.n	8007fec <__sflush_r+0xd4>
 800801c:	20400001 	.word	0x20400001

08008020 <_fflush_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b913      	cbnz	r3, 8008030 <_fflush_r+0x10>
 800802a:	2500      	movs	r5, #0
 800802c:	4628      	mov	r0, r5
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	b118      	cbz	r0, 800803a <_fflush_r+0x1a>
 8008032:	6a03      	ldr	r3, [r0, #32]
 8008034:	b90b      	cbnz	r3, 800803a <_fflush_r+0x1a>
 8008036:	f7ff f943 	bl	80072c0 <__sinit>
 800803a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f3      	beq.n	800802a <_fflush_r+0xa>
 8008042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008044:	07d0      	lsls	r0, r2, #31
 8008046:	d404      	bmi.n	8008052 <_fflush_r+0x32>
 8008048:	0599      	lsls	r1, r3, #22
 800804a:	d402      	bmi.n	8008052 <_fflush_r+0x32>
 800804c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800804e:	f7ff fb8c 	bl	800776a <__retarget_lock_acquire_recursive>
 8008052:	4628      	mov	r0, r5
 8008054:	4621      	mov	r1, r4
 8008056:	f7ff ff5f 	bl	8007f18 <__sflush_r>
 800805a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800805c:	07da      	lsls	r2, r3, #31
 800805e:	4605      	mov	r5, r0
 8008060:	d4e4      	bmi.n	800802c <_fflush_r+0xc>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	059b      	lsls	r3, r3, #22
 8008066:	d4e1      	bmi.n	800802c <_fflush_r+0xc>
 8008068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800806a:	f7ff fb7f 	bl	800776c <__retarget_lock_release_recursive>
 800806e:	e7dd      	b.n	800802c <_fflush_r+0xc>

08008070 <__swhatbuf_r>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	460c      	mov	r4, r1
 8008074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008078:	2900      	cmp	r1, #0
 800807a:	b096      	sub	sp, #88	@ 0x58
 800807c:	4615      	mov	r5, r2
 800807e:	461e      	mov	r6, r3
 8008080:	da0d      	bge.n	800809e <__swhatbuf_r+0x2e>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008088:	f04f 0100 	mov.w	r1, #0
 800808c:	bf14      	ite	ne
 800808e:	2340      	movne	r3, #64	@ 0x40
 8008090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008094:	2000      	movs	r0, #0
 8008096:	6031      	str	r1, [r6, #0]
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	b016      	add	sp, #88	@ 0x58
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	466a      	mov	r2, sp
 80080a0:	f000 f848 	bl	8008134 <_fstat_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	dbec      	blt.n	8008082 <__swhatbuf_r+0x12>
 80080a8:	9901      	ldr	r1, [sp, #4]
 80080aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080b2:	4259      	negs	r1, r3
 80080b4:	4159      	adcs	r1, r3
 80080b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ba:	e7eb      	b.n	8008094 <__swhatbuf_r+0x24>

080080bc <__smakebuf_r>:
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080c0:	079d      	lsls	r5, r3, #30
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	d507      	bpl.n	80080d8 <__smakebuf_r+0x1c>
 80080c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b003      	add	sp, #12
 80080d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d8:	ab01      	add	r3, sp, #4
 80080da:	466a      	mov	r2, sp
 80080dc:	f7ff ffc8 	bl	8008070 <__swhatbuf_r>
 80080e0:	9f00      	ldr	r7, [sp, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	4639      	mov	r1, r7
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7ff fbbc 	bl	8007864 <_malloc_r>
 80080ec:	b948      	cbnz	r0, 8008102 <__smakebuf_r+0x46>
 80080ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f2:	059a      	lsls	r2, r3, #22
 80080f4:	d4ee      	bmi.n	80080d4 <__smakebuf_r+0x18>
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	e7e2      	b.n	80080c8 <__smakebuf_r+0xc>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	6020      	str	r0, [r4, #0]
 8008106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008112:	b15b      	cbz	r3, 800812c <__smakebuf_r+0x70>
 8008114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008118:	4630      	mov	r0, r6
 800811a:	f000 f81d 	bl	8008158 <_isatty_r>
 800811e:	b128      	cbz	r0, 800812c <__smakebuf_r+0x70>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	431d      	orrs	r5, r3
 8008130:	81a5      	strh	r5, [r4, #12]
 8008132:	e7cf      	b.n	80080d4 <__smakebuf_r+0x18>

08008134 <_fstat_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d07      	ldr	r5, [pc, #28]	@ (8008154 <_fstat_r+0x20>)
 8008138:	2300      	movs	r3, #0
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	f7f9 f830 	bl	80011a6 <_fstat>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d102      	bne.n	8008150 <_fstat_r+0x1c>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	b103      	cbz	r3, 8008150 <_fstat_r+0x1c>
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	bd38      	pop	{r3, r4, r5, pc}
 8008152:	bf00      	nop
 8008154:	20005fa8 	.word	0x20005fa8

08008158 <_isatty_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	@ (8008174 <_isatty_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f9 f82f 	bl	80011c6 <_isatty>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_isatty_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_isatty_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20005fa8 	.word	0x20005fa8

08008178 <_sbrk_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d06      	ldr	r5, [pc, #24]	@ (8008194 <_sbrk_r+0x1c>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7f9 f838 	bl	80011f8 <_sbrk>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_sbrk_r+0x1a>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_sbrk_r+0x1a>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20005fa8 	.word	0x20005fa8

08008198 <_init>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	bf00      	nop
 800819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819e:	bc08      	pop	{r3}
 80081a0:	469e      	mov	lr, r3
 80081a2:	4770      	bx	lr

080081a4 <_fini>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	bf00      	nop
 80081a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081aa:	bc08      	pop	{r3}
 80081ac:	469e      	mov	lr, r3
 80081ae:	4770      	bx	lr
