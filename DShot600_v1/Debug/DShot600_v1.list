
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080061f0  080061f0  000071f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006288  08006288  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006288  08006288  00007288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006290  08006290  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006290  08006290  00007290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006294  08006294  00007294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006298  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          000060d4  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006134  20006134  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001534e  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003109  00000000  00000000  0001d3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  000204e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e35  00000000  00000000  00021758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f76  00000000  00000000  0002258d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e4e  00000000  00000000  00025503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c849f  00000000  00000000  00039351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001017f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005040  00000000  00000000  00101834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00106874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061d8 	.word	0x080061d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080061d8 	.word	0x080061d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fc22 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f830 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f946 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f924 	bl	8000758 <MX_DMA_Init>
  MX_TIM5_Init();
 8000510:	f000 f894 	bl	800063c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  DShot_PrepareBuffer(make_dshot_frame(0, false));
 8000514:	2100      	movs	r1, #0
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f9d0 	bl	80008bc <make_dshot_frame>
 800051c:	4603      	mov	r3, r0
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f962 	bl	80007e8 <DShot_PrepareBuffer>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f002 ffb6 	bl	8003494 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000528:	4a09      	ldr	r2, [pc, #36]	@ (8000550 <main+0x54>)
 800052a:	2100      	movs	r1, #0
 800052c:	4809      	ldr	r0, [pc, #36]	@ (8000554 <main+0x58>)
 800052e:	f002 fffb 	bl	8003528 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <main+0x5c>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 8000538:	4a08      	ldr	r2, [pc, #32]	@ (800055c <main+0x60>)
 800053a:	2100      	movs	r1, #0
 800053c:	4808      	ldr	r0, [pc, #32]	@ (8000560 <main+0x64>)
 800053e:	f002 fff3 	bl	8003528 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <main+0x68>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f002 ffc8 	bl	80034dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x50>
 8000550:	08006220 	.word	0x08006220
 8000554:	08000905 	.word	0x08000905
 8000558:	20000124 	.word	0x20000124
 800055c:	08006244 	.word	0x08006244
 8000560:	08000915 	.word	0x08000915
 8000564:	20000128 	.word	0x20000128

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fd3e 	bl	8005ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005dc:	23a8      	movs	r3, #168	@ 0xa8
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f9e9 	bl	80019c4 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f9ea 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fc4a 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 f9d3 	bl	80009d0 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800065e:	4b3a      	ldr	r3, [pc, #232]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000660:	4a3a      	ldr	r2, [pc, #232]	@ (800074c <MX_TIM5_Init+0x110>)
 8000662:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000664:	4b38      	ldr	r3, [pc, #224]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066a:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <MX_TIM5_Init+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 70;
 8000670:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000672:	2246      	movs	r2, #70	@ 0x46
 8000674:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000676:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <MX_TIM5_Init+0x10c>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000682:	4831      	ldr	r0, [pc, #196]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000684:	f001 fede 	bl	8002444 <HAL_TIM_PWM_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800068e:	f000 f99f 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4619      	mov	r1, r3
 80006a0:	4829      	ldr	r0, [pc, #164]	@ (8000748 <MX_TIM5_Init+0x10c>)
 80006a2:	f002 fe23 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80006ac:	f000 f990 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b0:	2360      	movs	r3, #96	@ 0x60
 80006b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	4820      	ldr	r0, [pc, #128]	@ (8000748 <MX_TIM5_Init+0x10c>)
 80006c8:	f002 f9c4 	bl	8002a54 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f97d 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  // Configure DMA for TIM5_CH1 (PA0)
  hdma_tim5_ch1.Instance = DMA1_Stream2;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_TIM5_Init+0x114>)
 80006d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <MX_TIM5_Init+0x118>)
 80006da:	601a      	str	r2, [r3, #0]
  hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_TIM5_Init+0x114>)
 80006de:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80006e2:	605a      	str	r2, [r3, #4]
  hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_TIM5_Init+0x114>)
 80006e6:	2240      	movs	r2, #64	@ 0x40
 80006e8:	609a      	str	r2, [r3, #8]
  hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <MX_TIM5_Init+0x114>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_TIM5_Init+0x114>)
 80006f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f6:	611a      	str	r2, [r3, #16]
  hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_TIM5_Init+0x114>)
 80006fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006fe:	615a      	str	r2, [r3, #20]
  hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_TIM5_Init+0x114>)
 8000702:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000706:	619a      	str	r2, [r3, #24]
  hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_TIM5_Init+0x114>)
 800070a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800070e:	61da      	str	r2, [r3, #28]
  hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_TIM5_Init+0x114>)
 8000712:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000716:	621a      	str	r2, [r3, #32]
  hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_TIM5_Init+0x114>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800071e:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_TIM5_Init+0x114>)
 8000720:	f000 fc36 	bl	8000f90 <HAL_DMA_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 800072a:	f000 f951 	bl	80009d0 <Error_Handler>
  }
  __HAL_LINKDMA(&htim5, hdma[TIM_DMA_ID_CC1], hdma_tim5_ch1);
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000730:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <MX_TIM5_Init+0x114>)
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_TIM5_Init+0x114>)
 8000736:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <MX_TIM5_Init+0x10c>)
 8000738:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <MX_TIM5_Init+0x10c>)
 800073c:	f000 f9d8 	bl	8000af0 <HAL_TIM_MspPostInit>

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	@ 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000007c 	.word	0x2000007c
 800074c:	40000c00 	.word	0x40000c00
 8000750:	200000c4 	.word	0x200000c4
 8000754:	40026040 	.word	0x40026040

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_DMA_Init+0x3c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <MX_DMA_Init+0x3c>)
 8000768:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_DMA_Init+0x3c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2105      	movs	r1, #5
 800077e:	200d      	movs	r0, #13
 8000780:	f000 fbdc 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000784:	200d      	movs	r0, #13
 8000786:	f000 fbf5 	bl	8000f74 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_GPIO_Init+0x4c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <MX_GPIO_Init+0x4c>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <MX_GPIO_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_GPIO_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0x4c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_GPIO_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <DShot_PrepareBuffer>:

/* USER CODE BEGIN 4 */
void DShot_PrepareBuffer(uint16_t frame)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

    for (int i = 15; i >= 0; i--)
 80007f6:	230f      	movs	r3, #15
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	e02a      	b.n	8000852 <DShot_PrepareBuffer+0x6a>
    {
        uint8_t bit = (frame >> i) & 0x01;
 80007fc:	88fa      	ldrh	r2, [r7, #6]
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	fa42 f303 	asr.w	r3, r2, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
        if (bit)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00e      	beq.n	8000830 <DShot_PrepareBuffer+0x48>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // 1.25 µs (logic 1 inverted)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	617a      	str	r2, [r7, #20]
 8000818:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <DShot_PrepareBuffer+0x98>)
 800081a:	2169      	movs	r1, #105	@ 0x69
 800081c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	617a      	str	r2, [r7, #20]
 8000826:	4a16      	ldr	r2, [pc, #88]	@ (8000880 <DShot_PrepareBuffer+0x98>)
 8000828:	2100      	movs	r1, #0
 800082a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800082e:	e00d      	b.n	800084c <DShot_PrepareBuffer+0x64>
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // 0.625 µs (logic 0 inverted)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	617a      	str	r2, [r7, #20]
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <DShot_PrepareBuffer+0x98>)
 8000838:	2134      	movs	r1, #52	@ 0x34
 800083a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	617a      	str	r2, [r7, #20]
 8000844:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <DShot_PrepareBuffer+0x98>)
 8000846:	2100      	movs	r1, #0
 8000848:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	3b01      	subs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dad1      	bge.n	80007fc <DShot_PrepareBuffer+0x14>
        }
    }

    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	617a      	str	r2, [r7, #20]
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <DShot_PrepareBuffer+0x98>)
 8000860:	2100      	movs	r1, #0
 8000862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    dshot_buffer[buffer_index++] = 0;  // Extra delay
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	617a      	str	r2, [r7, #20]
 800086c:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <DShot_PrepareBuffer+0x98>)
 800086e:	2100      	movs	r1, #0
 8000870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000874:	bf00      	nop
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	2000012c 	.word	0x2000012c

08000884 <dshot_crc>:



// Generate CRC (same as spec)
uint8_t dshot_crc(uint16_t value_with_telemetry_bit)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
    return (value_with_telemetry_bit ^ (value_with_telemetry_bit >> 4) ^ (value_with_telemetry_bit >> 8)) & 0x0F;
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2da      	uxtb	r2, r3
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4053      	eors	r3, r2
 800089c:	b2da      	uxtb	r2, r3
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4053      	eors	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <make_dshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_dshot_frame(uint16_t value, bool telemetry)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	460a      	mov	r2, r1
 80008c6:	80fb      	strh	r3, [r7, #6]
 80008c8:	4613      	mov	r3, r2
 80008ca:	717b      	strb	r3, [r7, #5]
    value = (value << 1) | (telemetry ? 1 : 0);  // Add telemetry bit
 80008cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	80fb      	strh	r3, [r7, #6]
    uint8_t crc = dshot_crc(value);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ffcf 	bl	8000884 <dshot_crc>
 80008e6:	4603      	mov	r3, r0
 80008e8:	73fb      	strb	r3, [r7, #15]
    return (value << 4) | crc;
 80008ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	b29b      	uxth	r3, r3
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f002 fe9d 	bl	800364c <osDelay>
 8000912:	e7fb      	b.n	800090c <StartDefaultTask+0x8>

08000914 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    // Step 1: Send ARM command (value 0)
    //uint16_t arm_frame = make_dshot_frame(0, true);
	uint16_t arm_frame = 0x000F;
 800091c:	230f      	movs	r3, #15
 800091e:	81fb      	strh	r3, [r7, #14]
    DShot_PrepareBuffer(arm_frame);
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff60 	bl	80007e8 <DShot_PrepareBuffer>

    if (HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000928:	239c      	movs	r3, #156	@ 0x9c
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <DShotTask+0x88>)
 800092c:	2100      	movs	r1, #0
 800092e:	481c      	ldr	r0, [pc, #112]	@ (80009a0 <DShotTask+0x8c>)
 8000930:	f001 fdd8 	bl	80024e4 <HAL_TIM_PWM_Start_DMA>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <DShotTask+0x2a>
    {
        Error_Handler();
 800093a:	f000 f849 	bl	80009d0 <Error_Handler>
    }

    dshot_running = 1;
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <DShotTask+0x90>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
    osDelay(3000);  // Wait 300ms (Bluejay requires for arming)
 8000944:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000948:	f002 fe80 	bl	800364c <osDelay>

    // Step 2: Send throttle command (example: 300)
    //uint16_t throttle_frame = make_dshot_frame(300, true);
    uint16_t throttle_frame = 0x2481;
 800094c:	f242 4381 	movw	r3, #9345	@ 0x2481
 8000950:	81bb      	strh	r3, [r7, #12]
    DShot_PrepareBuffer(throttle_frame);
 8000952:	89bb      	ldrh	r3, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff47 	bl	80007e8 <DShot_PrepareBuffer>

    if (HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 800095a:	239c      	movs	r3, #156	@ 0x9c
 800095c:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <DShotTask+0x88>)
 800095e:	2100      	movs	r1, #0
 8000960:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <DShotTask+0x8c>)
 8000962:	f001 fdbf 	bl	80024e4 <HAL_TIM_PWM_Start_DMA>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <DShotTask+0x5c>
    {
        Error_Handler();
 800096c:	f000 f830 	bl	80009d0 <Error_Handler>
    }

    dshot_running = 1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <DShotTask+0x90>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]

    // Step 3: Loop to monitor or extend behavior
    while (1)
    {
        if (HAL_DMA_GetState(&hdma_tim5_ch1) != HAL_DMA_STATE_READY)
 8000976:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <DShotTask+0x94>)
 8000978:	f000 fd9a 	bl	80014b0 <HAL_DMA_GetState>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d003      	beq.n	800098a <DShotTask+0x76>
        {
            dshot_running = 1;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <DShotTask+0x90>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e004      	b.n	8000994 <DShotTask+0x80>
        }
        else
        {
            dshot_running = 0;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <DShotTask+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
            Error_Handler();
 8000990:	f000 f81e 	bl	80009d0 <Error_Handler>
        }
        osDelay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f002 fe59 	bl	800364c <osDelay>
        if (HAL_DMA_GetState(&hdma_tim5_ch1) != HAL_DMA_STATE_READY)
 800099a:	e7ec      	b.n	8000976 <DShotTask+0x62>
 800099c:	2000012c 	.word	0x2000012c
 80009a0:	2000007c 	.word	0x2000007c
 80009a4:	2000039c 	.word	0x2000039c
 80009a8:	200000c4 	.word	0x200000c4

080009ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009be:	f000 f9e5 	bl	8000d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40001c00 	.word	0x40001c00

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <HAL_MspInit+0x54>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	f06f 0001 	mvn.w	r0, #1
 8000a22:	f000 fa8b 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a27      	ldr	r2, [pc, #156]	@ (8000ae0 <HAL_TIM_PWM_MspInit+0xac>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d147      	bne.n	8000ad6 <HAL_TIM_PWM_MspInit+0xa2>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ae4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a64:	4a21      	ldr	r2, [pc, #132]	@ (8000aec <HAL_TIM_PWM_MspInit+0xb8>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a6a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000a6e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a72:	2240      	movs	r2, #64	@ 0x40
 8000a74:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a8a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a9a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000a9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000aa2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000aaa:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000aac:	f000 fa70 	bl	8000f90 <HAL_DMA_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8000ab6:	f7ff ff8b 	bl	80009d0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ac0:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2032      	movs	r0, #50	@ 0x32
 8000acc:	f000 fa36 	bl	8000f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ad0:	2032      	movs	r0, #50	@ 0x32
 8000ad2:	f000 fa4f 	bl	8000f74 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40000c00 	.word	0x40000c00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	200000c4 	.word	0x200000c4
 8000aec:	40026040 	.word	0x40026040

08000af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <HAL_TIM_MspPostInit+0x68>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d11d      	bne.n	8000b4e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_TIM_MspPostInit+0x6c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <HAL_TIM_MspPostInit+0x6c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_TIM_MspPostInit+0x6c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_TIM_MspPostInit+0x70>)
 8000b4a:	f000 fd9f 	bl	800168c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40000c00 	.word	0x40000c00
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <HAL_InitTick+0xe4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a32      	ldr	r2, [pc, #200]	@ (8000c48 <HAL_InitTick+0xe4>)
 8000b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b84:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <HAL_InitTick+0xe4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fb56 	bl	800224c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000baa:	f001 fb3b 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8000bae:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bb0:	e004      	b.n	8000bbc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bb2:	f001 fb37 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbe:	4a23      	ldr	r2, [pc, #140]	@ (8000c4c <HAL_InitTick+0xe8>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <HAL_InitTick+0xf0>)
 8000bce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bdc:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_InitTick+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_InitTick+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 8000bf0:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bf2:	f001 fb5d 	bl	80022b0 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d11b      	bne.n	8000c3c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8000c04:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <HAL_InitTick+0xec>)
 8000c06:	f001 fbad 	bl	8002364 <HAL_TIM_Base_Start_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d111      	bne.n	8000c3c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000c18:	202c      	movs	r0, #44	@ 0x2c
 8000c1a:	f000 f9ab 	bl	8000f74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d808      	bhi.n	8000c36 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	202c      	movs	r0, #44	@ 0x2c
 8000c2a:	f000 f987 	bl	8000f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_InitTick+0xf4>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e002      	b.n	8000c3c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3738      	adds	r7, #56	@ 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	200003a0 	.word	0x200003a0
 8000c54:	40001c00 	.word	0x40001c00
 8000c58:	20000004 	.word	0x20000004

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <DMA1_Stream2_IRQHandler+0x10>)
 8000c9a:	f000 fa7f 	bl	800119c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000c4 	.word	0x200000c4

08000ca8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000cae:	f001 fde1 	bl	8002874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200003a0 	.word	0x200003a0

08000cbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <TIM5_IRQHandler+0x10>)
 8000cc2:	f001 fdd7 	bl	8002874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000007c 	.word	0x2000007c

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf8:	f7ff ffea 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	@ (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f005 f9cf 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fbe9 	bl	80004fc <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d38:	08006298 	.word	0x08006298
  ldr r2, =_sbss
 8000d3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d40:	20006134 	.word	0x20006134

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f8d8 	bl	8000f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f7ff fef4 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe2e 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200003e8 	.word	0x200003e8

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200003e8 	.word	0x200003e8

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	@ (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	@ (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	@ (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	@ 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff4c 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4e:	f7ff ff61 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff ffb1 	bl	8000ec0 <NVIC_EncodePriority>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff80 	bl	8000e6c <__NVIC_SetPriority>
}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff54 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ff0a 	bl	8000db4 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e099      	b.n	80010e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fcc:	e00f      	b.n	8000fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fce:	f7ff fef1 	bl	8000db4 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d908      	bls.n	8000fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e078      	b.n	80010e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e8      	bne.n	8000fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4b38      	ldr	r3, [pc, #224]	@ (80010e8 <HAL_DMA_Init+0x158>)
 8001008:	4013      	ands	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4313      	orrs	r3, r2
 800103e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001044:	2b04      	cmp	r3, #4
 8001046:	d107      	bne.n	8001058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	4313      	orrs	r3, r2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	4313      	orrs	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107e:	2b04      	cmp	r3, #4
 8001080:	d117      	bne.n	80010b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00e      	beq.n	80010b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fa7d 	bl	8001594 <DMA_CheckFifoParam>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2240      	movs	r2, #64	@ 0x40
 80010a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80010ae:	2301      	movs	r3, #1
 80010b0:	e016      	b.n	80010e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fa34 	bl	8001528 <DMA_CalcBaseAndBitshift>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c8:	223f      	movs	r2, #63	@ 0x3f
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	f010803f 	.word	0xf010803f

080010ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_DMA_Start_IT+0x26>
 800110e:	2302      	movs	r3, #2
 8001110:	e040      	b.n	8001194 <HAL_DMA_Start_IT+0xa8>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d12f      	bne.n	8001186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2202      	movs	r2, #2
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f9c6 	bl	80014cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001144:	223f      	movs	r2, #63	@ 0x3f
 8001146:	409a      	lsls	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0216 	orr.w	r2, r2, #22
 800115a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0208 	orr.w	r2, r2, #8
 8001172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e005      	b.n	8001192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800118e:	2302      	movs	r3, #2
 8001190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011a8:	4b8e      	ldr	r3, [pc, #568]	@ (80013e4 <HAL_DMA_IRQHandler+0x248>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a8e      	ldr	r2, [pc, #568]	@ (80013e8 <HAL_DMA_IRQHandler+0x24c>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0a9b      	lsrs	r3, r3, #10
 80011b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c6:	2208      	movs	r2, #8
 80011c8:	409a      	lsls	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d01a      	beq.n	8001208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0204 	bic.w	r2, r2, #4
 80011ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f4:	2208      	movs	r2, #8
 80011f6:	409a      	lsls	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120c:	2201      	movs	r2, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d012      	beq.n	800123e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001236:	f043 0202 	orr.w	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001242:	2204      	movs	r2, #4
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d012      	beq.n	8001274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001260:	2204      	movs	r2, #4
 8001262:	409a      	lsls	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126c:	f043 0204 	orr.w	r2, r3, #4
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001278:	2210      	movs	r2, #16
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d043      	beq.n	800130c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03c      	beq.n	800130c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001296:	2210      	movs	r2, #16
 8001298:	409a      	lsls	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d018      	beq.n	80012de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d108      	bne.n	80012cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d024      	beq.n	800130c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
 80012ca:	e01f      	b.n	800130c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01b      	beq.n	800130c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
 80012dc:	e016      	b.n	800130c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0208 	bic.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001310:	2220      	movs	r2, #32
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 808f 	beq.w	800143c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 8087 	beq.w	800143c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001332:	2220      	movs	r2, #32
 8001334:	409a      	lsls	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b05      	cmp	r3, #5
 8001344:	d136      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0216 	bic.w	r2, r2, #22
 8001354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <HAL_DMA_IRQHandler+0x1da>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0208 	bic.w	r2, r2, #8
 8001384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138a:	223f      	movs	r2, #63	@ 0x3f
 800138c:	409a      	lsls	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d07e      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
        }
        return;
 80013b2:	e079      	b.n	80014a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01d      	beq.n	80013fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10d      	bne.n	80013ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d031      	beq.n	800143c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
 80013e0:	e02c      	b.n	800143c <HAL_DMA_IRQHandler+0x2a0>
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000
 80013e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
 80013fc:	e01e      	b.n	800143c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10f      	bne.n	800142c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0210 	bic.w	r2, r2, #16
 800141a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001440:	2b00      	cmp	r3, #0
 8001442:	d032      	beq.n	80014aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d022      	beq.n	8001496 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2205      	movs	r2, #5
 8001454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	429a      	cmp	r2, r3
 8001472:	d307      	bcc.n	8001484 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f2      	bne.n	8001468 <HAL_DMA_IRQHandler+0x2cc>
 8001482:	e000      	b.n	8001486 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001484:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
 80014a6:	e000      	b.n	80014aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80014a8:	bf00      	nop
    }
  }
}
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014be:	b2db      	uxtb	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80014e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b40      	cmp	r3, #64	@ 0x40
 80014f8:	d108      	bne.n	800150c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800150a:	e007      	b.n	800151c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3b10      	subs	r3, #16
 8001538:	4a14      	ldr	r2, [pc, #80]	@ (800158c <DMA_CalcBaseAndBitshift+0x64>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001542:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <DMA_CalcBaseAndBitshift+0x68>)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d909      	bls.n	800156a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	1d1a      	adds	r2, r3, #4
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	659a      	str	r2, [r3, #88]	@ 0x58
 8001568:	e007      	b.n	800157a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	aaaaaaab 	.word	0xaaaaaaab
 8001590:	08006280 	.word	0x08006280

08001594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11f      	bne.n	80015ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d856      	bhi.n	8001662 <DMA_CheckFifoParam+0xce>
 80015b4:	a201      	add	r2, pc, #4	@ (adr r2, 80015bc <DMA_CheckFifoParam+0x28>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015df 	.word	0x080015df
 80015c4:	080015cd 	.word	0x080015cd
 80015c8:	08001663 	.word	0x08001663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d046      	beq.n	8001666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015dc:	e043      	b.n	8001666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015e6:	d140      	bne.n	800166a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ec:	e03d      	b.n	800166a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015f6:	d121      	bne.n	800163c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d837      	bhi.n	800166e <DMA_CheckFifoParam+0xda>
 80015fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001604 <DMA_CheckFifoParam+0x70>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	08001615 	.word	0x08001615
 8001608:	0800161b 	.word	0x0800161b
 800160c:	08001615 	.word	0x08001615
 8001610:	0800162d 	.word	0x0800162d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
      break;
 8001618:	e030      	b.n	800167c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d025      	beq.n	8001672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800162a:	e022      	b.n	8001672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001634:	d11f      	bne.n	8001676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800163a:	e01c      	b.n	8001676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d903      	bls.n	800164a <DMA_CheckFifoParam+0xb6>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d003      	beq.n	8001650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001648:	e018      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
      break;
 800164e:	e015      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00e      	beq.n	800167a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
      break;
 8001660:	e00b      	b.n	800167a <DMA_CheckFifoParam+0xe6>
      break;
 8001662:	bf00      	nop
 8001664:	e00a      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      break;
 8001666:	bf00      	nop
 8001668:	e008      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      break;
 800166a:	bf00      	nop
 800166c:	e006      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      break;
 800166e:	bf00      	nop
 8001670:	e004      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      break;
 8001672:	bf00      	nop
 8001674:	e002      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      break;   
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <DMA_CheckFifoParam+0xe8>
      break;
 800167a:	bf00      	nop
    }
  } 
  
  return status; 
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e16b      	b.n	8001980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	f040 815a 	bne.w	800197a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d005      	beq.n	80016de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d130      	bne.n	8001740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b03      	cmp	r3, #3
 800174a:	d017      	beq.n	800177c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d123      	bne.n	80017d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80b4 	beq.w	800197a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b60      	ldr	r3, [pc, #384]	@ (8001998 <HAL_GPIO_Init+0x30c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a5f      	ldr	r2, [pc, #380]	@ (8001998 <HAL_GPIO_Init+0x30c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b5d      	ldr	r3, [pc, #372]	@ (8001998 <HAL_GPIO_Init+0x30c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182e:	4a5b      	ldr	r2, [pc, #364]	@ (800199c <HAL_GPIO_Init+0x310>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a52      	ldr	r2, [pc, #328]	@ (80019a0 <HAL_GPIO_Init+0x314>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d02b      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a51      	ldr	r2, [pc, #324]	@ (80019a4 <HAL_GPIO_Init+0x318>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x222>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a50      	ldr	r2, [pc, #320]	@ (80019a8 <HAL_GPIO_Init+0x31c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x21e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4f      	ldr	r2, [pc, #316]	@ (80019ac <HAL_GPIO_Init+0x320>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x21a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4e      	ldr	r2, [pc, #312]	@ (80019b0 <HAL_GPIO_Init+0x324>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x216>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4d      	ldr	r2, [pc, #308]	@ (80019b4 <HAL_GPIO_Init+0x328>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x212>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4c      	ldr	r2, [pc, #304]	@ (80019b8 <HAL_GPIO_Init+0x32c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x20e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <HAL_GPIO_Init+0x330>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x20a>
 8001892:	2307      	movs	r3, #7
 8001894:	e00e      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 8001896:	2308      	movs	r3, #8
 8001898:	e00c      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 800189a:	2306      	movs	r3, #6
 800189c:	e00a      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 800189e:	2305      	movs	r3, #5
 80018a0:	e008      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 80018a6:	2303      	movs	r3, #3
 80018a8:	e004      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_GPIO_Init+0x228>
 80018b2:	2300      	movs	r3, #0
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f002 0203 	and.w	r2, r2, #3
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	4093      	lsls	r3, r2
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c4:	4935      	ldr	r1, [pc, #212]	@ (800199c <HAL_GPIO_Init+0x310>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d2:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f6:	4a32      	ldr	r2, [pc, #200]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018fc:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001920:	4a27      	ldr	r2, [pc, #156]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001926:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194a:	4a1d      	ldr	r2, [pc, #116]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3301      	adds	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	f67f ae90 	bls.w	80016a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40013800 	.word	0x40013800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40021c00 	.word	0x40021c00
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e267      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d075      	beq.n	8001ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019e2:	4b88      	ldr	r3, [pc, #544]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d00c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4b85      	ldr	r3, [pc, #532]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fa:	4b82      	ldr	r3, [pc, #520]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4b7e      	ldr	r3, [pc, #504]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05b      	beq.n	8001acc <HAL_RCC_OscConfig+0x108>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d157      	bne.n	8001acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e242      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a28:	d106      	bne.n	8001a38 <HAL_RCC_OscConfig+0x74>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xb0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x98>
 8001a42:	4b70      	ldr	r3, [pc, #448]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6f      	ldr	r2, [pc, #444]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6c      	ldr	r2, [pc, #432]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xb0>
 8001a5c:	4b69      	ldr	r3, [pc, #420]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a68      	ldr	r2, [pc, #416]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b66      	ldr	r3, [pc, #408]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a65      	ldr	r2, [pc, #404]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f99a 	bl	8000db4 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f996 	bl	8000db4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	@ 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e207      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b5b      	ldr	r3, [pc, #364]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xc0>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f986 	bl	8000db4 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff f982 	bl	8000db4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	@ 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1f3      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0xe8>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ada:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x152>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1c7      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4937      	ldr	r1, [pc, #220]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCC_OscConfig+0x244>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f93b 	bl	8000db4 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f937 	bl	8000db4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1a8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4925      	ldr	r1, [pc, #148]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x244>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f91a 	bl	8000db4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f916 	bl	8000db4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e187      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d036      	beq.n	8001c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_RCC_OscConfig+0x248>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f8fa 	bl	8000db4 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f8f6 	bl	8000db4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e167      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x200>
 8001be2:	e01b      	b.n	8001c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x248>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff f8e3 	bl	8000db4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e00e      	b.n	8001c10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f8df 	bl	8000db4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d907      	bls.n	8001c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e150      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	42470000 	.word	0x42470000
 8001c0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b88      	ldr	r3, [pc, #544]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ea      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8097 	beq.w	8001d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b81      	ldr	r3, [pc, #516]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a7c      	ldr	r2, [pc, #496]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b77      	ldr	r3, [pc, #476]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b74      	ldr	r3, [pc, #464]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a73      	ldr	r2, [pc, #460]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f89f 	bl	8000db4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff f89b 	bl	8000db4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e10c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e38 <HAL_RCC_OscConfig+0x474>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x2ea>
 8001ca0:	4b64      	ldr	r3, [pc, #400]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a63      	ldr	r2, [pc, #396]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x324>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x30c>
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cba:	4a5e      	ldr	r2, [pc, #376]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x324>
 8001cd0:	4b58      	ldr	r3, [pc, #352]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd4:	4a57      	ldr	r2, [pc, #348]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cdc:	4b55      	ldr	r3, [pc, #340]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce0:	4a54      	ldr	r2, [pc, #336]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f860 	bl	8000db4 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f85c 	bl	8000db4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0cb      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	4b49      	ldr	r3, [pc, #292]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ee      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x334>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f84a 	bl	8000db4 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f846 	bl	8000db4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0b5      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ee      	bne.n	8001d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4b39      	ldr	r3, [pc, #228]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	4a38      	ldr	r2, [pc, #224]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a1 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d62:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d05c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d141      	bne.n	8001dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f81a 	bl	8000db4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f816 	bl	8000db4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e087      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	491b      	ldr	r1, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe ffef 	bl	8000db4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe ffeb 	bl	8000db4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e05c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x416>
 8001df8:	e054      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe ffd8 	bl	8000db4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe ffd4 	bl	8000db4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e045      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x444>
 8001e26:	e03d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e038      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ec>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d028      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d121      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11a      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0cc      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b68      	ldr	r3, [pc, #416]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d90c      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b65      	ldr	r3, [pc, #404]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a52      	ldr	r2, [pc, #328]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d044      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e067      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4934      	ldr	r1, [pc, #208]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7fe ff06 	bl	8000db4 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7fe ff02 	bl	8000db4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e04f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d20c      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd82 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00
 8002070:	40023800 	.word	0x40023800
 8002074:	08006268 	.word	0x08006268
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002084:	b090      	sub	sp, #64	@ 0x40
 8002086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002098:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d00d      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	f200 80a1 	bhi.w	80021ec <HAL_RCC_GetSysClockFreq+0x16c>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x3a>
 80020b2:	e09b      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x184>)
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020b8:	e09b      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ba:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x188>)
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020be:	e098      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d028      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	2200      	movs	r2, #0
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020e8:	2100      	movs	r1, #0
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ec:	fb03 f201 	mul.w	r2, r3, r1
 80020f0:	2300      	movs	r3, #0
 80020f2:	fb00 f303 	mul.w	r3, r0, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	4a43      	ldr	r2, [pc, #268]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x188>)
 80020fa:	fba0 1202 	umull	r1, r2, r0, r2
 80020fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002100:	460a      	mov	r2, r1
 8002102:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002106:	4413      	add	r3, r2
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800210a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210c:	2200      	movs	r2, #0
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	61fa      	str	r2, [r7, #28]
 8002112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002116:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800211a:	f7fe f859 	bl	80001d0 <__aeabi_uldivmod>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4613      	mov	r3, r2
 8002124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002126:	e053      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	2200      	movs	r2, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	617a      	str	r2, [r7, #20]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800213a:	f04f 0b00 	mov.w	fp, #0
 800213e:	4652      	mov	r2, sl
 8002140:	465b      	mov	r3, fp
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ebb2 080a 	subs.w	r8, r2, sl
 800215a:	eb63 090b 	sbc.w	r9, r3, fp
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800216a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800216e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002172:	ebb2 0408 	subs.w	r4, r2, r8
 8002176:	eb63 0509 	sbc.w	r5, r3, r9
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	00eb      	lsls	r3, r5, #3
 8002184:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002188:	00e2      	lsls	r2, r4, #3
 800218a:	4614      	mov	r4, r2
 800218c:	461d      	mov	r5, r3
 800218e:	eb14 030a 	adds.w	r3, r4, sl
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	eb45 030b 	adc.w	r3, r5, fp
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021a6:	4629      	mov	r1, r5
 80021a8:	028b      	lsls	r3, r1, #10
 80021aa:	4621      	mov	r1, r4
 80021ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b0:	4621      	mov	r1, r4
 80021b2:	028a      	lsls	r2, r1, #10
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ba:	2200      	movs	r2, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c4:	f7fe f804 	bl	80001d0 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ea:	e002      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3740      	adds	r7, #64	@ 0x40
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	00f42400 	.word	0x00f42400
 8002208:	00b71b00 	.word	0x00b71b00

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	@ (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	08006278 	.word	0x08006278

0800224c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	220f      	movs	r2, #15
 800225a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002268:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <HAL_RCC_GetClockConfig+0x60>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0207 	and.w	r2, r3, #7
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e041      	b.n	8002346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f839 	bl	800234e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 fd80 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d001      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e04e      	b.n	800241a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a23      	ldr	r2, [pc, #140]	@ (8002428 <HAL_TIM_Base_Start_IT+0xc4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d022      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a6:	d01d      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <HAL_TIM_Base_Start_IT+0xc8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_TIM_Base_Start_IT+0xcc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <HAL_TIM_Base_Start_IT+0xd0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_TIM_Base_Start_IT+0xd4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	@ (800243c <HAL_TIM_Base_Start_IT+0xd8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x80>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <HAL_TIM_Base_Start_IT+0xdc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d010      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	e007      	b.n	8002418 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40010000 	.word	0x40010000
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40000c00 	.word	0x40000c00
 8002438:	40010400 	.word	0x40010400
 800243c:	40014000 	.word	0x40014000
 8002440:	40001800 	.word	0x40001800

08002444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e041      	b.n	80024da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fae2 	bl	8000a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 fcb6 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_TIM_PWM_Start_DMA+0x2c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e022      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0x72>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d109      	bne.n	800252a <HAL_TIM_PWM_Start_DMA+0x46>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e015      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0x72>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start_DMA+0x60>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e008      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0x72>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	e171      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_TIM_PWM_Start_DMA+0x94>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e022      	b.n	80025be <HAL_TIM_PWM_Start_DMA+0xda>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b04      	cmp	r3, #4
 800257c:	d109      	bne.n	8002592 <HAL_TIM_PWM_Start_DMA+0xae>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e015      	b.n	80025be <HAL_TIM_PWM_Start_DMA+0xda>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d109      	bne.n	80025ac <HAL_TIM_PWM_Start_DMA+0xc8>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e008      	b.n	80025be <HAL_TIM_PWM_Start_DMA+0xda>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d024      	beq.n	800260c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_TIM_PWM_Start_DMA+0xea>
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e137      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025e0:	e016      	b.n	8002610 <HAL_TIM_PWM_Start_DMA+0x12c>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025f0:	e00e      	b.n	8002610 <HAL_TIM_PWM_Start_DMA+0x12c>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d104      	bne.n	8002602 <HAL_TIM_PWM_Start_DMA+0x11e>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002600:	e006      	b.n	8002610 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2202      	movs	r2, #2
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800260a:	e001      	b.n	8002610 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e118      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	f200 80ae 	bhi.w	8002774 <HAL_TIM_PWM_Start_DMA+0x290>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002655 	.word	0x08002655
 8002624:	08002775 	.word	0x08002775
 8002628:	08002775 	.word	0x08002775
 800262c:	08002775 	.word	0x08002775
 8002630:	0800269d 	.word	0x0800269d
 8002634:	08002775 	.word	0x08002775
 8002638:	08002775 	.word	0x08002775
 800263c:	08002775 	.word	0x08002775
 8002640:	080026e5 	.word	0x080026e5
 8002644:	08002775 	.word	0x08002775
 8002648:	08002775 	.word	0x08002775
 800264c:	08002775 	.word	0x08002775
 8002650:	0800272d 	.word	0x0800272d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	4a7c      	ldr	r2, [pc, #496]	@ (800284c <HAL_TIM_PWM_Start_DMA+0x368>)
 800265a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	4a7b      	ldr	r2, [pc, #492]	@ (8002850 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	4a7a      	ldr	r2, [pc, #488]	@ (8002854 <HAL_TIM_PWM_Start_DMA+0x370>)
 800266a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3334      	adds	r3, #52	@ 0x34
 8002678:	461a      	mov	r2, r3
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	f7fe fd36 	bl	80010ec <HAL_DMA_Start_IT>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0db      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002698:	60da      	str	r2, [r3, #12]
      break;
 800269a:	e06e      	b.n	800277a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	4a6a      	ldr	r2, [pc, #424]	@ (800284c <HAL_TIM_PWM_Start_DMA+0x368>)
 80026a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	4a69      	ldr	r2, [pc, #420]	@ (8002850 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	4a68      	ldr	r2, [pc, #416]	@ (8002854 <HAL_TIM_PWM_Start_DMA+0x370>)
 80026b2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3338      	adds	r3, #56	@ 0x38
 80026c0:	461a      	mov	r2, r3
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	f7fe fd12 	bl	80010ec <HAL_DMA_Start_IT>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0b7      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026e0:	60da      	str	r2, [r3, #12]
      break;
 80026e2:	e04a      	b.n	800277a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	4a58      	ldr	r2, [pc, #352]	@ (800284c <HAL_TIM_PWM_Start_DMA+0x368>)
 80026ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	4a57      	ldr	r2, [pc, #348]	@ (8002850 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	4a56      	ldr	r2, [pc, #344]	@ (8002854 <HAL_TIM_PWM_Start_DMA+0x370>)
 80026fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	333c      	adds	r3, #60	@ 0x3c
 8002708:	461a      	mov	r2, r3
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	f7fe fcee 	bl	80010ec <HAL_DMA_Start_IT>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e093      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002728:	60da      	str	r2, [r3, #12]
      break;
 800272a:	e026      	b.n	800277a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	4a46      	ldr	r2, [pc, #280]	@ (800284c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002732:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	4a45      	ldr	r2, [pc, #276]	@ (8002850 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	4a44      	ldr	r2, [pc, #272]	@ (8002854 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002742:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3340      	adds	r3, #64	@ 0x40
 8002750:	461a      	mov	r2, r3
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	f7fe fcca 	bl	80010ec <HAL_DMA_Start_IT>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06f      	b.n	8002842 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002770:	60da      	str	r2, [r3, #12]
      break;
 8002772:	e002      	b.n	800277a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	75fb      	strb	r3, [r7, #23]
      break;
 8002778:	bf00      	nop
  }

  if (status == HAL_OK)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d15f      	bne.n	8002840 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fd89 	bl	80032a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a31      	ldr	r2, [pc, #196]	@ (8002858 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <HAL_TIM_PWM_Start_DMA+0x378>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <HAL_TIM_PWM_Start_DMA+0x374>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d022      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ce:	d01d      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d018      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a21      	ldr	r2, [pc, #132]	@ (8002864 <HAL_TIM_PWM_Start_DMA+0x380>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_TIM_PWM_Start_DMA+0x384>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1a      	ldr	r2, [pc, #104]	@ (800285c <HAL_TIM_PWM_Start_DMA+0x378>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	@ (800286c <HAL_TIM_PWM_Start_DMA+0x388>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_PWM_Start_DMA+0x328>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d111      	bne.n	8002830 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b06      	cmp	r3, #6
 800281c:	d010      	beq.n	8002840 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	e007      	b.n	8002840 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002840:	7dfb      	ldrb	r3, [r7, #23]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	08002ce3 	.word	0x08002ce3
 8002850:	08002d8b 	.word	0x08002d8b
 8002854:	08002c51 	.word	0x08002c51
 8002858:	40010000 	.word	0x40010000
 800285c:	40010400 	.word	0x40010400
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800
 8002868:	40000c00 	.word	0x40000c00
 800286c:	40014000 	.word	0x40014000
 8002870:	40001800 	.word	0x40001800

08002874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d020      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0202 	mvn.w	r2, #2
 80028a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f994 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f986 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f997 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d020      	beq.n	8002924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01b      	beq.n	8002924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0204 	mvn.w	r2, #4
 80028f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f96e 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002910:	e005      	b.n	800291e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f960 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f971 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d020      	beq.n	8002970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01b      	beq.n	8002970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0208 	mvn.w	r2, #8
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2204      	movs	r2, #4
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f948 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f93a 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f94b 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d020      	beq.n	80029bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01b      	beq.n	80029bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0210 	mvn.w	r2, #16
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2208      	movs	r2, #8
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f922 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f914 	bl	8002bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f925 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0201 	mvn.w	r2, #1
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fd ffe6 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fcfa 	bl	80033f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f900 	bl	8002c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0220 	mvn.w	r2, #32
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fccc 	bl	80033e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0ae      	b.n	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	f200 809f 	bhi.w	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a82:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002bc1 	.word	0x08002bc1
 8002a90:	08002bc1 	.word	0x08002bc1
 8002a94:	08002bc1 	.word	0x08002bc1
 8002a98:	08002afd 	.word	0x08002afd
 8002a9c:	08002bc1 	.word	0x08002bc1
 8002aa0:	08002bc1 	.word	0x08002bc1
 8002aa4:	08002bc1 	.word	0x08002bc1
 8002aa8:	08002b3f 	.word	0x08002b3f
 8002aac:	08002bc1 	.word	0x08002bc1
 8002ab0:	08002bc1 	.word	0x08002bc1
 8002ab4:	08002bc1 	.word	0x08002bc1
 8002ab8:	08002b7f 	.word	0x08002b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fa3c 	bl	8002f40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0208 	orr.w	r2, r2, #8
 8002ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6999      	ldr	r1, [r3, #24]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	619a      	str	r2, [r3, #24]
      break;
 8002afa:	e064      	b.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fa8c 	bl	8003020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	619a      	str	r2, [r3, #24]
      break;
 8002b3c:	e043      	b.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fae1 	bl	800310c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0208 	orr.w	r2, r2, #8
 8002b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0204 	bic.w	r2, r2, #4
 8002b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	61da      	str	r2, [r3, #28]
      break;
 8002b7c:	e023      	b.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fb35 	bl	80031f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	61da      	str	r2, [r3, #28]
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d107      	bne.n	8002c78 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c76:	e02a      	b.n	8002cce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d107      	bne.n	8002c92 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2202      	movs	r2, #2
 8002c86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c90:	e01d      	b.n	8002cce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002caa:	e010      	b.n	8002cce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d107      	bne.n	8002cc6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cc4:	e003      	b.n	8002cce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff ffb4 	bl	8002c3c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	771a      	strb	r2, [r3, #28]
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10b      	bne.n	8002d12 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d136      	bne.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d10:	e031      	b.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d10b      	bne.n	8002d34 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d125      	bne.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d32:	e020      	b.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10b      	bne.n	8002d56 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d114      	bne.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d54:	e00f      	b.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10a      	bne.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2208      	movs	r2, #8
 8002d64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f7ff ff42 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	771a      	strb	r2, [r3, #28]
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d103      	bne.n	8002daa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]
 8002da8:	e019      	b.n	8002dde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d103      	bne.n	8002dbc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2202      	movs	r2, #2
 8002db8:	771a      	strb	r2, [r3, #28]
 8002dba:	e010      	b.n	8002dde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d103      	bne.n	8002dce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	771a      	strb	r2, [r3, #28]
 8002dcc:	e007      	b.n	8002dde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d102      	bne.n	8002dde <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ff18 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	771a      	strb	r2, [r3, #28]
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a43      	ldr	r2, [pc, #268]	@ (8002f14 <TIM_Base_SetConfig+0x120>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e12:	d00f      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a40      	ldr	r2, [pc, #256]	@ (8002f18 <TIM_Base_SetConfig+0x124>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f1c <TIM_Base_SetConfig+0x128>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	@ (8002f20 <TIM_Base_SetConfig+0x12c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x40>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f24 <TIM_Base_SetConfig+0x130>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <TIM_Base_SetConfig+0x120>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02b      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d027      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2f      	ldr	r2, [pc, #188]	@ (8002f18 <TIM_Base_SetConfig+0x124>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d023      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2e      	ldr	r2, [pc, #184]	@ (8002f1c <TIM_Base_SetConfig+0x128>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2d      	ldr	r2, [pc, #180]	@ (8002f20 <TIM_Base_SetConfig+0x12c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01b      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2c      	ldr	r2, [pc, #176]	@ (8002f24 <TIM_Base_SetConfig+0x130>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d017      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <TIM_Base_SetConfig+0x134>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	@ (8002f2c <TIM_Base_SetConfig+0x138>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a29      	ldr	r2, [pc, #164]	@ (8002f30 <TIM_Base_SetConfig+0x13c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a28      	ldr	r2, [pc, #160]	@ (8002f34 <TIM_Base_SetConfig+0x140>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <TIM_Base_SetConfig+0x144>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	@ (8002f3c <TIM_Base_SetConfig+0x148>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f14 <TIM_Base_SetConfig+0x120>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0xf2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a10      	ldr	r2, [pc, #64]	@ (8002f24 <TIM_Base_SetConfig+0x130>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d103      	bne.n	8002eee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40010400 	.word	0x40010400
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800
 8002f34:	40001800 	.word	0x40001800
 8002f38:	40001c00 	.word	0x40001c00
 8002f3c:	40002000 	.word	0x40002000

08002f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f023 0201 	bic.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 0302 	bic.w	r3, r3, #2
 8002f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <TIM_OC1_SetConfig+0xd8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_OC1_SetConfig+0x64>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <TIM_OC1_SetConfig+0xdc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10c      	bne.n	8002fbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0308 	bic.w	r3, r3, #8
 8002faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <TIM_OC1_SetConfig+0xd8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_OC1_SetConfig+0x8e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <TIM_OC1_SetConfig+0xdc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d111      	bne.n	8002ff2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40010000 	.word	0x40010000
 800301c:	40010400 	.word	0x40010400

08003020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f023 0210 	bic.w	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0320 	bic.w	r3, r3, #32
 800306a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a22      	ldr	r2, [pc, #136]	@ (8003104 <TIM_OC2_SetConfig+0xe4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_OC2_SetConfig+0x68>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a21      	ldr	r2, [pc, #132]	@ (8003108 <TIM_OC2_SetConfig+0xe8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10d      	bne.n	80030a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800308e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a17      	ldr	r2, [pc, #92]	@ (8003104 <TIM_OC2_SetConfig+0xe4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_OC2_SetConfig+0x94>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a16      	ldr	r2, [pc, #88]	@ (8003108 <TIM_OC2_SetConfig+0xe8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d113      	bne.n	80030dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40010400 	.word	0x40010400

0800310c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a21      	ldr	r2, [pc, #132]	@ (80031ec <TIM_OC3_SetConfig+0xe0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d003      	beq.n	8003172 <TIM_OC3_SetConfig+0x66>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a20      	ldr	r2, [pc, #128]	@ (80031f0 <TIM_OC3_SetConfig+0xe4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10d      	bne.n	800318e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800318c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a16      	ldr	r2, [pc, #88]	@ (80031ec <TIM_OC3_SetConfig+0xe0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <TIM_OC3_SetConfig+0x92>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a15      	ldr	r2, [pc, #84]	@ (80031f0 <TIM_OC3_SetConfig+0xe4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d113      	bne.n	80031c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400

080031f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800322a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800323e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	031b      	lsls	r3, r3, #12
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <TIM_OC4_SetConfig+0xa4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC4_SetConfig+0x68>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a11      	ldr	r2, [pc, #68]	@ (800329c <TIM_OC4_SetConfig+0xa8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d109      	bne.n	8003270 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40010000 	.word	0x40010000
 800329c:	40010400 	.word	0x40010400

080032a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2201      	movs	r2, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e05a      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d01d      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40001800 	.word	0x40001800

080033e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <__NVIC_SetPriority>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	@ (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	@ (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <SysTick_Handler+0x1c>)
 8003466:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003468:	f001 fd46 	bl	8004ef8 <xTaskGetSchedulerState>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003472:	f002 fb41 	bl	8005af8 <xPortSysTickHandler>
  }
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010

08003480 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003484:	2100      	movs	r1, #0
 8003486:	f06f 0004 	mvn.w	r0, #4
 800348a:	f7ff ffbf 	bl	800340c <__NVIC_SetPriority>
#endif
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800349a:	f3ef 8305 	mrs	r3, IPSR
 800349e:	603b      	str	r3, [r7, #0]
  return(result);
 80034a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034a6:	f06f 0305 	mvn.w	r3, #5
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e00c      	b.n	80034c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <osKernelInitialize+0x44>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <osKernelInitialize+0x44>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	e002      	b.n	80034c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034c8:	687b      	ldr	r3, [r7, #4]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	200003ec 	.word	0x200003ec

080034dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e2:	f3ef 8305 	mrs	r3, IPSR
 80034e6:	603b      	str	r3, [r7, #0]
  return(result);
 80034e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80034ee:	f06f 0305 	mvn.w	r3, #5
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	e010      	b.n	8003518 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <osKernelStart+0x48>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d109      	bne.n	8003512 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034fe:	f7ff ffbf 	bl	8003480 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003502:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <osKernelStart+0x48>)
 8003504:	2202      	movs	r2, #2
 8003506:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003508:	f001 f892 	bl	8004630 <vTaskStartScheduler>
      stat = osOK;
 800350c:	2300      	movs	r3, #0
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	e002      	b.n	8003518 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003518:	687b      	ldr	r3, [r7, #4]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200003ec 	.word	0x200003ec

08003528 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	@ 0x38
 800352c:	af04      	add	r7, sp, #16
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003538:	f3ef 8305 	mrs	r3, IPSR
 800353c:	617b      	str	r3, [r7, #20]
  return(result);
 800353e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003540:	2b00      	cmp	r3, #0
 8003542:	d17e      	bne.n	8003642 <osThreadNew+0x11a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d07b      	beq.n	8003642 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800354e:	2318      	movs	r3, #24
 8003550:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d045      	beq.n	80035ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <osThreadNew+0x48>
        name = attr->name;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <osThreadNew+0x6e>
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b38      	cmp	r3, #56	@ 0x38
 8003588:	d805      	bhi.n	8003596 <osThreadNew+0x6e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <osThreadNew+0x72>
        return (NULL);
 8003596:	2300      	movs	r3, #0
 8003598:	e054      	b.n	8003644 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <osThreadNew+0xa8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2ba7      	cmp	r3, #167	@ 0xa7
 80035b8:	d90a      	bls.n	80035d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <osThreadNew+0xa8>
        mem = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e010      	b.n	80035f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10c      	bne.n	80035f2 <osThreadNew+0xca>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d108      	bne.n	80035f2 <osThreadNew+0xca>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <osThreadNew+0xca>
          mem = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e001      	b.n	80035f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d110      	bne.n	800361a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003600:	9202      	str	r2, [sp, #8]
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6a3a      	ldr	r2, [r7, #32]
 800360c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fe1a 	bl	8004248 <xTaskCreateStatic>
 8003614:	4603      	mov	r3, r0
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e013      	b.n	8003642 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d110      	bne.n	8003642 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	b29a      	uxth	r2, r3
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fe68 	bl	8004308 <xTaskCreate>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <osThreadNew+0x11a>
            hTask = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003642:	693b      	ldr	r3, [r7, #16]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	@ 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003654:	f3ef 8305 	mrs	r3, IPSR
 8003658:	60bb      	str	r3, [r7, #8]
  return(result);
 800365a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <osDelay+0x1c>
    stat = osErrorISR;
 8003660:	f06f 0305 	mvn.w	r3, #5
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e007      	b.n	8003678 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 ffa6 	bl	80045c4 <vTaskDelay>
    }
  }

  return (stat);
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a07      	ldr	r2, [pc, #28]	@ (80036b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003694:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a06      	ldr	r2, [pc, #24]	@ (80036b4 <vApplicationGetIdleTaskMemory+0x30>)
 800369a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	@ 0x80
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	200003f0 	.word	0x200003f0
 80036b4:	20000498 	.word	0x20000498

080036b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a07      	ldr	r2, [pc, #28]	@ (80036e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80036c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a06      	ldr	r2, [pc, #24]	@ (80036e8 <vApplicationGetTimerTaskMemory+0x30>)
 80036ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	20000698 	.word	0x20000698
 80036e8:	20000740 	.word	0x20000740

080036ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 0208 	add.w	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f103 0208 	add.w	r2, r3, #8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f103 0208 	add.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d103      	bne.n	80037ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e00c      	b.n	80037c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3308      	adds	r3, #8
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e002      	b.n	80037bc <vListInsert+0x2e>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d2f6      	bcs.n	80037b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d103      	bne.n	8003834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1e5a      	subs	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003880:	f002 f8aa 	bl	80059d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	3b01      	subs	r3, #1
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	22ff      	movs	r2, #255	@ 0xff
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22ff      	movs	r2, #255	@ 0xff
 80038cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d114      	bne.n	8003900 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01a      	beq.n	8003914 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3310      	adds	r3, #16
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f942 	bl	8004b6c <xTaskRemoveFromEventList>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <xQueueGenericReset+0xd0>)
 80038f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	e009      	b.n	8003914 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3310      	adds	r3, #16
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fef1 	bl	80036ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3324      	adds	r3, #36	@ 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff feec 	bl	80036ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003914:	f002 f892 	bl	8005a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	@ 0x38
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	e7fd      	b.n	8003950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <xQueueGenericCreateStatic+0x56>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <xQueueGenericCreateStatic+0x5a>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <xQueueGenericCreateStatic+0x5c>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	623b      	str	r3, [r7, #32]
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <xQueueGenericCreateStatic+0x84>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <xQueueGenericCreateStatic+0x88>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <xQueueGenericCreateStatic+0x8a>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61fb      	str	r3, [r7, #28]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ce:	2350      	movs	r3, #80	@ 0x50
 80039d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b50      	cmp	r3, #80	@ 0x50
 80039d6:	d00b      	beq.n	80039f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	61bb      	str	r3, [r7, #24]
}
 80039ea:	bf00      	nop
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f805 	bl	8003a22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3730      	adds	r7, #48	@ 0x30
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e002      	b.n	8003a44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a50:	2101      	movs	r1, #1
 8003a52:	69b8      	ldr	r0, [r7, #24]
 8003a54:	f7ff fefe 	bl	8003854 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	@ 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <xQueueGenericSend+0x34>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <xQueueGenericSend+0x42>
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <xQueueGenericSend+0x46>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueGenericSend+0x48>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <xQueueGenericSend+0x64>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d103      	bne.n	8003ada <xQueueGenericSend+0x72>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <xQueueGenericSend+0x76>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <xQueueGenericSend+0x78>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xQueueGenericSend+0x94>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003afc:	f001 f9fc 	bl	8004ef8 <xTaskGetSchedulerState>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <xQueueGenericSend+0xa4>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <xQueueGenericSend+0xa8>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <xQueueGenericSend+0xaa>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <xQueueGenericSend+0xc6>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61fb      	str	r3, [r7, #28]
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b2e:	f001 ff53 	bl	80059d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <xQueueGenericSend+0xdc>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d129      	bne.n	8003b98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b4a:	f000 fa0f 	bl	8003f6c <prvCopyDataToQueue>
 8003b4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	3324      	adds	r3, #36	@ 0x24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f805 	bl	8004b6c <xTaskRemoveFromEventList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b68:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <xQueueGenericSend+0x200>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	e00a      	b.n	8003b90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b80:	4b39      	ldr	r3, [pc, #228]	@ (8003c68 <xQueueGenericSend+0x200>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b90:	f001 ff54 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e063      	b.n	8003c60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b9e:	f001 ff4d 	bl	8005a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e05c      	b.n	8003c60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f83f 	bl	8004c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bba:	f001 ff3f 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bbe:	f000 fda7 	bl	8004710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc2:	f001 ff09 	bl	80059d8 <vPortEnterCritical>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <xQueueGenericSend+0x174>
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <xQueueGenericSend+0x18a>
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bf2:	f001 ff23 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf6:	1d3a      	adds	r2, r7, #4
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f82e 	bl	8004c60 <xTaskCheckForTimeOut>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d124      	bne.n	8003c54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c0c:	f000 faa6 	bl	800415c <prvIsQueueFull>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	3310      	adds	r3, #16
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ff52 	bl	8004ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c26:	f000 fa31 	bl	800408c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c2a:	f000 fd7f 	bl	800472c <xTaskResumeAll>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f af7c 	bne.w	8003b2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c36:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <xQueueGenericSend+0x200>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	e772      	b.n	8003b2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c4a:	f000 fa1f 	bl	800408c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4e:	f000 fd6d 	bl	800472c <xTaskResumeAll>
 8003c52:	e76c      	b.n	8003b2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c56:	f000 fa19 	bl	800408c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c5a:	f000 fd67 	bl	800472c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3738      	adds	r7, #56	@ 0x38
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b090      	sub	sp, #64	@ 0x40
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <xQueueGenericSendFromISR+0x3e>
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xQueueGenericSendFromISR+0x42>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueGenericSendFromISR+0x44>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSendFromISR+0x6e>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <xQueueGenericSendFromISR+0x72>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericSendFromISR+0x74>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cfc:	f001 ff4c 	bl	8005b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d00:	f3ef 8211 	mrs	r2, BASEPRI
 8003d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	61fa      	str	r2, [r7, #28]
 8003d16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <xQueueGenericSendFromISR+0xc2>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d12f      	bne.n	8003d8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d44:	f000 f912 	bl	8003f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d112      	bne.n	8003d78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	3324      	adds	r3, #36	@ 0x24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 ff04 	bl	8004b6c <xTaskRemoveFromEventList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e007      	b.n	8003d88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003d8c:	e001      	b.n	8003d92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3740      	adds	r7, #64	@ 0x40
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	@ 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <xQueueReceive+0x32>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	623b      	str	r3, [r7, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <xQueueReceive+0x40>
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <xQueueReceive+0x44>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <xQueueReceive+0x46>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <xQueueReceive+0x62>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	61fb      	str	r3, [r7, #28]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0a:	f001 f875 	bl	8004ef8 <xTaskGetSchedulerState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueReceive+0x72>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x76>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x78>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <xQueueReceive+0x94>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61bb      	str	r3, [r7, #24]
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3c:	f001 fdcc 	bl	80059d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01f      	beq.n	8003e8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e50:	f000 f8f6 	bl	8004040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00f      	beq.n	8003e84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	3310      	adds	r3, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fe7f 	bl	8004b6c <xTaskRemoveFromEventList>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e74:	4b3c      	ldr	r3, [pc, #240]	@ (8003f68 <xQueueReceive+0x1c0>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e84:	f001 fdda 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e069      	b.n	8003f60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e92:	f001 fdd3 	bl	8005a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e062      	b.n	8003f60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fec5 	bl	8004c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eae:	f001 fdc5 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb2:	f000 fc2d 	bl	8004710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb6:	f001 fd8f 	bl	80059d8 <vPortEnterCritical>
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d103      	bne.n	8003ed0 <xQueueReceive+0x128>
 8003ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ed6:	b25b      	sxtb	r3, r3
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d103      	bne.n	8003ee6 <xQueueReceive+0x13e>
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ee6:	f001 fda9 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eea:	1d3a      	adds	r2, r7, #4
 8003eec:	f107 0310 	add.w	r3, r7, #16
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 feb4 	bl	8004c60 <xTaskCheckForTimeOut>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d123      	bne.n	8003f46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f00:	f000 f916 	bl	8004130 <prvIsQueueEmpty>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d017      	beq.n	8003f3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	3324      	adds	r3, #36	@ 0x24
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fdd8 	bl	8004ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f1a:	f000 f8b7 	bl	800408c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f1e:	f000 fc05 	bl	800472c <xTaskResumeAll>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d189      	bne.n	8003e3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f28:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <xQueueReceive+0x1c0>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	e780      	b.n	8003e3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f3c:	f000 f8a6 	bl	800408c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f40:	f000 fbf4 	bl	800472c <xTaskResumeAll>
 8003f44:	e77a      	b.n	8003e3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f48:	f000 f8a0 	bl	800408c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f4c:	f000 fbee 	bl	800472c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f52:	f000 f8ed 	bl	8004130 <prvIsQueueEmpty>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f43f af6f 	beq.w	8003e3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3730      	adds	r7, #48	@ 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d14d      	bne.n	800402e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 ffcc 	bl	8004f34 <xTaskPriorityDisinherit>
 8003f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	e043      	b.n	800402e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d119      	bne.n	8003fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6858      	ldr	r0, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	f002 f8aa 	bl	8006110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d32b      	bcc.n	800402e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	e026      	b.n	800402e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68d8      	ldr	r0, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	f002 f890 	bl	8006110 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	425b      	negs	r3, r3
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d207      	bcs.n	800401c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	425b      	negs	r3, r3
 8004016:	441a      	add	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d105      	bne.n	800402e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3b01      	subs	r3, #1
 800402c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004036:	697b      	ldr	r3, [r7, #20]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d018      	beq.n	8004084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	441a      	add	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	d303      	bcc.n	8004074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68d9      	ldr	r1, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	461a      	mov	r2, r3
 800407e:	6838      	ldr	r0, [r7, #0]
 8004080:	f002 f846 	bl	8006110 <memcpy>
	}
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004094:	f001 fca0 	bl	80059d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800409e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040a0:	e011      	b.n	80040c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	@ 0x24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fd5c 	bl	8004b6c <xTaskRemoveFromEventList>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040ba:	f000 fe35 	bl	8004d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	dce9      	bgt.n	80040a2 <prvUnlockQueue+0x16>
 80040ce:	e000      	b.n	80040d2 <prvUnlockQueue+0x46>
					break;
 80040d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	22ff      	movs	r2, #255	@ 0xff
 80040d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040da:	f001 fcaf 	bl	8005a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040de:	f001 fc7b 	bl	80059d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ea:	e011      	b.n	8004110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d012      	beq.n	800411a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3310      	adds	r3, #16
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fd37 	bl	8004b6c <xTaskRemoveFromEventList>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004104:	f000 fe10 	bl	8004d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004108:	7bbb      	ldrb	r3, [r7, #14]
 800410a:	3b01      	subs	r3, #1
 800410c:	b2db      	uxtb	r3, r3
 800410e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dce9      	bgt.n	80040ec <prvUnlockQueue+0x60>
 8004118:	e000      	b.n	800411c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800411a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	22ff      	movs	r2, #255	@ 0xff
 8004120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004124:	f001 fc8a 	bl	8005a3c <vPortExitCritical>
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004138:	f001 fc4e 	bl	80059d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e001      	b.n	800414e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800414e:	f001 fc75 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004164:	f001 fc38 	bl	80059d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	429a      	cmp	r2, r3
 8004172:	d102      	bne.n	800417a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e001      	b.n	800417e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800417e:	f001 fc5d 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e014      	b.n	80041c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800419c:	4a0f      	ldr	r2, [pc, #60]	@ (80041dc <vQueueAddToRegistry+0x50>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041a8:	490c      	ldr	r1, [pc, #48]	@ (80041dc <vQueueAddToRegistry+0x50>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041b2:	4a0a      	ldr	r2, [pc, #40]	@ (80041dc <vQueueAddToRegistry+0x50>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041be:	e006      	b.n	80041ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	d9e7      	bls.n	800419c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000b40 	.word	0x20000b40

080041e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041f0:	f001 fbf2 	bl	80059d8 <vPortEnterCritical>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d103      	bne.n	800420a <vQueueWaitForMessageRestricted+0x2a>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004210:	b25b      	sxtb	r3, r3
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d103      	bne.n	8004220 <vQueueWaitForMessageRestricted+0x40>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004220:	f001 fc0c 	bl	8005a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3324      	adds	r3, #36	@ 0x24
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fc6d 	bl	8004b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff ff26 	bl	800408c <prvUnlockQueue>
	}
 8004240:	bf00      	nop
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08e      	sub	sp, #56	@ 0x38
 800424c:	af04      	add	r7, sp, #16
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <xTaskCreateStatic+0x2c>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	623b      	str	r3, [r7, #32]
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <xTaskCreateStatic+0x4a>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	61fb      	str	r3, [r7, #28]
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	e7fd      	b.n	800428e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004292:	23a8      	movs	r3, #168	@ 0xa8
 8004294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2ba8      	cmp	r3, #168	@ 0xa8
 800429a:	d00b      	beq.n	80042b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	61bb      	str	r3, [r7, #24]
}
 80042ae:	bf00      	nop
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01e      	beq.n	80042fa <xTaskCreateStatic+0xb2>
 80042bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01b      	beq.n	80042fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042d4:	2300      	movs	r3, #0
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	9302      	str	r3, [sp, #8]
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f851 	bl	8004394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042f4:	f000 f8f6 	bl	80044e4 <prvAddNewTaskToReadyList>
 80042f8:	e001      	b.n	80042fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042fe:	697b      	ldr	r3, [r7, #20]
	}
 8004300:	4618      	mov	r0, r3
 8004302:	3728      	adds	r7, #40	@ 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08c      	sub	sp, #48	@ 0x30
 800430c:	af04      	add	r7, sp, #16
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4618      	mov	r0, r3
 800431e:	f001 fc7d 	bl	8005c1c <pvPortMalloc>
 8004322:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800432a:	20a8      	movs	r0, #168	@ 0xa8
 800432c:	f001 fc76 	bl	8005c1c <pvPortMalloc>
 8004330:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
 800433e:	e005      	b.n	800434c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004340:	6978      	ldr	r0, [r7, #20]
 8004342:	f001 fd39 	bl	8005db8 <vPortFree>
 8004346:	e001      	b.n	800434c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	2300      	movs	r3, #0
 800435e:	9303      	str	r3, [sp, #12]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f80f 	bl	8004394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004376:	69f8      	ldr	r0, [r7, #28]
 8004378:	f000 f8b4 	bl	80044e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800437c:	2301      	movs	r3, #1
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	e002      	b.n	8004388 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004388:	69bb      	ldr	r3, [r7, #24]
	}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	461a      	mov	r2, r3
 80043ac:	21a5      	movs	r1, #165	@ 0xa5
 80043ae:	f001 fe23 	bl	8005ff8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043bc:	3b01      	subs	r3, #1
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	617b      	str	r3, [r7, #20]
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	e7fd      	b.n	80043ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01f      	beq.n	8004434 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e012      	b.n	8004420 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	7819      	ldrb	r1, [r3, #0]
 8004402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	3334      	adds	r3, #52	@ 0x34
 800440a:	460a      	mov	r2, r1
 800440c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3301      	adds	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b0f      	cmp	r3, #15
 8004424:	d9e9      	bls.n	80043fa <prvInitialiseNewTask+0x66>
 8004426:	e000      	b.n	800442a <prvInitialiseNewTask+0x96>
			{
				break;
 8004428:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004432:	e003      	b.n	800443c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	2b37      	cmp	r3, #55	@ 0x37
 8004440:	d901      	bls.n	8004446 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004442:	2337      	movs	r3, #55	@ 0x37
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800444a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004450:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	2200      	movs	r2, #0
 8004456:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f965 	bl	800372c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	3318      	adds	r3, #24
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff f960 	bl	800372c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004470:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	3354      	adds	r3, #84	@ 0x54
 8004496:	224c      	movs	r2, #76	@ 0x4c
 8004498:	2100      	movs	r1, #0
 800449a:	4618      	mov	r0, r3
 800449c:	f001 fdac 	bl	8005ff8 <memset>
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	4a0d      	ldr	r2, [pc, #52]	@ (80044d8 <prvInitialiseNewTask+0x144>)
 80044a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	4a0c      	ldr	r2, [pc, #48]	@ (80044dc <prvInitialiseNewTask+0x148>)
 80044aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	4a0c      	ldr	r2, [pc, #48]	@ (80044e0 <prvInitialiseNewTask+0x14c>)
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	69b8      	ldr	r0, [r7, #24]
 80044b8:	f001 f95a 	bl	8005770 <pxPortInitialiseStack>
 80044bc:	4602      	mov	r2, r0
 80044be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ce:	bf00      	nop
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20005ff4 	.word	0x20005ff4
 80044dc:	2000605c 	.word	0x2000605c
 80044e0:	200060c4 	.word	0x200060c4

080044e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044ec:	f001 fa74 	bl	80059d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044f0:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <prvAddNewTaskToReadyList+0xc4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	4a2c      	ldr	r2, [pc, #176]	@ (80045a8 <prvAddNewTaskToReadyList+0xc4>)
 80044f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044fa:	4b2c      	ldr	r3, [pc, #176]	@ (80045ac <prvAddNewTaskToReadyList+0xc8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004502:	4a2a      	ldr	r2, [pc, #168]	@ (80045ac <prvAddNewTaskToReadyList+0xc8>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004508:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <prvAddNewTaskToReadyList+0xc4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d110      	bne.n	8004532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004510:	f000 fc2e 	bl	8004d70 <prvInitialiseTaskLists>
 8004514:	e00d      	b.n	8004532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004516:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <prvAddNewTaskToReadyList+0xcc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800451e:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <prvAddNewTaskToReadyList+0xc8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	429a      	cmp	r2, r3
 800452a:	d802      	bhi.n	8004532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800452c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <prvAddNewTaskToReadyList+0xc8>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004532:	4b20      	ldr	r3, [pc, #128]	@ (80045b4 <prvAddNewTaskToReadyList+0xd0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <prvAddNewTaskToReadyList+0xd0>)
 800453a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800453c:	4b1d      	ldr	r3, [pc, #116]	@ (80045b4 <prvAddNewTaskToReadyList+0xd0>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004548:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <prvAddNewTaskToReadyList+0xd4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d903      	bls.n	8004558 <prvAddNewTaskToReadyList+0x74>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	4a18      	ldr	r2, [pc, #96]	@ (80045b8 <prvAddNewTaskToReadyList+0xd4>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a15      	ldr	r2, [pc, #84]	@ (80045bc <prvAddNewTaskToReadyList+0xd8>)
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7ff f8e9 	bl	8003746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004574:	f001 fa62 	bl	8005a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004578:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <prvAddNewTaskToReadyList+0xcc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <prvAddNewTaskToReadyList+0xc8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	429a      	cmp	r2, r3
 800458c:	d207      	bcs.n	800459e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800458e:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <prvAddNewTaskToReadyList+0xdc>)
 8004590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20001054 	.word	0x20001054
 80045ac:	20000b80 	.word	0x20000b80
 80045b0:	20001060 	.word	0x20001060
 80045b4:	20001070 	.word	0x20001070
 80045b8:	2000105c 	.word	0x2000105c
 80045bc:	20000b84 	.word	0x20000b84
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d018      	beq.n	8004608 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045d6:	4b14      	ldr	r3, [pc, #80]	@ (8004628 <vTaskDelay+0x64>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <vTaskDelay+0x32>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045f6:	f000 f88b 	bl	8004710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045fa:	2100      	movs	r1, #0
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fd09 	bl	8005014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004602:	f000 f893 	bl	800472c <xTaskResumeAll>
 8004606:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <vTaskDelay+0x68>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	2000107c 	.word	0x2000107c
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800463e:	463a      	mov	r2, r7
 8004640:	1d39      	adds	r1, r7, #4
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f81c 	bl	8003684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	9202      	str	r2, [sp, #8]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	460a      	mov	r2, r1
 800465e:	4924      	ldr	r1, [pc, #144]	@ (80046f0 <vTaskStartScheduler+0xc0>)
 8004660:	4824      	ldr	r0, [pc, #144]	@ (80046f4 <vTaskStartScheduler+0xc4>)
 8004662:	f7ff fdf1 	bl	8004248 <xTaskCreateStatic>
 8004666:	4603      	mov	r3, r0
 8004668:	4a23      	ldr	r2, [pc, #140]	@ (80046f8 <vTaskStartScheduler+0xc8>)
 800466a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800466c:	4b22      	ldr	r3, [pc, #136]	@ (80046f8 <vTaskStartScheduler+0xc8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e001      	b.n	800467e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004684:	f000 fd1a 	bl	80050bc <xTimerCreateTimerTask>
 8004688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d11b      	bne.n	80046c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046a4:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <vTaskStartScheduler+0xcc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3354      	adds	r3, #84	@ 0x54
 80046aa:	4a15      	ldr	r2, [pc, #84]	@ (8004700 <vTaskStartScheduler+0xd0>)
 80046ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <vTaskStartScheduler+0xd4>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <vTaskStartScheduler+0xd8>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046bc:	4b13      	ldr	r3, [pc, #76]	@ (800470c <vTaskStartScheduler+0xdc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046c2:	f001 f8e5 	bl	8005890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046c6:	e00f      	b.n	80046e8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d10b      	bne.n	80046e8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <vTaskStartScheduler+0xb4>
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	08006208 	.word	0x08006208
 80046f4:	08004d41 	.word	0x08004d41
 80046f8:	20001078 	.word	0x20001078
 80046fc:	20000b80 	.word	0x20000b80
 8004700:	20000010 	.word	0x20000010
 8004704:	20001074 	.word	0x20001074
 8004708:	20001060 	.word	0x20001060
 800470c:	20001058 	.word	0x20001058

08004710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004714:	4b04      	ldr	r3, [pc, #16]	@ (8004728 <vTaskSuspendAll+0x18>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	4a03      	ldr	r2, [pc, #12]	@ (8004728 <vTaskSuspendAll+0x18>)
 800471c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	2000107c 	.word	0x2000107c

0800472c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800473a:	4b42      	ldr	r3, [pc, #264]	@ (8004844 <xTaskResumeAll+0x118>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <xTaskResumeAll+0x2e>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	603b      	str	r3, [r7, #0]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800475a:	f001 f93d 	bl	80059d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800475e:	4b39      	ldr	r3, [pc, #228]	@ (8004844 <xTaskResumeAll+0x118>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	4a37      	ldr	r2, [pc, #220]	@ (8004844 <xTaskResumeAll+0x118>)
 8004766:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004768:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <xTaskResumeAll+0x118>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d162      	bne.n	8004836 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004770:	4b35      	ldr	r3, [pc, #212]	@ (8004848 <xTaskResumeAll+0x11c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05e      	beq.n	8004836 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004778:	e02f      	b.n	80047da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477a:	4b34      	ldr	r3, [pc, #208]	@ (800484c <xTaskResumeAll+0x120>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3318      	adds	r3, #24
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f83a 	bl	8003800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f835 	bl	8003800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	4b2d      	ldr	r3, [pc, #180]	@ (8004850 <xTaskResumeAll+0x124>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d903      	bls.n	80047aa <xTaskResumeAll+0x7e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004850 <xTaskResumeAll+0x124>)
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4a27      	ldr	r2, [pc, #156]	@ (8004854 <xTaskResumeAll+0x128>)
 80047b8:	441a      	add	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f7fe ffc0 	bl	8003746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ca:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <xTaskResumeAll+0x12c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80047d4:	4b21      	ldr	r3, [pc, #132]	@ (800485c <xTaskResumeAll+0x130>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047da:	4b1c      	ldr	r3, [pc, #112]	@ (800484c <xTaskResumeAll+0x120>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1cb      	bne.n	800477a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047e8:	f000 fb66 	bl	8004eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004860 <xTaskResumeAll+0x134>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047f8:	f000 f846 	bl	8004888 <xTaskIncrementTick>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004802:	4b16      	ldr	r3, [pc, #88]	@ (800485c <xTaskResumeAll+0x130>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3b01      	subs	r3, #1
 800480c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f1      	bne.n	80047f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004814:	4b12      	ldr	r3, [pc, #72]	@ (8004860 <xTaskResumeAll+0x134>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800481a:	4b10      	ldr	r3, [pc, #64]	@ (800485c <xTaskResumeAll+0x130>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004826:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <xTaskResumeAll+0x138>)
 8004828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004836:	f001 f901 	bl	8005a3c <vPortExitCritical>

	return xAlreadyYielded;
 800483a:	68bb      	ldr	r3, [r7, #8]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	2000107c 	.word	0x2000107c
 8004848:	20001054 	.word	0x20001054
 800484c:	20001014 	.word	0x20001014
 8004850:	2000105c 	.word	0x2000105c
 8004854:	20000b84 	.word	0x20000b84
 8004858:	20000b80 	.word	0x20000b80
 800485c:	20001068 	.word	0x20001068
 8004860:	20001064 	.word	0x20001064
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800486e:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <xTaskGetTickCount+0x1c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004874:	687b      	ldr	r3, [r7, #4]
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20001058 	.word	0x20001058

08004888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004892:	4b4f      	ldr	r3, [pc, #316]	@ (80049d0 <xTaskIncrementTick+0x148>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 8090 	bne.w	80049bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800489c:	4b4d      	ldr	r3, [pc, #308]	@ (80049d4 <xTaskIncrementTick+0x14c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048a4:	4a4b      	ldr	r2, [pc, #300]	@ (80049d4 <xTaskIncrementTick+0x14c>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d121      	bne.n	80048f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80048b0:	4b49      	ldr	r3, [pc, #292]	@ (80049d8 <xTaskIncrementTick+0x150>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <xTaskIncrementTick+0x46>
 80048d2:	4b41      	ldr	r3, [pc, #260]	@ (80049d8 <xTaskIncrementTick+0x150>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	4b40      	ldr	r3, [pc, #256]	@ (80049dc <xTaskIncrementTick+0x154>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3e      	ldr	r2, [pc, #248]	@ (80049d8 <xTaskIncrementTick+0x150>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4a3e      	ldr	r2, [pc, #248]	@ (80049dc <xTaskIncrementTick+0x154>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b3e      	ldr	r3, [pc, #248]	@ (80049e0 <xTaskIncrementTick+0x158>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	4a3c      	ldr	r2, [pc, #240]	@ (80049e0 <xTaskIncrementTick+0x158>)
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	f000 fae2 	bl	8004eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <xTaskIncrementTick+0x15c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d349      	bcc.n	8004992 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fe:	4b36      	ldr	r3, [pc, #216]	@ (80049d8 <xTaskIncrementTick+0x150>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004908:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <xTaskIncrementTick+0x15c>)
 800490a:	f04f 32ff 	mov.w	r2, #4294967295
 800490e:	601a      	str	r2, [r3, #0]
					break;
 8004910:	e03f      	b.n	8004992 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <xTaskIncrementTick+0x150>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d203      	bcs.n	8004932 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800492a:	4a2e      	ldr	r2, [pc, #184]	@ (80049e4 <xTaskIncrementTick+0x15c>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004930:	e02f      	b.n	8004992 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe ff62 	bl	8003800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	3318      	adds	r3, #24
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe ff59 	bl	8003800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004952:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <xTaskIncrementTick+0x160>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d903      	bls.n	8004962 <xTaskIncrementTick+0xda>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <xTaskIncrementTick+0x160>)
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ec <xTaskIncrementTick+0x164>)
 8004970:	441a      	add	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7fe fee4 	bl	8003746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <xTaskIncrementTick+0x168>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	429a      	cmp	r2, r3
 800498a:	d3b8      	bcc.n	80048fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004990:	e7b5      	b.n	80048fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004992:	4b17      	ldr	r3, [pc, #92]	@ (80049f0 <xTaskIncrementTick+0x168>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004998:	4914      	ldr	r1, [pc, #80]	@ (80049ec <xTaskIncrementTick+0x164>)
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d901      	bls.n	80049ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049aa:	2301      	movs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049ae:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <xTaskIncrementTick+0x16c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e004      	b.n	80049c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <xTaskIncrementTick+0x170>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	4a0d      	ldr	r2, [pc, #52]	@ (80049f8 <xTaskIncrementTick+0x170>)
 80049c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049c6:	697b      	ldr	r3, [r7, #20]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	2000107c 	.word	0x2000107c
 80049d4:	20001058 	.word	0x20001058
 80049d8:	2000100c 	.word	0x2000100c
 80049dc:	20001010 	.word	0x20001010
 80049e0:	2000106c 	.word	0x2000106c
 80049e4:	20001074 	.word	0x20001074
 80049e8:	2000105c 	.word	0x2000105c
 80049ec:	20000b84 	.word	0x20000b84
 80049f0:	20000b80 	.word	0x20000b80
 80049f4:	20001068 	.word	0x20001068
 80049f8:	20001064 	.word	0x20001064

080049fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a02:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <vTaskSwitchContext+0xb4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <vTaskSwitchContext+0xb8>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a10:	e047      	b.n	8004aa2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004a12:	4b28      	ldr	r3, [pc, #160]	@ (8004ab4 <vTaskSwitchContext+0xb8>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a18:	4b27      	ldr	r3, [pc, #156]	@ (8004ab8 <vTaskSwitchContext+0xbc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e011      	b.n	8004a44 <vTaskSwitchContext+0x48>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <vTaskSwitchContext+0x42>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	607b      	str	r3, [r7, #4]
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <vTaskSwitchContext+0x3e>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	491d      	ldr	r1, [pc, #116]	@ (8004abc <vTaskSwitchContext+0xc0>)
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0e3      	beq.n	8004a20 <vTaskSwitchContext+0x24>
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <vTaskSwitchContext+0xc0>)
 8004a64:	4413      	add	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d104      	bne.n	8004a88 <vTaskSwitchContext+0x8c>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac0 <vTaskSwitchContext+0xc4>)
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <vTaskSwitchContext+0xbc>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a98:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <vTaskSwitchContext+0xc4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3354      	adds	r3, #84	@ 0x54
 8004a9e:	4a09      	ldr	r2, [pc, #36]	@ (8004ac4 <vTaskSwitchContext+0xc8>)
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	2000107c 	.word	0x2000107c
 8004ab4:	20001068 	.word	0x20001068
 8004ab8:	2000105c 	.word	0x2000105c
 8004abc:	20000b84 	.word	0x20000b84
 8004ac0:	20000b80 	.word	0x20000b80
 8004ac4:	20000010 	.word	0x20000010

08004ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	e7fd      	b.n	8004aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004af0:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <vTaskPlaceOnEventList+0x48>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3318      	adds	r3, #24
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fe fe48 	bl	800378e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004afe:	2101      	movs	r1, #1
 8004b00:	6838      	ldr	r0, [r7, #0]
 8004b02:	f000 fa87 	bl	8005014 <prvAddCurrentTaskToDelayedList>
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000b80 	.word	0x20000b80

08004b14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	617b      	str	r3, [r7, #20]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3318      	adds	r3, #24
 8004b44:	4619      	mov	r1, r3
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7fe fdfd 	bl	8003746 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
 8004b56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	68b8      	ldr	r0, [r7, #8]
 8004b5c:	f000 fa5a 	bl	8005014 <prvAddCurrentTaskToDelayedList>
	}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000b80 	.word	0x20000b80

08004b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60fb      	str	r3, [r7, #12]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fe2e 	bl	8003800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <xTaskRemoveFromEventList+0xb0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11d      	bne.n	8004be8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fe fe25 	bl	8003800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bba:	4b19      	ldr	r3, [pc, #100]	@ (8004c20 <xTaskRemoveFromEventList+0xb4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d903      	bls.n	8004bca <xTaskRemoveFromEventList+0x5e>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	4a16      	ldr	r2, [pc, #88]	@ (8004c20 <xTaskRemoveFromEventList+0xb4>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a13      	ldr	r2, [pc, #76]	@ (8004c24 <xTaskRemoveFromEventList+0xb8>)
 8004bd8:	441a      	add	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fe fdb0 	bl	8003746 <vListInsertEnd>
 8004be6:	e005      	b.n	8004bf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3318      	adds	r3, #24
 8004bec:	4619      	mov	r1, r3
 8004bee:	480e      	ldr	r0, [pc, #56]	@ (8004c28 <xTaskRemoveFromEventList+0xbc>)
 8004bf0:	f7fe fda9 	bl	8003746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c2c <xTaskRemoveFromEventList+0xc0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d905      	bls.n	8004c0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <xTaskRemoveFromEventList+0xc4>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e001      	b.n	8004c12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c12:	697b      	ldr	r3, [r7, #20]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	2000107c 	.word	0x2000107c
 8004c20:	2000105c 	.word	0x2000105c
 8004c24:	20000b84 	.word	0x20000b84
 8004c28:	20001014 	.word	0x20001014
 8004c2c:	20000b80 	.word	0x20000b80
 8004c30:	20001068 	.word	0x20001068

08004c34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <vTaskInternalSetTimeOutState+0x24>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <vTaskInternalSetTimeOutState+0x28>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	2000106c 	.word	0x2000106c
 8004c5c:	20001058 	.word	0x20001058

08004c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	e7fd      	b.n	8004ca2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004ca6:	f000 fe97 	bl	80059d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <xTaskCheckForTimeOut+0xc0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e023      	b.n	8004d12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <xTaskCheckForTimeOut+0xc4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d007      	beq.n	8004ce6 <xTaskCheckForTimeOut+0x86>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e015      	b.n	8004d12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d20b      	bcs.n	8004d08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff99 	bl	8004c34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e004      	b.n	8004d12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d12:	f000 fe93 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8004d16:	69fb      	ldr	r3, [r7, #28]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20001058 	.word	0x20001058
 8004d24:	2000106c 	.word	0x2000106c

08004d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <vTaskMissedYield+0x14>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20001068 	.word	0x20001068

08004d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d48:	f000 f852 	bl	8004df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <prvIdleTask+0x28>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d9f9      	bls.n	8004d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <prvIdleTask+0x2c>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d64:	e7f0      	b.n	8004d48 <prvIdleTask+0x8>
 8004d66:	bf00      	nop
 8004d68:	20000b84 	.word	0x20000b84
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	e00c      	b.n	8004d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a12      	ldr	r2, [pc, #72]	@ (8004dd0 <prvInitialiseTaskLists+0x60>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fcae 	bl	80036ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3301      	adds	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b37      	cmp	r3, #55	@ 0x37
 8004d9a:	d9ef      	bls.n	8004d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d9c:	480d      	ldr	r0, [pc, #52]	@ (8004dd4 <prvInitialiseTaskLists+0x64>)
 8004d9e:	f7fe fca5 	bl	80036ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004da2:	480d      	ldr	r0, [pc, #52]	@ (8004dd8 <prvInitialiseTaskLists+0x68>)
 8004da4:	f7fe fca2 	bl	80036ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004da8:	480c      	ldr	r0, [pc, #48]	@ (8004ddc <prvInitialiseTaskLists+0x6c>)
 8004daa:	f7fe fc9f 	bl	80036ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dae:	480c      	ldr	r0, [pc, #48]	@ (8004de0 <prvInitialiseTaskLists+0x70>)
 8004db0:	f7fe fc9c 	bl	80036ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004db4:	480b      	ldr	r0, [pc, #44]	@ (8004de4 <prvInitialiseTaskLists+0x74>)
 8004db6:	f7fe fc99 	bl	80036ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <prvInitialiseTaskLists+0x78>)
 8004dbc:	4a05      	ldr	r2, [pc, #20]	@ (8004dd4 <prvInitialiseTaskLists+0x64>)
 8004dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <prvInitialiseTaskLists+0x7c>)
 8004dc2:	4a05      	ldr	r2, [pc, #20]	@ (8004dd8 <prvInitialiseTaskLists+0x68>)
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000b84 	.word	0x20000b84
 8004dd4:	20000fe4 	.word	0x20000fe4
 8004dd8:	20000ff8 	.word	0x20000ff8
 8004ddc:	20001014 	.word	0x20001014
 8004de0:	20001028 	.word	0x20001028
 8004de4:	20001040 	.word	0x20001040
 8004de8:	2000100c 	.word	0x2000100c
 8004dec:	20001010 	.word	0x20001010

08004df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df6:	e019      	b.n	8004e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004df8:	f000 fdee 	bl	80059d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfc:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <prvCheckTasksWaitingTermination+0x50>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fcf9 	bl	8003800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <prvCheckTasksWaitingTermination+0x54>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4a0b      	ldr	r2, [pc, #44]	@ (8004e44 <prvCheckTasksWaitingTermination+0x54>)
 8004e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e18:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e22:	f000 fe0b 	bl	8005a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f810 	bl	8004e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e1      	bne.n	8004df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20001028 	.word	0x20001028
 8004e44:	20001054 	.word	0x20001054
 8004e48:	2000103c 	.word	0x2000103c

08004e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3354      	adds	r3, #84	@ 0x54
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 f8d5 	bl	8006008 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d108      	bne.n	8004e7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 ffa3 	bl	8005db8 <vPortFree>
				vPortFree( pxTCB );
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 ffa0 	bl	8005db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e78:	e019      	b.n	8004eae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d103      	bne.n	8004e8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 ff97 	bl	8005db8 <vPortFree>
	}
 8004e8a:	e010      	b.n	8004eae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d00b      	beq.n	8004eae <prvDeleteTCB+0x62>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <prvDeleteTCB+0x5e>
	}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <prvResetNextTaskUnblockTime+0x38>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8004eca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ed0:	e008      	b.n	8004ee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed2:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <prvResetNextTaskUnblockTime+0x38>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4a04      	ldr	r2, [pc, #16]	@ (8004ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8004ee2:	6013      	str	r3, [r2, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	2000100c 	.word	0x2000100c
 8004ef4:	20001074 	.word	0x20001074

08004ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004efe:	4b0b      	ldr	r3, [pc, #44]	@ (8004f2c <xTaskGetSchedulerState+0x34>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f06:	2301      	movs	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	e008      	b.n	8004f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f0c:	4b08      	ldr	r3, [pc, #32]	@ (8004f30 <xTaskGetSchedulerState+0x38>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f14:	2302      	movs	r3, #2
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	e001      	b.n	8004f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f1e:	687b      	ldr	r3, [r7, #4]
	}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20001060 	.word	0x20001060
 8004f30:	2000107c 	.word	0x2000107c

08004f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d058      	beq.n	8004ffc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005008 <xTaskPriorityDisinherit+0xd4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d00b      	beq.n	8004f6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	60fb      	str	r3, [r7, #12]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60bb      	str	r3, [r7, #8]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f90:	1e5a      	subs	r2, r3, #1
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d02c      	beq.n	8004ffc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d128      	bne.n	8004ffc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fc26 	bl	8003800 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <xTaskPriorityDisinherit+0xd8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d903      	bls.n	8004fdc <xTaskPriorityDisinherit+0xa8>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800500c <xTaskPriorityDisinherit+0xd8>)
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <xTaskPriorityDisinherit+0xdc>)
 8004fea:	441a      	add	r2, r3
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fe fba7 	bl	8003746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ffc:	697b      	ldr	r3, [r7, #20]
	}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000b80 	.word	0x20000b80
 800500c:	2000105c 	.word	0x2000105c
 8005010:	20000b84 	.word	0x20000b84

08005014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800501e:	4b21      	ldr	r3, [pc, #132]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005024:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fbe8 	bl	8003800 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d10a      	bne.n	800504e <prvAddCurrentTaskToDelayedList+0x3a>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800503e:	4b1a      	ldr	r3, [pc, #104]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4819      	ldr	r0, [pc, #100]	@ (80050ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005048:	f7fe fb7d 	bl	8003746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800504c:	e026      	b.n	800509c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005056:	4b14      	ldr	r3, [pc, #80]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	429a      	cmp	r2, r3
 8005064:	d209      	bcs.n	800507a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005066:	4b12      	ldr	r3, [pc, #72]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe fb8b 	bl	800378e <vListInsert>
}
 8005078:	e010      	b.n	800509c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800507a:	4b0e      	ldr	r3, [pc, #56]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f7fe fb81 	bl	800378e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d202      	bcs.n	800509c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005096:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6013      	str	r3, [r2, #0]
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20001058 	.word	0x20001058
 80050a8:	20000b80 	.word	0x20000b80
 80050ac:	20001040 	.word	0x20001040
 80050b0:	20001010 	.word	0x20001010
 80050b4:	2000100c 	.word	0x2000100c
 80050b8:	20001074 	.word	0x20001074

080050bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	@ 0x28
 80050c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050c6:	f000 fb13 	bl	80056f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <xTimerCreateTimerTask+0x84>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d021      	beq.n	8005116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050da:	1d3a      	adds	r2, r7, #4
 80050dc:	f107 0108 	add.w	r1, r7, #8
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe fae7 	bl	80036b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	9202      	str	r2, [sp, #8]
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	2302      	movs	r3, #2
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	460a      	mov	r2, r1
 80050fc:	4911      	ldr	r1, [pc, #68]	@ (8005144 <xTimerCreateTimerTask+0x88>)
 80050fe:	4812      	ldr	r0, [pc, #72]	@ (8005148 <xTimerCreateTimerTask+0x8c>)
 8005100:	f7ff f8a2 	bl	8004248 <xTaskCreateStatic>
 8005104:	4603      	mov	r3, r0
 8005106:	4a11      	ldr	r2, [pc, #68]	@ (800514c <xTimerCreateTimerTask+0x90>)
 8005108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800510a:	4b10      	ldr	r3, [pc, #64]	@ (800514c <xTimerCreateTimerTask+0x90>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005134:	697b      	ldr	r3, [r7, #20]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200010b0 	.word	0x200010b0
 8005144:	08006210 	.word	0x08006210
 8005148:	08005289 	.word	0x08005289
 800514c:	200010b4 	.word	0x200010b4

08005150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	@ 0x28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <xTimerGenericCommand+0x30>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	623b      	str	r3, [r7, #32]
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	e7fd      	b.n	800517c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005180:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <xTimerGenericCommand+0x98>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02a      	beq.n	80051de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	dc18      	bgt.n	80051cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800519a:	f7ff fead 	bl	8004ef8 <xTaskGetSchedulerState>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d109      	bne.n	80051b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051a4:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <xTimerGenericCommand+0x98>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	f107 0110 	add.w	r1, r7, #16
 80051ac:	2300      	movs	r3, #0
 80051ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b0:	f7fe fc5a 	bl	8003a68 <xQueueGenericSend>
 80051b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80051b6:	e012      	b.n	80051de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <xTimerGenericCommand+0x98>)
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	f107 0110 	add.w	r1, r7, #16
 80051c0:	2300      	movs	r3, #0
 80051c2:	2200      	movs	r2, #0
 80051c4:	f7fe fc50 	bl	8003a68 <xQueueGenericSend>
 80051c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80051ca:	e008      	b.n	80051de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <xTimerGenericCommand+0x98>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	f107 0110 	add.w	r1, r7, #16
 80051d4:	2300      	movs	r3, #0
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	f7fe fd48 	bl	8003c6c <xQueueGenericSendFromISR>
 80051dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	@ 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200010b0 	.word	0x200010b0

080051ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f6:	4b23      	ldr	r3, [pc, #140]	@ (8005284 <prvProcessExpiredTimer+0x98>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	3304      	adds	r3, #4
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fafb 	bl	8003800 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	699a      	ldr	r2, [r3, #24]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	18d1      	adds	r1, r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f000 f8d5 	bl	80053d4 <prvInsertTimerInActiveList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d020      	beq.n	8005272 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005230:	2300      	movs	r3, #0
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	2300      	movs	r3, #0
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	2100      	movs	r1, #0
 800523a:	6978      	ldr	r0, [r7, #20]
 800523c:	f7ff ff88 	bl	8005150 <xTimerGenericCommand>
 8005240:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d114      	bne.n	8005272 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60fb      	str	r3, [r7, #12]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	4798      	blx	r3
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200010a8 	.word	0x200010a8

08005288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005290:	f107 0308 	add.w	r3, r7, #8
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f859 	bl	800534c <prvGetNextExpireTime>
 800529a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4619      	mov	r1, r3
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f805 	bl	80052b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052a6:	f000 f8d7 	bl	8005458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052aa:	bf00      	nop
 80052ac:	e7f0      	b.n	8005290 <prvTimerTask+0x8>
	...

080052b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052ba:	f7ff fa29 	bl	8004710 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f866 	bl	8005394 <prvSampleTimeNow>
 80052c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d130      	bne.n	8005332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <prvProcessTimerOrBlockTask+0x3c>
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d806      	bhi.n	80052ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052de:	f7ff fa25 	bl	800472c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff81 	bl	80051ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052ea:	e024      	b.n	8005336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052f2:	4b13      	ldr	r3, [pc, #76]	@ (8005340 <prvProcessTimerOrBlockTask+0x90>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <prvProcessTimerOrBlockTask+0x50>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <prvProcessTimerOrBlockTask+0x52>
 8005300:	2300      	movs	r3, #0
 8005302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005304:	4b0f      	ldr	r3, [pc, #60]	@ (8005344 <prvProcessTimerOrBlockTask+0x94>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	f7fe ff65 	bl	80041e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005316:	f7ff fa09 	bl	800472c <xTaskResumeAll>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005320:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <prvProcessTimerOrBlockTask+0x98>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
}
 8005330:	e001      	b.n	8005336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005332:	f7ff f9fb 	bl	800472c <xTaskResumeAll>
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200010ac 	.word	0x200010ac
 8005344:	200010b0 	.word	0x200010b0
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005354:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <prvGetNextExpireTime+0x44>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <prvGetNextExpireTime+0x16>
 800535e:	2201      	movs	r2, #1
 8005360:	e000      	b.n	8005364 <prvGetNextExpireTime+0x18>
 8005362:	2200      	movs	r2, #0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <prvGetNextExpireTime+0x44>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e001      	b.n	8005380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	200010a8 	.word	0x200010a8

08005394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800539c:	f7ff fa64 	bl	8004868 <xTaskGetTickCount>
 80053a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <prvSampleTimeNow+0x3c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d205      	bcs.n	80053b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053ac:	f000 f93a 	bl	8005624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e002      	b.n	80053be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053be:	4a04      	ldr	r2, [pc, #16]	@ (80053d0 <prvSampleTimeNow+0x3c>)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	200010b8 	.word	0x200010b8

080053d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d812      	bhi.n	8005420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	d302      	bcc.n	800540e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e01b      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <prvInsertTimerInActiveList+0x7c>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7fe f9b8 	bl	800378e <vListInsert>
 800541e:	e012      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d206      	bcs.n	8005436 <prvInsertTimerInActiveList+0x62>
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e007      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005436:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <prvInsertTimerInActiveList+0x80>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7fe f9a4 	bl	800378e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005446:	697b      	ldr	r3, [r7, #20]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200010ac 	.word	0x200010ac
 8005454:	200010a8 	.word	0x200010a8

08005458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	@ 0x38
 800545c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800545e:	e0ce      	b.n	80055fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	da19      	bge.n	800549a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	3304      	adds	r3, #4
 800546a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61fb      	str	r3, [r7, #28]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	6850      	ldr	r0, [r2, #4]
 8005492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005494:	6892      	ldr	r2, [r2, #8]
 8005496:	4611      	mov	r1, r2
 8005498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f2c0 80ae 	blt.w	80055fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe f9a4 	bl	8003800 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b8:	463b      	mov	r3, r7
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff ff6a 	bl	8005394 <prvSampleTimeNow>
 80054c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b09      	cmp	r3, #9
 80054c6:	f200 8097 	bhi.w	80055f8 <prvProcessReceivedCommands+0x1a0>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <prvProcessReceivedCommands+0x78>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	080054f9 	.word	0x080054f9
 80054dc:	0800556f 	.word	0x0800556f
 80054e0:	08005583 	.word	0x08005583
 80054e4:	080055cf 	.word	0x080055cf
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	080054f9 	.word	0x080054f9
 80054f0:	0800556f 	.word	0x0800556f
 80054f4:	08005583 	.word	0x08005583
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	18d1      	adds	r1, r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005518:	f7ff ff5c 	bl	80053d4 <prvInsertTimerInActiveList>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d06c      	beq.n	80055fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d061      	beq.n	80055fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	441a      	add	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	2100      	movs	r1, #0
 8005548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800554a:	f7ff fe01 	bl	8005150 <xTimerGenericCommand>
 800554e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d152      	bne.n	80055fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	61bb      	str	r3, [r7, #24]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	b2da      	uxtb	r2, r3
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005580:	e03d      	b.n	80055fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	b2da      	uxtb	r2, r3
 800558e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	617b      	str	r3, [r7, #20]
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	e7fd      	b.n	80055b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	18d1      	adds	r1, r2, r3
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c8:	f7ff ff04 	bl	80053d4 <prvInsertTimerInActiveList>
					break;
 80055cc:	e017      	b.n	80055fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80055dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055de:	f000 fbeb 	bl	8005db8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055e2:	e00c      	b.n	80055fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055f6:	e002      	b.n	80055fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <prvProcessReceivedCommands+0x1a6>
					break;
 80055fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055fe:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <prvProcessReceivedCommands+0x1c8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	1d39      	adds	r1, r7, #4
 8005604:	2200      	movs	r2, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fbce 	bl	8003da8 <xQueueReceive>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	f47f af26 	bne.w	8005460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	3730      	adds	r7, #48	@ 0x30
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200010b0 	.word	0x200010b0

08005624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800562a:	e049      	b.n	80056c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562c:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <prvSwitchTimerLists+0xc4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005636:	4b2c      	ldr	r3, [pc, #176]	@ (80056e8 <prvSwitchTimerLists+0xc4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe f8db 	bl	8003800 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02f      	beq.n	80056c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	429a      	cmp	r2, r3
 8005670:	d90e      	bls.n	8005690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800567e:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <prvSwitchTimerLists+0xc4>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3304      	adds	r3, #4
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7fe f880 	bl	800378e <vListInsert>
 800568e:	e017      	b.n	80056c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005690:	2300      	movs	r3, #0
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	2100      	movs	r1, #0
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff fd58 	bl	8005150 <xTimerGenericCommand>
 80056a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	603b      	str	r3, [r7, #0]
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	e7fd      	b.n	80056bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056c0:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <prvSwitchTimerLists+0xc4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1b0      	bne.n	800562c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <prvSwitchTimerLists+0xc4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056d0:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <prvSwitchTimerLists+0xc8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a04      	ldr	r2, [pc, #16]	@ (80056e8 <prvSwitchTimerLists+0xc4>)
 80056d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056d8:	4a04      	ldr	r2, [pc, #16]	@ (80056ec <prvSwitchTimerLists+0xc8>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200010a8 	.word	0x200010a8
 80056ec:	200010ac 	.word	0x200010ac

080056f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056f6:	f000 f96f 	bl	80059d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056fa:	4b15      	ldr	r3, [pc, #84]	@ (8005750 <prvCheckForValidListAndQueue+0x60>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d120      	bne.n	8005744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005702:	4814      	ldr	r0, [pc, #80]	@ (8005754 <prvCheckForValidListAndQueue+0x64>)
 8005704:	f7fd fff2 	bl	80036ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005708:	4813      	ldr	r0, [pc, #76]	@ (8005758 <prvCheckForValidListAndQueue+0x68>)
 800570a:	f7fd ffef 	bl	80036ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800570e:	4b13      	ldr	r3, [pc, #76]	@ (800575c <prvCheckForValidListAndQueue+0x6c>)
 8005710:	4a10      	ldr	r2, [pc, #64]	@ (8005754 <prvCheckForValidListAndQueue+0x64>)
 8005712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005714:	4b12      	ldr	r3, [pc, #72]	@ (8005760 <prvCheckForValidListAndQueue+0x70>)
 8005716:	4a10      	ldr	r2, [pc, #64]	@ (8005758 <prvCheckForValidListAndQueue+0x68>)
 8005718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <prvCheckForValidListAndQueue+0x74>)
 8005720:	4a11      	ldr	r2, [pc, #68]	@ (8005768 <prvCheckForValidListAndQueue+0x78>)
 8005722:	2110      	movs	r1, #16
 8005724:	200a      	movs	r0, #10
 8005726:	f7fe f8ff 	bl	8003928 <xQueueGenericCreateStatic>
 800572a:	4603      	mov	r3, r0
 800572c:	4a08      	ldr	r2, [pc, #32]	@ (8005750 <prvCheckForValidListAndQueue+0x60>)
 800572e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005730:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <prvCheckForValidListAndQueue+0x60>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <prvCheckForValidListAndQueue+0x60>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	490b      	ldr	r1, [pc, #44]	@ (800576c <prvCheckForValidListAndQueue+0x7c>)
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fd24 	bl	800418c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005744:	f000 f97a 	bl	8005a3c <vPortExitCritical>
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	200010b0 	.word	0x200010b0
 8005754:	20001080 	.word	0x20001080
 8005758:	20001094 	.word	0x20001094
 800575c:	200010a8 	.word	0x200010a8
 8005760:	200010ac 	.word	0x200010ac
 8005764:	2000115c 	.word	0x2000115c
 8005768:	200010bc 	.word	0x200010bc
 800576c:	08006218 	.word	0x08006218

08005770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3b04      	subs	r3, #4
 8005780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b04      	subs	r3, #4
 800578e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b04      	subs	r3, #4
 800579e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057a0:	4a0c      	ldr	r2, [pc, #48]	@ (80057d4 <pxPortInitialiseStack+0x64>)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b14      	subs	r3, #20
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b04      	subs	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f06f 0202 	mvn.w	r2, #2
 80057be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b20      	subs	r3, #32
 80057c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	080057d9 	.word	0x080057d9

080057d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057e2:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <prvTaskExitError+0x58>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d00b      	beq.n	8005804 <prvTaskExitError+0x2c>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	60fb      	str	r3, [r7, #12]
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <prvTaskExitError+0x28>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60bb      	str	r3, [r7, #8]
}
 8005816:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005818:	bf00      	nop
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0fc      	beq.n	800581a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c
	...

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	4770      	bx	lr
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst2>:
 8005860:	20000b80 	.word	0x20000b80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005868:	4808      	ldr	r0, [pc, #32]	@ (800588c <prvPortStartFirstTask+0x24>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8814 	msr	CONTROL, r0
 800587a:	b662      	cpsie	i
 800587c:	b661      	cpsie	f
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	df00      	svc	0
 8005888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800588a:	bf00      	nop
 800588c:	e000ed08 	.word	0xe000ed08

08005890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005896:	4b47      	ldr	r3, [pc, #284]	@ (80059b4 <xPortStartScheduler+0x124>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a47      	ldr	r2, [pc, #284]	@ (80059b8 <xPortStartScheduler+0x128>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10b      	bne.n	80058b8 <xPortStartScheduler+0x28>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058b8:	4b3e      	ldr	r3, [pc, #248]	@ (80059b4 <xPortStartScheduler+0x124>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a3f      	ldr	r2, [pc, #252]	@ (80059bc <xPortStartScheduler+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10b      	bne.n	80058da <xPortStartScheduler+0x4a>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	613b      	str	r3, [r7, #16]
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058da:	4b39      	ldr	r3, [pc, #228]	@ (80059c0 <xPortStartScheduler+0x130>)
 80058dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	22ff      	movs	r2, #255	@ 0xff
 80058ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <xPortStartScheduler+0x134>)
 8005900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005902:	4b31      	ldr	r3, [pc, #196]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005908:	e009      	b.n	800591e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800590a:	4b2f      	ldr	r3, [pc, #188]	@ (80059c8 <xPortStartScheduler+0x138>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	4a2d      	ldr	r2, [pc, #180]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b80      	cmp	r3, #128	@ 0x80
 8005928:	d0ef      	beq.n	800590a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800592a:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <xPortStartScheduler+0x138>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1c3 0307 	rsb	r3, r3, #7
 8005932:	2b04      	cmp	r3, #4
 8005934:	d00b      	beq.n	800594e <xPortStartScheduler+0xbe>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60bb      	str	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800594e:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	4a1c      	ldr	r2, [pc, #112]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005958:	4b1b      	ldr	r3, [pc, #108]	@ (80059c8 <xPortStartScheduler+0x138>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005960:	4a19      	ldr	r2, [pc, #100]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800596c:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <xPortStartScheduler+0x13c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <xPortStartScheduler+0x13c>)
 8005972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <xPortStartScheduler+0x13c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a13      	ldr	r2, [pc, #76]	@ (80059cc <xPortStartScheduler+0x13c>)
 800597e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005984:	f000 f8da 	bl	8005b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <xPortStartScheduler+0x140>)
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800598e:	f000 f8f9 	bl	8005b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005992:	4b10      	ldr	r3, [pc, #64]	@ (80059d4 <xPortStartScheduler+0x144>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a0f      	ldr	r2, [pc, #60]	@ (80059d4 <xPortStartScheduler+0x144>)
 8005998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800599e:	f7ff ff63 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059a2:	f7ff f82b 	bl	80049fc <vTaskSwitchContext>
	prvTaskExitError();
 80059a6:	f7ff ff17 	bl	80057d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	e000ed00 	.word	0xe000ed00
 80059b8:	410fc271 	.word	0x410fc271
 80059bc:	410fc270 	.word	0x410fc270
 80059c0:	e000e400 	.word	0xe000e400
 80059c4:	200011ac 	.word	0x200011ac
 80059c8:	200011b0 	.word	0x200011b0
 80059cc:	e000ed20 	.word	0xe000ed20
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	e000ef34 	.word	0xe000ef34

080059d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059f2:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <vPortEnterCritical+0x5c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005a34 <vPortEnterCritical+0x5c>)
 80059fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <vPortEnterCritical+0x5c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d110      	bne.n	8005a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <vPortEnterCritical+0x60>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	603b      	str	r3, [r7, #0]
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <vPortEnterCritical+0x4a>
	}
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	2000000c 	.word	0x2000000c
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <vPortExitCritical+0x26>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	607b      	str	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a62:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	4a08      	ldr	r2, [pc, #32]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <vPortExitCritical+0x44>
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f383 8811 	msr	BASEPRI, r3
}
 8005a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a90:	f3ef 8009 	mrs	r0, PSP
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4b15      	ldr	r3, [pc, #84]	@ (8005af0 <pxCurrentTCBConst>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f01e 0f10 	tst.w	lr, #16
 8005aa0:	bf08      	it	eq
 8005aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ab4:	f380 8811 	msr	BASEPRI, r0
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f7fe ff9c 	bl	80049fc <vTaskSwitchContext>
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f380 8811 	msr	BASEPRI, r0
 8005acc:	bc09      	pop	{r0, r3}
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	6808      	ldr	r0, [r1, #0]
 8005ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad6:	f01e 0f10 	tst.w	lr, #16
 8005ada:	bf08      	it	eq
 8005adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ae0:	f380 8809 	msr	PSP, r0
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst>:
 8005af0:	20000b80 	.word	0x20000b80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b12:	f7fe feb9 	bl	8004888 <xTaskIncrementTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <xPortSysTickHandler+0x40>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <vPortSetupTimerInterrupt+0x38>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <vPortSetupTimerInterrupt+0x3c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0a      	ldr	r2, [pc, #40]	@ (8005b7c <vPortSetupTimerInterrupt+0x40>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	4a09      	ldr	r2, [pc, #36]	@ (8005b80 <vPortSetupTimerInterrupt+0x44>)
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b5e:	4b04      	ldr	r3, [pc, #16]	@ (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	e000e010 	.word	0xe000e010
 8005b74:	e000e018 	.word	0xe000e018
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	10624dd3 	.word	0x10624dd3
 8005b80:	e000e014 	.word	0xe000e014

08005b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b94 <vPortEnableVFP+0x10>
 8005b88:	6801      	ldr	r1, [r0, #0]
 8005b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b8e:	6001      	str	r1, [r0, #0]
 8005b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b92:	bf00      	nop
 8005b94:	e000ed88 	.word	0xe000ed88

08005b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
 8005ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b0f      	cmp	r3, #15
 8005ba8:	d915      	bls.n	8005bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005baa:	4a18      	ldr	r2, [pc, #96]	@ (8005c0c <vPortValidateInterruptPriority+0x74>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bb4:	4b16      	ldr	r3, [pc, #88]	@ (8005c10 <vPortValidateInterruptPriority+0x78>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	7afa      	ldrb	r2, [r7, #11]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d20b      	bcs.n	8005bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <vPortValidateInterruptPriority+0x7c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bde:	4b0e      	ldr	r3, [pc, #56]	@ (8005c18 <vPortValidateInterruptPriority+0x80>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d90b      	bls.n	8005bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	603b      	str	r3, [r7, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vPortValidateInterruptPriority+0x62>
	}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	e000e3f0 	.word	0xe000e3f0
 8005c10:	200011ac 	.word	0x200011ac
 8005c14:	e000ed0c 	.word	0xe000ed0c
 8005c18:	200011b0 	.word	0x200011b0

08005c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	@ 0x28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c28:	f7fe fd72 	bl	8004710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005da0 <pvPortMalloc+0x184>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c34:	f000 f924 	bl	8005e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c38:	4b5a      	ldr	r3, [pc, #360]	@ (8005da4 <pvPortMalloc+0x188>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8095 	bne.w	8005d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01e      	beq.n	8005c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d015      	beq.n	8005c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	3308      	adds	r3, #8
 8005c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <pvPortMalloc+0x6e>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	617b      	str	r3, [r7, #20]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d06f      	beq.n	8005d70 <pvPortMalloc+0x154>
 8005c90:	4b45      	ldr	r3, [pc, #276]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d86a      	bhi.n	8005d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c9a:	4b44      	ldr	r3, [pc, #272]	@ (8005dac <pvPortMalloc+0x190>)
 8005c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c9e:	4b43      	ldr	r3, [pc, #268]	@ (8005dac <pvPortMalloc+0x190>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ca4:	e004      	b.n	8005cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <pvPortMalloc+0xa6>
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f1      	bne.n	8005ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cc2:	4b37      	ldr	r3, [pc, #220]	@ (8005da0 <pvPortMalloc+0x184>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d051      	beq.n	8005d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d920      	bls.n	8005d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <pvPortMalloc+0xfc>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d2a:	69b8      	ldr	r0, [r7, #24]
 8005d2c:	f000 f90a 	bl	8005f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <pvPortMalloc+0x194>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d203      	bcs.n	8005d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d4a:	4b17      	ldr	r3, [pc, #92]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <pvPortMalloc+0x194>)
 8005d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <pvPortMalloc+0x188>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d66:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <pvPortMalloc+0x198>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4a11      	ldr	r2, [pc, #68]	@ (8005db4 <pvPortMalloc+0x198>)
 8005d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d70:	f7fe fcdc 	bl	800472c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <pvPortMalloc+0x17a>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60fb      	str	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <pvPortMalloc+0x176>
	return pvReturn;
 8005d96:	69fb      	ldr	r3, [r7, #28]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3728      	adds	r7, #40	@ 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20005fdc 	.word	0x20005fdc
 8005da4:	20005ff0 	.word	0x20005ff0
 8005da8:	20005fe0 	.word	0x20005fe0
 8005dac:	20005fd4 	.word	0x20005fd4
 8005db0:	20005fe4 	.word	0x20005fe4
 8005db4:	20005fe8 	.word	0x20005fe8

08005db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d04f      	beq.n	8005e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dca:	2308      	movs	r3, #8
 8005dcc:	425b      	negs	r3, r3
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <vPortFree+0xbc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <vPortFree+0x46>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60fb      	str	r3, [r7, #12]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <vPortFree+0x66>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <vPortFree+0xbc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01e      	beq.n	8005e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11a      	bne.n	8005e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <vPortFree+0xbc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	401a      	ands	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e44:	f7fe fc64 	bl	8004710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <vPortFree+0xc0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <vPortFree+0xc0>)
 8005e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e56:	6938      	ldr	r0, [r7, #16]
 8005e58:	f000 f874 	bl	8005f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e5c:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <vPortFree+0xc4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	4a06      	ldr	r2, [pc, #24]	@ (8005e7c <vPortFree+0xc4>)
 8005e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e66:	f7fe fc61 	bl	800472c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e6a:	bf00      	nop
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20005ff0 	.word	0x20005ff0
 8005e78:	20005fe0 	.word	0x20005fe0
 8005e7c:	20005fec 	.word	0x20005fec

08005e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e86:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e8c:	4b27      	ldr	r3, [pc, #156]	@ (8005f2c <prvHeapInit+0xac>)
 8005e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3307      	adds	r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0307 	bic.w	r3, r3, #7
 8005ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	4a1f      	ldr	r2, [pc, #124]	@ (8005f2c <prvHeapInit+0xac>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <prvHeapInit+0xb0>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <prvHeapInit+0xb0>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	4413      	add	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ecc:	2208      	movs	r2, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <prvHeapInit+0xb4>)
 8005ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee2:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <prvHeapInit+0xb4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eea:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <prvHeapInit+0xb4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	1ad2      	subs	r2, r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f00:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <prvHeapInit+0xb4>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <prvHeapInit+0xb8>)
 8005f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a09      	ldr	r2, [pc, #36]	@ (8005f3c <prvHeapInit+0xbc>)
 8005f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f18:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <prvHeapInit+0xc0>)
 8005f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f1e:	601a      	str	r2, [r3, #0]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	200011b4 	.word	0x200011b4
 8005f30:	20005fd4 	.word	0x20005fd4
 8005f34:	20005fdc 	.word	0x20005fdc
 8005f38:	20005fe4 	.word	0x20005fe4
 8005f3c:	20005fe0 	.word	0x20005fe0
 8005f40:	20005ff0 	.word	0x20005ff0

08005f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <prvInsertBlockIntoFreeList+0xac>)
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e002      	b.n	8005f58 <prvInsertBlockIntoFreeList+0x14>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d8f7      	bhi.n	8005f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d108      	bne.n	8005f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	441a      	add	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d118      	bne.n	8005fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b15      	ldr	r3, [pc, #84]	@ (8005ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d00d      	beq.n	8005fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e008      	b.n	8005fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e003      	b.n	8005fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d002      	beq.n	8005fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20005fd4 	.word	0x20005fd4
 8005ff4:	20005fdc 	.word	0x20005fdc

08005ff8 <memset>:
 8005ff8:	4402      	add	r2, r0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d100      	bne.n	8006002 <memset+0xa>
 8006000:	4770      	bx	lr
 8006002:	f803 1b01 	strb.w	r1, [r3], #1
 8006006:	e7f9      	b.n	8005ffc <memset+0x4>

08006008 <_reclaim_reent>:
 8006008:	4b2d      	ldr	r3, [pc, #180]	@ (80060c0 <_reclaim_reent+0xb8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4283      	cmp	r3, r0
 800600e:	b570      	push	{r4, r5, r6, lr}
 8006010:	4604      	mov	r4, r0
 8006012:	d053      	beq.n	80060bc <_reclaim_reent+0xb4>
 8006014:	69c3      	ldr	r3, [r0, #28]
 8006016:	b31b      	cbz	r3, 8006060 <_reclaim_reent+0x58>
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	b163      	cbz	r3, 8006036 <_reclaim_reent+0x2e>
 800601c:	2500      	movs	r5, #0
 800601e:	69e3      	ldr	r3, [r4, #28]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	5959      	ldr	r1, [r3, r5]
 8006024:	b9b1      	cbnz	r1, 8006054 <_reclaim_reent+0x4c>
 8006026:	3504      	adds	r5, #4
 8006028:	2d80      	cmp	r5, #128	@ 0x80
 800602a:	d1f8      	bne.n	800601e <_reclaim_reent+0x16>
 800602c:	69e3      	ldr	r3, [r4, #28]
 800602e:	4620      	mov	r0, r4
 8006030:	68d9      	ldr	r1, [r3, #12]
 8006032:	f000 f87b 	bl	800612c <_free_r>
 8006036:	69e3      	ldr	r3, [r4, #28]
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	b111      	cbz	r1, 8006042 <_reclaim_reent+0x3a>
 800603c:	4620      	mov	r0, r4
 800603e:	f000 f875 	bl	800612c <_free_r>
 8006042:	69e3      	ldr	r3, [r4, #28]
 8006044:	689d      	ldr	r5, [r3, #8]
 8006046:	b15d      	cbz	r5, 8006060 <_reclaim_reent+0x58>
 8006048:	4629      	mov	r1, r5
 800604a:	4620      	mov	r0, r4
 800604c:	682d      	ldr	r5, [r5, #0]
 800604e:	f000 f86d 	bl	800612c <_free_r>
 8006052:	e7f8      	b.n	8006046 <_reclaim_reent+0x3e>
 8006054:	680e      	ldr	r6, [r1, #0]
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f868 	bl	800612c <_free_r>
 800605c:	4631      	mov	r1, r6
 800605e:	e7e1      	b.n	8006024 <_reclaim_reent+0x1c>
 8006060:	6961      	ldr	r1, [r4, #20]
 8006062:	b111      	cbz	r1, 800606a <_reclaim_reent+0x62>
 8006064:	4620      	mov	r0, r4
 8006066:	f000 f861 	bl	800612c <_free_r>
 800606a:	69e1      	ldr	r1, [r4, #28]
 800606c:	b111      	cbz	r1, 8006074 <_reclaim_reent+0x6c>
 800606e:	4620      	mov	r0, r4
 8006070:	f000 f85c 	bl	800612c <_free_r>
 8006074:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006076:	b111      	cbz	r1, 800607e <_reclaim_reent+0x76>
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f857 	bl	800612c <_free_r>
 800607e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006080:	b111      	cbz	r1, 8006088 <_reclaim_reent+0x80>
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f852 	bl	800612c <_free_r>
 8006088:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800608a:	b111      	cbz	r1, 8006092 <_reclaim_reent+0x8a>
 800608c:	4620      	mov	r0, r4
 800608e:	f000 f84d 	bl	800612c <_free_r>
 8006092:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006094:	b111      	cbz	r1, 800609c <_reclaim_reent+0x94>
 8006096:	4620      	mov	r0, r4
 8006098:	f000 f848 	bl	800612c <_free_r>
 800609c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800609e:	b111      	cbz	r1, 80060a6 <_reclaim_reent+0x9e>
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f843 	bl	800612c <_free_r>
 80060a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060a8:	b111      	cbz	r1, 80060b0 <_reclaim_reent+0xa8>
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f83e 	bl	800612c <_free_r>
 80060b0:	6a23      	ldr	r3, [r4, #32]
 80060b2:	b11b      	cbz	r3, 80060bc <_reclaim_reent+0xb4>
 80060b4:	4620      	mov	r0, r4
 80060b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060ba:	4718      	bx	r3
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	bf00      	nop
 80060c0:	20000010 	.word	0x20000010

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	@ (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006108 <__libc_init_array+0x44>)
 80060d8:	f000 f87e 	bl	80061d8 <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
 80060fc:	08006290 	.word	0x08006290
 8006100:	08006290 	.word	0x08006290
 8006104:	08006290 	.word	0x08006290
 8006108:	08006294 	.word	0x08006294

0800610c <__retarget_lock_acquire_recursive>:
 800610c:	4770      	bx	lr

0800610e <__retarget_lock_release_recursive>:
 800610e:	4770      	bx	lr

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006126:	4291      	cmp	r1, r2
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <_free_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4605      	mov	r5, r0
 8006130:	2900      	cmp	r1, #0
 8006132:	d041      	beq.n	80061b8 <_free_r+0x8c>
 8006134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006138:	1f0c      	subs	r4, r1, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	bfb8      	it	lt
 800613e:	18e4      	addlt	r4, r4, r3
 8006140:	f000 f83e 	bl	80061c0 <__malloc_lock>
 8006144:	4a1d      	ldr	r2, [pc, #116]	@ (80061bc <_free_r+0x90>)
 8006146:	6813      	ldr	r3, [r2, #0]
 8006148:	b933      	cbnz	r3, 8006158 <_free_r+0x2c>
 800614a:	6063      	str	r3, [r4, #4]
 800614c:	6014      	str	r4, [r2, #0]
 800614e:	4628      	mov	r0, r5
 8006150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006154:	f000 b83a 	b.w	80061cc <__malloc_unlock>
 8006158:	42a3      	cmp	r3, r4
 800615a:	d908      	bls.n	800616e <_free_r+0x42>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	1821      	adds	r1, r4, r0
 8006160:	428b      	cmp	r3, r1
 8006162:	bf01      	itttt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	1809      	addeq	r1, r1, r0
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	e7ed      	b.n	800614a <_free_r+0x1e>
 800616e:	461a      	mov	r2, r3
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b10b      	cbz	r3, 8006178 <_free_r+0x4c>
 8006174:	42a3      	cmp	r3, r4
 8006176:	d9fa      	bls.n	800616e <_free_r+0x42>
 8006178:	6811      	ldr	r1, [r2, #0]
 800617a:	1850      	adds	r0, r2, r1
 800617c:	42a0      	cmp	r0, r4
 800617e:	d10b      	bne.n	8006198 <_free_r+0x6c>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	4401      	add	r1, r0
 8006184:	1850      	adds	r0, r2, r1
 8006186:	4283      	cmp	r3, r0
 8006188:	6011      	str	r1, [r2, #0]
 800618a:	d1e0      	bne.n	800614e <_free_r+0x22>
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	6053      	str	r3, [r2, #4]
 8006192:	4408      	add	r0, r1
 8006194:	6010      	str	r0, [r2, #0]
 8006196:	e7da      	b.n	800614e <_free_r+0x22>
 8006198:	d902      	bls.n	80061a0 <_free_r+0x74>
 800619a:	230c      	movs	r3, #12
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	e7d6      	b.n	800614e <_free_r+0x22>
 80061a0:	6820      	ldr	r0, [r4, #0]
 80061a2:	1821      	adds	r1, r4, r0
 80061a4:	428b      	cmp	r3, r1
 80061a6:	bf04      	itt	eq
 80061a8:	6819      	ldreq	r1, [r3, #0]
 80061aa:	685b      	ldreq	r3, [r3, #4]
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	bf04      	itt	eq
 80061b0:	1809      	addeq	r1, r1, r0
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	6054      	str	r4, [r2, #4]
 80061b6:	e7ca      	b.n	800614e <_free_r+0x22>
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	bf00      	nop
 80061bc:	20006130 	.word	0x20006130

080061c0 <__malloc_lock>:
 80061c0:	4801      	ldr	r0, [pc, #4]	@ (80061c8 <__malloc_lock+0x8>)
 80061c2:	f7ff bfa3 	b.w	800610c <__retarget_lock_acquire_recursive>
 80061c6:	bf00      	nop
 80061c8:	2000612c 	.word	0x2000612c

080061cc <__malloc_unlock>:
 80061cc:	4801      	ldr	r0, [pc, #4]	@ (80061d4 <__malloc_unlock+0x8>)
 80061ce:	f7ff bf9e 	b.w	800610e <__retarget_lock_release_recursive>
 80061d2:	bf00      	nop
 80061d4:	2000612c 	.word	0x2000612c

080061d8 <_init>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr

080061e4 <_fini>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr
