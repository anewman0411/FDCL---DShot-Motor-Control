
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092ac  080092ac  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080092ac  080092ac  0000a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b4  080092b4  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b4  080092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092b8  080092b8  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080092bc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00005ff8  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006064  20006064  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019946  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036fe  00000000  00000000  000249e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  000280e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d5  00000000  00000000  00029690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043c9  00000000  00000000  0002a765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001764e  00000000  00000000  0002eb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0bf  00000000  00000000  0004617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011323b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063a8  00000000  00000000  00113280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00119628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800911c 	.word	0x0800911c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800911c 	.word	0x0800911c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ff5a 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f844 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f98e 	bl	80008d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 f956 	bl	800086c <MX_DMA_Init>
  MX_TIM5_Init();
 80005c0:	f000 f8a8 	bl	8000714 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80005c4:	f000 f928 	bl	8000818 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_USART1_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f004 fd88 	bl	80050e0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, SERIAL_QUEUE_ITEM_SIZE, NULL);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	200a      	movs	r0, #10
 80005d6:	f004 fe7a 	bl	80052ce <osMessageQueueNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x6c>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <main+0x70>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	480e      	ldr	r0, [pc, #56]	@ (8000620 <main+0x74>)
 80005e6:	f004 fdc5 	bl	8005174 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <main+0x78>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <main+0x7c>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <main+0x80>)
 80005f6:	f004 fdbd 	bl	8005174 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <main+0x84>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <main+0x88>)
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x8c>)
 8000606:	f004 fdb5 	bl	8005174 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <main+0x90>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 fd8a 	bl	8005128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x68>
 8000618:	200002bc 	.word	0x200002bc
 800061c:	080091ec 	.word	0x080091ec
 8000620:	08000cfd 	.word	0x08000cfd
 8000624:	20000220 	.word	0x20000220
 8000628:	08009210 	.word	0x08009210
 800062c:	08000d0d 	.word	0x08000d0d
 8000630:	20000224 	.word	0x20000224
 8000634:	08009234 	.word	0x08009234
 8000638:	08000d89 	.word	0x08000d89
 800063c:	20000228 	.word	0x20000228

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 ff10 	bl	8008474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	@ 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fd91 	bl	80021ec <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 fb9a 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fff2 	bl	80026dc <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 fb83 	bl	8000e08 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_TIM5_Init+0xac>)
 800073a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 70;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800074a:	2246      	movs	r2, #70	@ 0x46
 800074c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800075a:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800075c:	f002 fa9a 	bl	8002c94 <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000766:	f000 fb4f 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4619      	mov	r1, r3
 8000778:	4810      	ldr	r0, [pc, #64]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800077a:	f003 f9d5 	bl	8003b28 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 fb40 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000788:	2360      	movs	r3, #96	@ 0x60
 800078a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007a0:	f002 fd80 	bl	80032a4 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fb2d 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007b0:	f000 fbb8 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	@ 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000088 	.word	0x20000088
 80007c0:	40000c00 	.word	0x40000c00

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007ca:	4a11      	ldr	r2, [pc, #68]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007d0:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_USART1_UART_Init+0x50>)
 80007d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007e8:	220c      	movs	r2, #12
 80007ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007fa:	f003 fa25 	bl	8003c48 <HAL_UART_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000804:	f000 fb00 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000130 	.word	0x20000130
 8000810:	40011000 	.word	0x40011000
 8000814:	000f4240 	.word	0x000f4240

08000818 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART6_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800083e:	2208      	movs	r2, #8
 8000840:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000850:	f003 f9fa 	bl	8003c48 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 fad5 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000178 	.word	0x20000178
 8000868:	40011400 	.word	0x40011400

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <MX_DMA_Init+0x68>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_DMA_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	200d      	movs	r0, #13
 80008b0:	f000 fed4 	bl	800165c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008b4:	200d      	movs	r0, #13
 80008b6:	f000 feed 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	203a      	movs	r0, #58	@ 0x3a
 80008c0:	f000 fecc 	bl	800165c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008c4:	203a      	movs	r0, #58	@ 0x3a
 80008c6:	f000 fee5 	bl	8001694 <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <MX_GPIO_Init+0xb0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <MX_GPIO_Init+0xb0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_GPIO_Init+0xb0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_GPIO_Init+0xb0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_GPIO_Init+0xb0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a1a      	ldr	r2, [pc, #104]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_GPIO_Init+0xb0>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1_RX
 800096e:	2307      	movs	r3, #7
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_GPIO_Init+0xb4>)
 800097a:	f001 fa9b 	bl	8001eb4 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	@ 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <prepare_bdshot_buffer>:

/* USER CODE BEGIN 4 */
void prepare_bdshot_buffer(uint16_t frame)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

    // 1️⃣ Insert a dummy 0 at the start to absorb the DMA skip
    //dshot_buffer[buffer_index++] = 0;  // Dummy preload entry

    // 2️⃣ Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 800099e:	230f      	movs	r3, #15
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	e02a      	b.n	80009fa <prepare_bdshot_buffer+0x6a>
    {
        uint8_t bit = (frame >> i) & 0x01;
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa42 f303 	asr.w	r3, r2, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
        if (bit)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00e      	beq.n	80009d8 <prepare_bdshot_buffer+0x48>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009c2:	2169      	movs	r1, #105	@ 0x69
 80009c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	617a      	str	r2, [r7, #20]
 80009ce:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009d6:	e00d      	b.n	80009f4 <prepare_bdshot_buffer+0x64>
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	617a      	str	r2, [r7, #20]
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009e0:	2134      	movs	r1, #52	@ 0x34
 80009e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	617a      	str	r2, [r7, #20]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	dad1      	bge.n	80009a4 <prepare_bdshot_buffer+0x14>
        }
    }

    // 3️⃣ Final low pulses (as before)
    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	617a      	str	r2, [r7, #20]
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    dshot_buffer[buffer_index++] = 0;  // Extra delay
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	617a      	str	r2, [r7, #20]
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a1c:	bf00      	nop
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	2000022c 	.word	0x2000022c

08000a2c <bdshot_crc>:

// Generate CRC (same as spec)
uint16_t bdshot_crc(uint16_t value) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
    uint16_t crc = value ^ (value >> 4) ^ (value >> 8);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	4053      	eors	r3, r2
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	4053      	eors	r3, r2
 8000a4a:	81fb      	strh	r3, [r7, #14]
    crc = ~crc; // Invert bits
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	81fb      	strh	r3, [r7, #14]
    return crc & 0x0F; // Mask to 4 bits
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	b29b      	uxth	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	460a      	mov	r2, r1
 8000a70:	80fb      	strh	r3, [r7, #6]
 8000a72:	4613      	mov	r3, r2
 8000a74:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	e01b      	b.n	8000ab8 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a86:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 8000a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffc5 	bl	8000a2c <bdshot_crc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8000aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	b29b      	uxth	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460a      	mov	r2, r1
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4613      	mov	r3, r2
 8000ace:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8000ad0:	797a      	ldrb	r2, [r7, #5]
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ffc5 	bl	8000a66 <make_bdshot_frame>
 8000adc:	4603      	mov	r3, r0
 8000ade:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame);
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff54 	bl	8000990 <prepare_bdshot_buffer>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <send_bdshot>:

void send_bdshot(uint32_t channel){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000af8:	2322      	movs	r3, #34	@ 0x22
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <send_bdshot+0x34>)
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <send_bdshot+0x38>)
 8000b00:	f002 f918 	bl	8002d34 <HAL_TIM_PWM_Start_DMA>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <send_bdshot+0x24>
    {
        Error_Handler();
 8000b0a:	f000 f97d 	bl	8000e08 <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8000b0e:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <send_bdshot+0x3c>)
 8000b10:	f007 fb9a 	bl	8008248 <puts>
    }
    //printf("%d\r\n",dshot_buffer);
    dshot_running = 1;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <send_bdshot+0x40>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000022c 	.word	0x2000022c
 8000b28:	20000088 	.word	0x20000088
 8000b2c:	08009158 	.word	0x08009158
 8000b30:	200002b4 	.word	0x200002b4

08000b34 <check_bdshot_crc>:

bool check_bdshot_crc(uint16_t telemetry_frame)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
    // Extract data (12 bits)
    uint16_t data = telemetry_frame >> 4;
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	81fb      	strh	r3, [r7, #14]

    // Extract received CRC (4 bits)
    uint8_t received_crc = telemetry_frame & 0x0F;
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	737b      	strb	r3, [r7, #13]

    // Calculate CRC
    uint8_t crc = data ^ (data >> 4) ^ (data >> 8);
 8000b4e:	89fb      	ldrh	r3, [r7, #14]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4053      	eors	r3, r2
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4053      	eors	r3, r2
 8000b68:	733b      	strb	r3, [r7, #12]
    crc = ~crc & 0x0F;
 8000b6a:	7b3b      	ldrb	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	733b      	strb	r3, [r7, #12]

    // Check if CRC matches
    return (crc == received_crc);
 8000b76:	7b3a      	ldrb	r2, [r7, #12]
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <decode_eRPM>:

uint32_t decode_eRPM(uint16_t telemetry_frame)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
	if (!check_bdshot_crc(telemetry_frame)){
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ffc9 	bl	8000b34 <check_bdshot_crc>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f083 0301 	eor.w	r3, r3, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <decode_eRPM+0x24>
		return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e01c      	b.n	8000bee <decode_eRPM+0x5e>
	}
    // Extract fields
    uint8_t exponent = (telemetry_frame >> 12) & 0x07; // 3-bit shift amount
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	0b1b      	lsrs	r3, r3, #12
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	75fb      	strb	r3, [r7, #23]
    uint16_t mantissa = (telemetry_frame >> 4) & 0x1FF; // 9-bit period base
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	091b      	lsrs	r3, r3, #4
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bcc:	82bb      	strh	r3, [r7, #20]

    // Calculate period in microseconds
    uint32_t period_us = mantissa << exponent;
 8000bce:	8aba      	ldrh	r2, [r7, #20]
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	613b      	str	r3, [r7, #16]

    // Avoid divide by zero
    if (period_us == 0)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <decode_eRPM+0x52>
        return 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e005      	b.n	8000bee <decode_eRPM+0x5e>

    // Calculate eRPM: eRPM = (1_000_000 * 60) / period
    uint32_t erpm = (60000000UL) / period_us;
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <decode_eRPM+0x68>)
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	60fb      	str	r3, [r7, #12]

    return erpm;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	03938700 	.word	0x03938700

08000bfc <_write>:
	return ticks;
}
*/

int _write(int file, char *ptr, int len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a4      	sub	sp, #144	@ 0x90
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c0c:	dd01      	ble.n	8000c12 <_write+0x16>
 8000c0e:	237f      	movs	r3, #127	@ 0x7f
 8000c10:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 fd03 	bl	8008626 <memcpy>
    msg[len] = '\0'; // Null-terminate
 8000c20:	f107 0210 	add.w	r2, r7, #16
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <_write+0x4c>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f107 0110 	add.w	r1, r7, #16
 8000c34:	2300      	movs	r3, #0
 8000c36:	2200      	movs	r2, #0
 8000c38:	f004 fbbc 	bl	80053b4 <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3790      	adds	r7, #144	@ 0x90
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002bc 	.word	0x200002bc

08000c4c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim5, TIM_CHANNEL_1);

    //HAL_UART_Receive_DMA(&huart6, telemetry_buffer, 2);

    // Optionally set a flag
    dshot_running = 0;
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200002b4 	.word	0x200002b4

08000c6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a4      	sub	sp, #144	@ 0x90
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x78>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12e      	bne.n	8000cdc <HAL_UART_RxCpltCallback+0x70>
    {
    	printf("UART CALLBACK\r\n");
 8000c7e:	481a      	ldr	r0, [pc, #104]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x7c>)
 8000c80:	f007 fae2 	bl	8008248 <puts>

        uint16_t telemetry_frame = (telemetry_buffer[0] << 8) | telemetry_buffer[1];
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <HAL_UART_RxCpltCallback+0x80>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <HAL_UART_RxCpltCallback+0x80>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        uint32_t rpm = decode_eRPM(telemetry_frame);
 8000c9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff75 	bl	8000b90 <decode_eRPM>
 8000ca6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

        if (rpm > 0)
 8000caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00f      	beq.n	8000cd2 <HAL_UART_RxCpltCallback+0x66>
        {
            char rpm_msg[SERIAL_QUEUE_ITEM_SIZE];
            snprintf(rpm_msg, sizeof(rpm_msg), "Telemetry RPM: %lu\n", rpm);
 8000cb2:	f107 0008 	add.w	r0, r7, #8
 8000cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cba:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x84>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	f007 facb 	bl	8008258 <sniprintf>
            osMessageQueuePut(serialQueueHandle, rpm_msg, 0, 0);
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_UART_RxCpltCallback+0x88>)
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	f107 0108 	add.w	r1, r7, #8
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f004 fb71 	bl	80053b4 <osMessageQueuePut>
        }

        // Re-arm DMA reception for the next telemetry frame
        HAL_UART_Receive_DMA(&huart1, telemetry_buffer, 2);
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	4905      	ldr	r1, [pc, #20]	@ (8000cec <HAL_UART_RxCpltCallback+0x80>)
 8000cd6:	4808      	ldr	r0, [pc, #32]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x8c>)
 8000cd8:	f003 f891 	bl	8003dfe <HAL_UART_Receive_DMA>
    }
}
 8000cdc:	bf00      	nop
 8000cde:	3790      	adds	r7, #144	@ 0x90
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	08009170 	.word	0x08009170
 8000cec:	200002b8 	.word	0x200002b8
 8000cf0:	08009180 	.word	0x08009180
 8000cf4:	200002bc 	.word	0x200002bc
 8000cf8:	20000130 	.word	0x20000130

08000cfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f004 fac7 	bl	8005298 <osDelay>
 8000d0a:	e7fb      	b.n	8000d04 <StartDefaultTask+0x8>

08000d0c <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8000d14:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <DShotTask+0x6c>)
 8000d16:	f007 fa97 	bl	8008248 <puts>

    // Step 1: Send ARM command (value 0)
	printf("Arming.\r\n");
 8000d1a:	4818      	ldr	r0, [pc, #96]	@ (8000d7c <DShotTask+0x70>)
 8000d1c:	f007 fa94 	bl	8008248 <puts>
	//uint16_t frame_hc = 0x000F;
	//uint16_t frame_g = make_bdshot_frame(0, true);
	//printf("Generated frame: 0x%04X\r\n", frame_g);
	//printf("Hard-coded frame: 0x%04X\r\n", frame_hc);
	//prepare_bdshot_buffer(frame_hc);
	queue_bdshot_pulse(0, true);
 8000d20:	2101      	movs	r1, #1
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fecc 	bl	8000ac0 <queue_bdshot_pulse>
	for (int i = 0; i < 5000; i++){
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e008      	b.n	8000d40 <DShotTask+0x34>
		send_bdshot(TIM_CHANNEL_1);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fede 	bl	8000af0 <send_bdshot>
		vTaskDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f005 fc59 	bl	80065ec <vTaskDelay>
	for (int i = 0; i < 5000; i++){
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d46:	4293      	cmp	r3, r2
 8000d48:	ddf1      	ble.n	8000d2e <DShotTask+0x22>
	}
	printf("Done arming!\r\n");
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <DShotTask+0x74>)
 8000d4c:	f007 fa7c 	bl	8008248 <puts>
    vTaskDelay(300);  // Wait 300ms (Bluejay requires for arming)
 8000d50:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d54:	f005 fc4a 	bl	80065ec <vTaskDelay>

    //Approximately 84 ticks in 1 microsecond (Timer Clock = 84 MHz)
    printf("Throttling.\r\n");
 8000d58:	480a      	ldr	r0, [pc, #40]	@ (8000d84 <DShotTask+0x78>)
 8000d5a:	f007 fa75 	bl	8008248 <puts>
    queue_bdshot_pulse(200, true);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	20c8      	movs	r0, #200	@ 0xc8
 8000d62:	f7ff fead 	bl	8000ac0 <queue_bdshot_pulse>
    for (;;){
      send_bdshot(TIM_CHANNEL_1);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fec2 	bl	8000af0 <send_bdshot>
      vTaskDelay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f005 fc3d 	bl	80065ec <vTaskDelay>
      send_bdshot(TIM_CHANNEL_1);
 8000d72:	bf00      	nop
 8000d74:	e7f7      	b.n	8000d66 <DShotTask+0x5a>
 8000d76:	bf00      	nop
 8000d78:	08009194 	.word	0x08009194
 8000d7c:	080091a8 	.word	0x080091a8
 8000d80:	080091b4 	.word	0x080091b4
 8000d84:	080091c4 	.word	0x080091c4

08000d88 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0a2      	sub	sp, #136	@ 0x88
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  char msg[SERIAL_QUEUE_ITEM_SIZE];

  // Start DMA reception
  HAL_UART_Receive_DMA(&huart1, telemetry_buffer, sizeof(telemetry_buffer));
 8000d90:	2202      	movs	r2, #2
 8000d92:	4910      	ldr	r1, [pc, #64]	@ (8000dd4 <StartSerialTask+0x4c>)
 8000d94:	4810      	ldr	r0, [pc, #64]	@ (8000dd8 <StartSerialTask+0x50>)
 8000d96:	f003 f832 	bl	8003dfe <HAL_UART_Receive_DMA>

  for(;;)
  {
    // 1️⃣ Process serial debug messages
    if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <StartSerialTask+0x54>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 0108 	add.w	r1, r7, #8
 8000da2:	230a      	movs	r3, #10
 8000da4:	2200      	movs	r2, #0
 8000da6:	f004 fb65 	bl	8005474 <osMessageQueueGet>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10d      	bne.n	8000dcc <StartSerialTask+0x44>
    {
      HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa0b 	bl	80001d0 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f107 0108 	add.w	r1, r7, #8
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <StartSerialTask+0x58>)
 8000dc8:	f002 ff8e 	bl	8003ce8 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart6, (uint8_t *)rpm_msg, strlen(rpm_msg), HAL_MAX_DELAY);
      }
    }
    */

    osDelay(1); // Small delay to allow other tasks to run
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f004 fa63 	bl	8005298 <osDelay>
    if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000dd2:	e7e2      	b.n	8000d9a <StartSerialTask+0x12>
 8000dd4:	200002b8 	.word	0x200002b8
 8000dd8:	20000130 	.word	0x20000130
 8000ddc:	200002bc 	.word	0x200002bc
 8000de0:	20000178 	.word	0x20000178

08000de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000df6:	f000 fb59 	bl	80014ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40001c00 	.word	0x40001c00

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	210f      	movs	r1, #15
 8000e56:	f06f 0001 	mvn.w	r0, #1
 8000e5a:	f000 fbff 	bl	800165c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_TIM_PWM_MspInit+0xa8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d146      	bne.n	8000f0c <HAL_TIM_PWM_MspInit+0xa0>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <HAL_TIM_PWM_MspInit+0xac>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a24      	ldr	r2, [pc, #144]	@ (8000f18 <HAL_TIM_PWM_MspInit+0xac>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <HAL_TIM_PWM_MspInit+0xac>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000e9c:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <HAL_TIM_PWM_MspInit+0xb4>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ea2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000eaa:	2240      	movs	r2, #64	@ 0x40
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ebe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ec6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ed4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ed8:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ee2:	f000 fbe5 	bl	80016b0 <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000eec:	f7ff ff8c 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ef6:	4a09      	ldr	r2, [pc, #36]	@ (8000f1c <HAL_TIM_PWM_MspInit+0xb0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2105      	movs	r1, #5
 8000f00:	2032      	movs	r0, #50	@ 0x32
 8000f02:	f000 fbab 	bl	800165c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f06:	2032      	movs	r0, #50	@ 0x32
 8000f08:	f000 fbc4 	bl	8001694 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40000c00 	.word	0x40000c00
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	200000d0 	.word	0x200000d0
 8000f20:	40026040 	.word	0x40026040

08000f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <HAL_TIM_MspPostInit+0x68>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d11d      	bne.n	8000f82 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <HAL_TIM_MspPostInit+0x70>)
 8000f7e:	f000 ff99 	bl	8001eb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40000c00 	.word	0x40000c00
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	@ 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800112c <HAL_UART_MspInit+0x194>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	f040 8083 	bne.w	80010c2 <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fcc:	4b58      	ldr	r3, [pc, #352]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	4b54      	ldr	r3, [pc, #336]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	4a53      	ldr	r2, [pc, #332]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe8:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b4a      	ldr	r3, [pc, #296]	@ (8001130 <HAL_UART_MspInit+0x198>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001022:	2307      	movs	r3, #7
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4841      	ldr	r0, [pc, #260]	@ (8001134 <HAL_UART_MspInit+0x19c>)
 800102e:	f000 ff41 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001042:	2307      	movs	r3, #7
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	483a      	ldr	r0, [pc, #232]	@ (8001138 <HAL_UART_MspInit+0x1a0>)
 800104e:	f000 ff31 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001052:	4b3a      	ldr	r3, [pc, #232]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001054:	4a3a      	ldr	r2, [pc, #232]	@ (8001140 <HAL_UART_MspInit+0x1a8>)
 8001056:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001058:	4b38      	ldr	r3, [pc, #224]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 800105a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800105e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 800106e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001072:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001088:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800108c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001094:	4829      	ldr	r0, [pc, #164]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 8001096:	f000 fb0b 	bl	80016b0 <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80010a0:	f7ff feb2 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a25      	ldr	r2, [pc, #148]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 80010a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010aa:	4a24      	ldr	r2, [pc, #144]	@ (800113c <HAL_UART_MspInit+0x1a4>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	2025      	movs	r0, #37	@ 0x25
 80010b6:	f000 fad1 	bl	800165c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ba:	2025      	movs	r0, #37	@ 0x25
 80010bc:	f000 faea 	bl	8001694 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80010c0:	e030      	b.n	8001124 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART6)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <HAL_UART_MspInit+0x1ac>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d12b      	bne.n	8001124 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_MspInit+0x198>)
 80010d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d4:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_UART_MspInit+0x198>)
 80010d6:	f043 0320 	orr.w	r3, r3, #32
 80010da:	6453      	str	r3, [r2, #68]	@ 0x44
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_UART_MspInit+0x198>)
 80010de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_UART_MspInit+0x198>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_UART_MspInit+0x198>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_UART_MspInit+0x198>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001104:	23c0      	movs	r3, #192	@ 0xc0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001114:	2308      	movs	r3, #8
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <HAL_UART_MspInit+0x1b0>)
 8001120:	f000 fec8 	bl	8001eb4 <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	@ 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40011000 	.word	0x40011000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	200001c0 	.word	0x200001c0
 8001140:	40026440 	.word	0x40026440
 8001144:	40011400 	.word	0x40011400
 8001148:	40020800 	.word	0x40020800

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	@ 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <HAL_InitTick+0xe4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a32      	ldr	r2, [pc, #200]	@ (8001230 <HAL_InitTick+0xe4>)
 8001166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b30      	ldr	r3, [pc, #192]	@ (8001230 <HAL_InitTick+0xe4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001178:	f107 0210 	add.w	r2, r7, #16
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fc8a 	bl	8002a9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001192:	f001 fc5b 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8001196:	6378      	str	r0, [r7, #52]	@ 0x34
 8001198:	e004      	b.n	80011a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800119a:	f001 fc57 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 800119e:	4603      	mov	r3, r0
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a6:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <HAL_InitTick+0xe8>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9b      	lsrs	r3, r3, #18
 80011ae:	3b01      	subs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <HAL_InitTick+0xec>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	@ (800123c <HAL_InitTick+0xf0>)
 80011b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <HAL_InitTick+0xec>)
 80011ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011be:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80011c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <HAL_InitTick+0xec>)
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <HAL_InitTick+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_InitTick+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_InitTick+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 80011d8:	4817      	ldr	r0, [pc, #92]	@ (8001238 <HAL_InitTick+0xec>)
 80011da:	f001 fc91 	bl	8002b00 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11b      	bne.n	8001224 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 80011ec:	4812      	ldr	r0, [pc, #72]	@ (8001238 <HAL_InitTick+0xec>)
 80011ee:	f001 fce1 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001200:	202c      	movs	r0, #44	@ 0x2c
 8001202:	f000 fa47 	bl	8001694 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d808      	bhi.n	800121e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	202c      	movs	r0, #44	@ 0x2c
 8001212:	f000 fa23 	bl	800165c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_InitTick+0xf4>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e002      	b.n	8001224 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001224:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001228:	4618      	mov	r0, r3
 800122a:	3738      	adds	r7, #56	@ 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	431bde83 	.word	0x431bde83
 8001238:	200002c0 	.word	0x200002c0
 800123c:	40001c00 	.word	0x40001c00
 8001240:	20000004 	.word	0x20000004

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <DMA1_Stream2_IRQHandler+0x10>)
 8001282:	f000 fbad 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000d0 	.word	0x200000d0

08001290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <USART1_IRQHandler+0x10>)
 8001296:	f002 fdd7 	bl	8003e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000130 	.word	0x20000130

080012a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80012aa:	f001 ff0b 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200002c0 	.word	0x200002c0

080012b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <TIM5_IRQHandler+0x10>)
 80012be:	f001 ff01 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000088 	.word	0x20000088

080012cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <DMA2_Stream2_IRQHandler+0x10>)
 80012d2:	f000 fb85 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001c0 	.word	0x200001c0

080012e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e00a      	b.n	8001308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f2:	f3af 8000 	nop.w
 80012f6:	4601      	mov	r1, r0
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf0      	blt.n	80012f2 <_read+0x12>
  }

  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:
  }
  return len;
}

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001342:	605a      	str	r2, [r3, #4]
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f007 f90a 	bl	80085cc <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20000308 	.word	0x20000308
 80013ec:	20006068 	.word	0x20006068

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800144c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001442:	f007 f8c9 	bl	80085d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff f8b1 	bl	80005ac <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800144c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001458:	080092bc 	.word	0x080092bc
  ldr r2, =_sbss
 800145c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001460:	20006064 	.word	0x20006064

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f8d8 	bl	8001646 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff fe58 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fcba 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000030c 	.word	0x2000030c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000030c 	.word	0x2000030c

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff4c 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166e:	f7ff ff61 	bl	8001534 <__NVIC_GetPriorityGrouping>
 8001672:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	6978      	ldr	r0, [r7, #20]
 800167a:	f7ff ffb1 	bl	80015e0 <NVIC_EncodePriority>
 800167e:	4602      	mov	r2, r0
 8001680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff80 	bl	800158c <__NVIC_SetPriority>
}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff54 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ff0a 	bl	80014d4 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e099      	b.n	8001800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ec:	e00f      	b.n	800170e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ee:	f7ff fef1 	bl	80014d4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d908      	bls.n	800170e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2220      	movs	r2, #32
 8001700:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2203      	movs	r2, #3
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e078      	b.n	8001800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1e8      	bne.n	80016ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <HAL_DMA_Init+0x158>)
 8001728:	4013      	ands	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	2b04      	cmp	r3, #4
 8001766:	d107      	bne.n	8001778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	4313      	orrs	r3, r2
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f023 0307 	bic.w	r3, r3, #7
 800178e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d117      	bne.n	80017d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00e      	beq.n	80017d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fb01 	bl	8001dbc <DMA_CheckFifoParam>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2240      	movs	r2, #64	@ 0x40
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017ce:	2301      	movs	r3, #1
 80017d0:	e016      	b.n	8001800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fab8 	bl	8001d50 <DMA_CalcBaseAndBitshift>
 80017e0:	4603      	mov	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	223f      	movs	r2, #63	@ 0x3f
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	f010803f 	.word	0xf010803f

0800180c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_DMA_Start_IT+0x26>
 800182e:	2302      	movs	r3, #2
 8001830:	e040      	b.n	80018b4 <HAL_DMA_Start_IT+0xa8>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d12f      	bne.n	80018a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fa4a 	bl	8001cf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001864:	223f      	movs	r2, #63	@ 0x3f
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0216 	orr.w	r2, r2, #22
 800187a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0208 	orr.w	r2, r2, #8
 8001892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e005      	b.n	80018b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
 80018b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018ca:	f7ff fe03 	bl	80014d4 <HAL_GetTick>
 80018ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d008      	beq.n	80018ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e052      	b.n	8001994 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0216 	bic.w	r2, r2, #22
 80018fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800190c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d103      	bne.n	800191e <HAL_DMA_Abort+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0208 	bic.w	r2, r2, #8
 800192c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193e:	e013      	b.n	8001968 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001940:	f7ff fdc8 	bl	80014d4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b05      	cmp	r3, #5
 800194c:	d90c      	bls.n	8001968 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2220      	movs	r2, #32
 8001952:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2203      	movs	r2, #3
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e015      	b.n	8001994 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1e4      	bne.n	8001940 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197a:	223f      	movs	r2, #63	@ 0x3f
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d004      	beq.n	80019ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00c      	b.n	80019d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2205      	movs	r2, #5
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001c28 <HAL_DMA_IRQHandler+0x248>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a8e      	ldr	r2, [pc, #568]	@ (8001c2c <HAL_DMA_IRQHandler+0x24c>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0a9b      	lsrs	r3, r3, #10
 80019f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01a      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0204 	bic.w	r2, r2, #4
 8001a32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a38:	2208      	movs	r2, #8
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	2201      	movs	r2, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	2201      	movs	r2, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7a:	f043 0202 	orr.w	r2, r3, #2
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	2204      	movs	r2, #4
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d012      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	2210      	movs	r2, #16
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d043      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d03c      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	2210      	movs	r2, #16
 8001adc:	409a      	lsls	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d018      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d024      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
 8001b0e:	e01f      	b.n	8001b50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01b      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
 8001b20:	e016      	b.n	8001b50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0208 	bic.w	r2, r2, #8
 8001b3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b54:	2220      	movs	r2, #32
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 808f 	beq.w	8001c80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 8087 	beq.w	8001c80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	2220      	movs	r2, #32
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d136      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0216 	bic.w	r2, r2, #22
 8001b98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ba8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <HAL_DMA_IRQHandler+0x1da>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0208 	bic.w	r2, r2, #8
 8001bc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	223f      	movs	r2, #63	@ 0x3f
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d07e      	beq.n	8001cec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
        }
        return;
 8001bf6:	e079      	b.n	8001cec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01d      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d031      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
 8001c24:	e02c      	b.n	8001c80 <HAL_DMA_IRQHandler+0x2a0>
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d023      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
 8001c40:	e01e      	b.n	8001c80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10f      	bne.n	8001c70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0210 	bic.w	r2, r2, #16
 8001c5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d032      	beq.n	8001cee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2205      	movs	r2, #5
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d307      	bcc.n	8001cc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f2      	bne.n	8001cac <HAL_DMA_IRQHandler+0x2cc>
 8001cc6:	e000      	b.n	8001cca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
 8001cea:	e000      	b.n	8001cee <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cec:	bf00      	nop
    }
  }
}
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b40      	cmp	r3, #64	@ 0x40
 8001d20:	d108      	bne.n	8001d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d32:	e007      	b.n	8001d44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3b10      	subs	r3, #16
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d6a:	4a13      	ldr	r2, [pc, #76]	@ (8001db8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d909      	bls.n	8001d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d90:	e007      	b.n	8001da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	aaaaaaab 	.word	0xaaaaaaab
 8001db8:	08009270 	.word	0x08009270

08001dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11f      	bne.n	8001e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d856      	bhi.n	8001e8a <DMA_CheckFifoParam+0xce>
 8001ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <DMA_CheckFifoParam+0x28>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001e07 	.word	0x08001e07
 8001dec:	08001df5 	.word	0x08001df5
 8001df0:	08001e8b 	.word	0x08001e8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d046      	beq.n	8001e8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e04:	e043      	b.n	8001e8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e0e:	d140      	bne.n	8001e92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e14:	e03d      	b.n	8001e92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e1e:	d121      	bne.n	8001e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d837      	bhi.n	8001e96 <DMA_CheckFifoParam+0xda>
 8001e26:	a201      	add	r2, pc, #4	@ (adr r2, 8001e2c <DMA_CheckFifoParam+0x70>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e43 	.word	0x08001e43
 8001e34:	08001e3d 	.word	0x08001e3d
 8001e38:	08001e55 	.word	0x08001e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e40:	e030      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d025      	beq.n	8001e9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e52:	e022      	b.n	8001e9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e5c:	d11f      	bne.n	8001e9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e62:	e01c      	b.n	8001e9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d903      	bls.n	8001e72 <DMA_CheckFifoParam+0xb6>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d003      	beq.n	8001e78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e70:	e018      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
      break;
 8001e76:	e015      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00e      	beq.n	8001ea2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      break;
 8001e88:	e00b      	b.n	8001ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e00a      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e008      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e006      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8001e96:	bf00      	nop
 8001e98:	e004      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e002      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e16b      	b.n	80021a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 815a 	bne.w	80021a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d005      	beq.n	8001f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d130      	bne.n	8001f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80b4 	beq.w	80021a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b60      	ldr	r3, [pc, #384]	@ (80021c0 <HAL_GPIO_Init+0x30c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4a5f      	ldr	r2, [pc, #380]	@ (80021c0 <HAL_GPIO_Init+0x30c>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002048:	6453      	str	r3, [r2, #68]	@ 0x44
 800204a:	4b5d      	ldr	r3, [pc, #372]	@ (80021c0 <HAL_GPIO_Init+0x30c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002056:	4a5b      	ldr	r2, [pc, #364]	@ (80021c4 <HAL_GPIO_Init+0x310>)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_GPIO_Init+0x314>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x226>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a51      	ldr	r2, [pc, #324]	@ (80021cc <HAL_GPIO_Init+0x318>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x222>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a50      	ldr	r2, [pc, #320]	@ (80021d0 <HAL_GPIO_Init+0x31c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x21e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	@ (80021d4 <HAL_GPIO_Init+0x320>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4e      	ldr	r2, [pc, #312]	@ (80021d8 <HAL_GPIO_Init+0x324>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x216>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	@ (80021dc <HAL_GPIO_Init+0x328>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x212>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4c      	ldr	r2, [pc, #304]	@ (80021e0 <HAL_GPIO_Init+0x32c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4b      	ldr	r2, [pc, #300]	@ (80021e4 <HAL_GPIO_Init+0x330>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x20a>
 80020ba:	2307      	movs	r3, #7
 80020bc:	e00e      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020be:	2308      	movs	r3, #8
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	@ (80021c4 <HAL_GPIO_Init+0x310>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3b      	ldr	r3, [pc, #236]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a32      	ldr	r2, [pc, #200]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a27      	ldr	r2, [pc, #156]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae90 	bls.w	8001ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e267      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d075      	beq.n	80022f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800220a:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d00c      	beq.n	8002230 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b85      	ldr	r3, [pc, #532]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800221e:	2b08      	cmp	r3, #8
 8002220:	d112      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002222:	4b82      	ldr	r3, [pc, #520]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800222e:	d10b      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	4b7e      	ldr	r3, [pc, #504]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d05b      	beq.n	80022f4 <HAL_RCC_OscConfig+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d157      	bne.n	80022f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e242      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0x74>
 8002252:	4b76      	ldr	r3, [pc, #472]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e01d      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x98>
 800226a:	4b70      	ldr	r3, [pc, #448]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6f      	ldr	r2, [pc, #444]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6c      	ldr	r2, [pc, #432]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002284:	4b69      	ldr	r3, [pc, #420]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a68      	ldr	r2, [pc, #416]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800228a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b66      	ldr	r3, [pc, #408]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a65      	ldr	r2, [pc, #404]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f916 	bl	80014d4 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff f912 	bl	80014d4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	@ 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e207      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b5b      	ldr	r3, [pc, #364]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xc0>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f902 	bl	80014d4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff f8fe 	bl	80014d4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	@ 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1f3      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	4b51      	ldr	r3, [pc, #324]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0xe8>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002302:	4b4a      	ldr	r3, [pc, #296]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b47      	ldr	r3, [pc, #284]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002316:	2b08      	cmp	r3, #8
 8002318:	d11c      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231a:	4b44      	ldr	r3, [pc, #272]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1c7      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4937      	ldr	r1, [pc, #220]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	e03a      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	4b34      	ldr	r3, [pc, #208]	@ (8002430 <HAL_RCC_OscConfig+0x244>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff f8b7 	bl	80014d4 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff f8b3 	bl	80014d4 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1a8      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4925      	ldr	r1, [pc, #148]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <HAL_RCC_OscConfig+0x244>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff f896 	bl	80014d4 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ac:	f7ff f892 	bl	80014d4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e187      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d036      	beq.n	8002444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_RCC_OscConfig+0x248>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff f876 	bl	80014d4 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff f872 	bl	80014d4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e167      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x200>
 800240a:	e01b      	b.n	8002444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_OscConfig+0x248>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff f85f 	bl	80014d4 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	e00e      	b.n	8002438 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7ff f85b 	bl	80014d4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d907      	bls.n	8002438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e150      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000
 8002434:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	4b88      	ldr	r3, [pc, #544]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ea      	bne.n	800241a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8097 	beq.w	8002580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b81      	ldr	r3, [pc, #516]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b7d      	ldr	r3, [pc, #500]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	4a7c      	ldr	r2, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	@ 0x40
 8002472:	4b7a      	ldr	r3, [pc, #488]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b77      	ldr	r3, [pc, #476]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b74      	ldr	r3, [pc, #464]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a73      	ldr	r2, [pc, #460]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7ff f81b 	bl	80014d4 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7ff f817 	bl	80014d4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e10c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2ea>
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024cc:	4a63      	ldr	r2, [pc, #396]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x30c>
 80024de:	4b5f      	ldr	r3, [pc, #380]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e2:	4a5e      	ldr	r2, [pc, #376]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	4a5b      	ldr	r2, [pc, #364]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024f8:	4b58      	ldr	r3, [pc, #352]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	4a57      	ldr	r2, [pc, #348]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	@ 0x70
 8002504:	4b55      	ldr	r3, [pc, #340]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	4a54      	ldr	r2, [pc, #336]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe ffdc 	bl	80014d4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7fe ffd8 	bl	80014d4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0cb      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ee      	beq.n	8002520 <HAL_RCC_OscConfig+0x334>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe ffc6 	bl	80014d4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe ffc2 	bl	80014d4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0b5      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002562:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ee      	bne.n	800254c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b39      	ldr	r3, [pc, #228]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	4a38      	ldr	r2, [pc, #224]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a1 	beq.w	80026cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d05c      	beq.n	8002650 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d141      	bne.n	8002622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_RCC_OscConfig+0x478>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe ff96 	bl	80014d4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe ff92 	bl	80014d4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e087      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b27      	ldr	r3, [pc, #156]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	3b01      	subs	r3, #1
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	491b      	ldr	r1, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x478>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe ff6b 	bl	80014d4 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe ff67 	bl	80014d4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e05c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x416>
 8002620:	e054      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_RCC_OscConfig+0x478>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe ff54 	bl	80014d4 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe ff50 	bl	80014d4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e045      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x444>
 800264e:	e03d      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e038      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x4ec>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d028      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d121      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d11a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800269e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	3b01      	subs	r3, #1
 80026b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0cc      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d90c      	bls.n	8002718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d044      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b3f      	ldr	r3, [pc, #252]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e067      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4934      	ldr	r1, [pc, #208]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fe82 	bl	80014d4 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe fe7e 	bl	80014d4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e04f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b25      	ldr	r3, [pc, #148]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d20c      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b22      	ldr	r3, [pc, #136]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fc62 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	08009258 	.word	0x08009258
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b090      	sub	sp, #64	@ 0x40
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b59      	ldr	r3, [pc, #356]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80a1 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x16c>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e09b      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b53      	ldr	r3, [pc, #332]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x184>)
 80028de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028e0:	e09b      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b53      	ldr	r3, [pc, #332]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028e6:	e098      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	623b      	str	r3, [r7, #32]
 8002908:	627a      	str	r2, [r7, #36]	@ 0x24
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002910:	2100      	movs	r1, #0
 8002912:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002914:	fb03 f201 	mul.w	r2, r3, r1
 8002918:	2300      	movs	r3, #0
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	4413      	add	r3, r2
 8002920:	4a43      	ldr	r2, [pc, #268]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002922:	fba0 1202 	umull	r1, r2, r0, r2
 8002926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002928:	460a      	mov	r2, r1
 800292a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800292c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800292e:	4413      	add	r3, r2
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002934:	2200      	movs	r2, #0
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	61fa      	str	r2, [r7, #28]
 800293a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002942:	f7fd fc9d 	bl	8000280 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4613      	mov	r3, r2
 800294c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800294e:	e053      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4b35      	ldr	r3, [pc, #212]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	617a      	str	r2, [r7, #20]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002962:	f04f 0b00 	mov.w	fp, #0
 8002966:	4652      	mov	r2, sl
 8002968:	465b      	mov	r3, fp
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	0159      	lsls	r1, r3, #5
 8002974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002978:	0150      	lsls	r0, r2, #5
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	ebb2 080a 	subs.w	r8, r2, sl
 8002982:	eb63 090b 	sbc.w	r9, r3, fp
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002992:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002996:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800299a:	ebb2 0408 	subs.w	r4, r2, r8
 800299e:	eb63 0509 	sbc.w	r5, r3, r9
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	00eb      	lsls	r3, r5, #3
 80029ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b0:	00e2      	lsls	r2, r4, #3
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	eb14 030a 	adds.w	r3, r4, sl
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	eb45 030b 	adc.w	r3, r5, fp
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ce:	4629      	mov	r1, r5
 80029d0:	028b      	lsls	r3, r1, #10
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d8:	4621      	mov	r1, r4
 80029da:	028a      	lsls	r2, r1, #10
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e2:	2200      	movs	r2, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ec:	f7fd fc48 	bl	8000280 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3740      	adds	r7, #64	@ 0x40
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	00b71b00 	.word	0x00b71b00

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0a9b      	lsrs	r3, r3, #10
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4903      	ldr	r1, [pc, #12]	@ (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	08009268 	.word	0x08009268

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a78:	f7ff ffdc 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0b5b      	lsrs	r3, r3, #13
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4903      	ldr	r1, [pc, #12]	@ (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08009268 	.word	0x08009268

08002a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_RCC_GetClockConfig+0x5c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <HAL_RCC_GetClockConfig+0x5c>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_RCC_GetClockConfig+0x60>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0207 	and.w	r2, r3, #7
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	601a      	str	r2, [r3, #0]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f839 	bl	8002b9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 fd76 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e04e      	b.n	8002c6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf6:	d01d      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1e      	ldr	r2, [pc, #120]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d010      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	e007      	b.n	8002c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40010400 	.word	0x40010400
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40001800 	.word	0x40001800

08002c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe f8d6 	bl	8000e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fcac 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e022      	b.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d109      	bne.n	8002d7a <HAL_TIM_PWM_Start_DMA+0x46>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e015      	b.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d109      	bne.n	8002d94 <HAL_TIM_PWM_Start_DMA+0x60>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e008      	b.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
 8002dac:	e171      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_TIM_PWM_Start_DMA+0x94>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e022      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d109      	bne.n	8002de2 <HAL_TIM_PWM_Start_DMA+0xae>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e015      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d109      	bne.n	8002dfc <HAL_TIM_PWM_Start_DMA+0xc8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_TIM_PWM_Start_DMA+0xea>
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e137      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e30:	e016      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e40:	e00e      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e50:	e006      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e5a:	e001      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e118      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	f200 80ae 	bhi.w	8002fc4 <HAL_TIM_PWM_Start_DMA+0x290>
 8002e68:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002fc5 	.word	0x08002fc5
 8002e78:	08002fc5 	.word	0x08002fc5
 8002e7c:	08002fc5 	.word	0x08002fc5
 8002e80:	08002eed 	.word	0x08002eed
 8002e84:	08002fc5 	.word	0x08002fc5
 8002e88:	08002fc5 	.word	0x08002fc5
 8002e8c:	08002fc5 	.word	0x08002fc5
 8002e90:	08002f35 	.word	0x08002f35
 8002e94:	08002fc5 	.word	0x08002fc5
 8002e98:	08002fc5 	.word	0x08002fc5
 8002e9c:	08002fc5 	.word	0x08002fc5
 8002ea0:	08002f7d 	.word	0x08002f7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	4a7c      	ldr	r2, [pc, #496]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	4a7b      	ldr	r2, [pc, #492]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80030a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002eba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3334      	adds	r3, #52	@ 0x34
 8002ec8:	461a      	mov	r2, r3
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	f7fe fc9e 	bl	800180c <HAL_DMA_Start_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0db      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee8:	60da      	str	r2, [r3, #12]
      break;
 8002eea:	e06e      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	4a69      	ldr	r2, [pc, #420]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	4a68      	ldr	r2, [pc, #416]	@ (80030a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002f02:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3338      	adds	r3, #56	@ 0x38
 8002f10:	461a      	mov	r2, r3
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	f7fe fc7a 	bl	800180c <HAL_DMA_Start_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0b7      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f30:	60da      	str	r2, [r3, #12]
      break;
 8002f32:	e04a      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	4a58      	ldr	r2, [pc, #352]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	4a57      	ldr	r2, [pc, #348]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	4a56      	ldr	r2, [pc, #344]	@ (80030a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002f4a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	333c      	adds	r3, #60	@ 0x3c
 8002f58:	461a      	mov	r2, r3
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	f7fe fc56 	bl	800180c <HAL_DMA_Start_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e093      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f78:	60da      	str	r2, [r3, #12]
      break;
 8002f7a:	e026      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	4a46      	ldr	r2, [pc, #280]	@ (800309c <HAL_TIM_PWM_Start_DMA+0x368>)
 8002f82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	4a45      	ldr	r2, [pc, #276]	@ (80030a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	4a44      	ldr	r2, [pc, #272]	@ (80030a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002f92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3340      	adds	r3, #64	@ 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	f7fe fc32 	bl	800180c <HAL_DMA_Start_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e06f      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d15f      	bne.n	8003090 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fd7f 	bl	8003adc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a31      	ldr	r2, [pc, #196]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2f      	ldr	r2, [pc, #188]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x378>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800300a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a25      	ldr	r2, [pc, #148]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d022      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301e:	d01d      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a22      	ldr	r2, [pc, #136]	@ (80030b0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d018      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a21      	ldr	r2, [pc, #132]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1f      	ldr	r2, [pc, #124]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00e      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1a      	ldr	r2, [pc, #104]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x378>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x388>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIM_PWM_Start_DMA+0x328>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1a      	ldr	r2, [pc, #104]	@ (80030c0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b06      	cmp	r3, #6
 800306c:	d010      	beq.n	8003090 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	e007      	b.n	8003090 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	0800351f 	.word	0x0800351f
 80030a0:	080035c7 	.word	0x080035c7
 80030a4:	0800348d 	.word	0x0800348d
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40010400 	.word	0x40010400
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40001800 	.word	0x40001800

080030c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01b      	beq.n	8003128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0202 	mvn.w	r2, #2
 80030f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f994 	bl	800343c <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f986 	bl	8003428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd fd95 	bl	8000c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0204 	mvn.w	r2, #4
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f96e 	bl	800343c <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f960 	bl	8003428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fd fd6f 	bl	8000c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0208 	mvn.w	r2, #8
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f948 	bl	800343c <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f93a 	bl	8003428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fd fd49 	bl	8000c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0210 	mvn.w	r2, #16
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2208      	movs	r2, #8
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f922 	bl	800343c <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f914 	bl	8003428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd fd23 	bl	8000c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0201 	mvn.w	r2, #1
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fdda 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fcf0 	bl	8003c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8f6 	bl	8003464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0220 	mvn.w	r2, #32
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fcc2 	bl	8003c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0ae      	b.n	8003420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	f200 809f 	bhi.w	8003410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032d2:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	08003411 	.word	0x08003411
 80032e0:	08003411 	.word	0x08003411
 80032e4:	08003411 	.word	0x08003411
 80032e8:	0800334d 	.word	0x0800334d
 80032ec:	08003411 	.word	0x08003411
 80032f0:	08003411 	.word	0x08003411
 80032f4:	08003411 	.word	0x08003411
 80032f8:	0800338f 	.word	0x0800338f
 80032fc:	08003411 	.word	0x08003411
 8003300:	08003411 	.word	0x08003411
 8003304:	08003411 	.word	0x08003411
 8003308:	080033cf 	.word	0x080033cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fa32 	bl	800377c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6999      	ldr	r1, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	619a      	str	r2, [r3, #24]
      break;
 800334a:	e064      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa82 	bl	800385c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	619a      	str	r2, [r3, #24]
      break;
 800338c:	e043      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fad7 	bl	8003948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0204 	bic.w	r2, r2, #4
 80033b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
      break;
 80033cc:	e023      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fb2b 	bl	8003a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	61da      	str	r2, [r3, #28]
      break;
 800340e:	e002      	b.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b2:	e02a      	b.n	800350a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d107      	bne.n	80034ce <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034cc:	e01d      	b.n	800350a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2204      	movs	r2, #4
 80034dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e6:	e010      	b.n	800350a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d107      	bne.n	8003502 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2208      	movs	r2, #8
 80034f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003500:	e003      	b.n	800350a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff ffb4 	bl	8003478 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	771a      	strb	r2, [r3, #28]
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d10b      	bne.n	800354e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d136      	bne.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800354c:	e031      	b.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d10b      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2202      	movs	r2, #2
 800355c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d125      	bne.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800356e:	e020      	b.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	d10b      	bne.n	8003592 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d114      	bne.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003590:	e00f      	b.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d10a      	bne.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2208      	movs	r2, #8
 80035a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7fd fb4a 	bl	8000c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	771a      	strb	r2, [r3, #28]
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d103      	bne.n	80035e6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	771a      	strb	r2, [r3, #28]
 80035e4:	e019      	b.n	800361a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d103      	bne.n	80035f8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2202      	movs	r2, #2
 80035f4:	771a      	strb	r2, [r3, #28]
 80035f6:	e010      	b.n	800361a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d103      	bne.n	800360a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2204      	movs	r2, #4
 8003606:	771a      	strb	r2, [r3, #28]
 8003608:	e007      	b.n	800361a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d102      	bne.n	800361a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2208      	movs	r2, #8
 8003618:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ff18 	bl	8003450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	771a      	strb	r2, [r3, #28]
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a43      	ldr	r2, [pc, #268]	@ (8003750 <TIM_Base_SetConfig+0x120>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800364e:	d00f      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a40      	ldr	r2, [pc, #256]	@ (8003754 <TIM_Base_SetConfig+0x124>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00b      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3f      	ldr	r2, [pc, #252]	@ (8003758 <TIM_Base_SetConfig+0x128>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a3e      	ldr	r2, [pc, #248]	@ (800375c <TIM_Base_SetConfig+0x12c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a3d      	ldr	r2, [pc, #244]	@ (8003760 <TIM_Base_SetConfig+0x130>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a32      	ldr	r2, [pc, #200]	@ (8003750 <TIM_Base_SetConfig+0x120>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02b      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003690:	d027      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2f      	ldr	r2, [pc, #188]	@ (8003754 <TIM_Base_SetConfig+0x124>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d023      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2e      	ldr	r2, [pc, #184]	@ (8003758 <TIM_Base_SetConfig+0x128>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01f      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a2d      	ldr	r2, [pc, #180]	@ (800375c <TIM_Base_SetConfig+0x12c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01b      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <TIM_Base_SetConfig+0x130>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d017      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003764 <TIM_Base_SetConfig+0x134>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003768 <TIM_Base_SetConfig+0x138>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00f      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a29      	ldr	r2, [pc, #164]	@ (800376c <TIM_Base_SetConfig+0x13c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a28      	ldr	r2, [pc, #160]	@ (8003770 <TIM_Base_SetConfig+0x140>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a27      	ldr	r2, [pc, #156]	@ (8003774 <TIM_Base_SetConfig+0x144>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <TIM_Base_SetConfig+0x148>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d108      	bne.n	80036f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <TIM_Base_SetConfig+0x120>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0xf2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a10      	ldr	r2, [pc, #64]	@ (8003760 <TIM_Base_SetConfig+0x130>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d103      	bne.n	800372a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40010400 	.word	0x40010400
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800
 8003770:	40001800 	.word	0x40001800
 8003774:	40001c00 	.word	0x40001c00
 8003778:	40002000 	.word	0x40002000

0800377c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f023 0201 	bic.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f023 0302 	bic.w	r3, r3, #2
 80037c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <TIM_OC1_SetConfig+0xd8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_OC1_SetConfig+0x64>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a1f      	ldr	r2, [pc, #124]	@ (8003858 <TIM_OC1_SetConfig+0xdc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10c      	bne.n	80037fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0308 	bic.w	r3, r3, #8
 80037e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a15      	ldr	r2, [pc, #84]	@ (8003854 <TIM_OC1_SetConfig+0xd8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_OC1_SetConfig+0x8e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <TIM_OC1_SetConfig+0xdc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400

0800385c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f023 0210 	bic.w	r2, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0320 	bic.w	r3, r3, #32
 80038a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a22      	ldr	r2, [pc, #136]	@ (8003940 <TIM_OC2_SetConfig+0xe4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_OC2_SetConfig+0x68>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <TIM_OC2_SetConfig+0xe8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10d      	bne.n	80038e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a17      	ldr	r2, [pc, #92]	@ (8003940 <TIM_OC2_SetConfig+0xe4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_OC2_SetConfig+0x94>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a16      	ldr	r2, [pc, #88]	@ (8003944 <TIM_OC2_SetConfig+0xe8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d113      	bne.n	8003918 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000
 8003944:	40010400 	.word	0x40010400

08003948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <TIM_OC3_SetConfig+0xe0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_OC3_SetConfig+0x66>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a20      	ldr	r2, [pc, #128]	@ (8003a2c <TIM_OC3_SetConfig+0xe4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10d      	bne.n	80039ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <TIM_OC3_SetConfig+0xe0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_OC3_SetConfig+0x92>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <TIM_OC3_SetConfig+0xe4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40010400 	.word	0x40010400

08003a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	031b      	lsls	r3, r3, #12
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <TIM_OC4_SetConfig+0xa4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC4_SetConfig+0x68>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a11      	ldr	r2, [pc, #68]	@ (8003ad8 <TIM_OC4_SetConfig+0xa8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d109      	bne.n	8003aac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40010400 	.word	0x40010400

08003adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2201      	movs	r2, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1a      	ldr	r2, [r3, #32]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1a      	ldr	r2, [r3, #32]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e05a      	b.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a21      	ldr	r2, [pc, #132]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8c:	d01d      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	@ (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	40010400 	.word	0x40010400
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40001800 	.word	0x40001800

08003c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e042      	b.n	8003ce0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f992 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	@ 0x24
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 ff6f 	bl	8004b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d175      	bne.n	8003df4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Transmit+0x2c>
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e06e      	b.n	8003df6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2221      	movs	r2, #33	@ 0x21
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d26:	f7fd fbd5 	bl	80014d4 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d40:	d108      	bne.n	8003d54 <HAL_UART_Transmit+0x6c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e003      	b.n	8003d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d5c:	e02e      	b.n	8003dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	@ 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fc3f 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e03a      	b.n	8003df6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	e007      	b.n	8003dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1cb      	bne.n	8003d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2140      	movs	r1, #64	@ 0x40
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fc0b 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e006      	b.n	8003df6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d112      	bne.n	8003e3e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_UART_Receive_DMA+0x26>
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e00b      	b.n	8003e40 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	461a      	mov	r2, r3
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fc33 	bl	80046a0 <UART_Start_Receive_DMA>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	e000      	b.n	8003e40 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_UART_IRQHandler+0x66>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fda4 	bl	80049f4 <UART_Receive_IT>
      return;
 8003eac:	e273      	b.n	8004396 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80de 	beq.w	8004074 <HAL_UART_IRQHandler+0x22c>
 8003eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80d1 	beq.w	8004074 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xae>
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_UART_IRQHandler+0xd2>
 8003f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	f043 0202 	orr.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_UART_IRQHandler+0xf6>
 8003f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	f043 0204 	orr.w	r2, r3, #4
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <HAL_UART_IRQHandler+0x126>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f043 0208 	orr.w	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 820a 	beq.w	800438c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_UART_IRQHandler+0x14e>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fd2f 	bl	80049f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x17a>
 8003fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04f      	beq.n	8004062 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fc3a 	bl	800483c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d141      	bne.n	800405a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004002:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800400e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800401a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1d9      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d013      	beq.n	8004052 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	4a8a      	ldr	r2, [pc, #552]	@ (8004258 <HAL_UART_IRQHandler+0x410>)
 8004030:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fcb0 	bl	800199c <HAL_DMA_Abort_IT>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800404c:	4610      	mov	r0, r2
 800404e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00e      	b.n	8004070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9b6 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00a      	b.n	8004070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9b2 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e006      	b.n	8004070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9ae 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800406e:	e18d      	b.n	800438c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	bf00      	nop
    return;
 8004072:	e18b      	b.n	800438c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 8167 	bne.w	800434c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8160 	beq.w	800434c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8159 	beq.w	800434c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ba:	2b40      	cmp	r3, #64	@ 0x40
 80040bc:	f040 80ce 	bne.w	800425c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80a9 	beq.w	8004228 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040de:	429a      	cmp	r2, r3
 80040e0:	f080 80a2 	bcs.w	8004228 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f6:	f000 8088 	beq.w	800420a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800412a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d9      	bne.n	80040fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3314      	adds	r3, #20
 800414c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3314      	adds	r3, #20
 8004166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800416a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800416e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800417c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e1      	bne.n	8004146 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041da:	f023 0310 	bic.w	r3, r3, #16
 80041de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e3      	bne.n	80041c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd fb59 	bl	80018bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004218:	b29b      	uxth	r3, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8d9 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004226:	e0b3      	b.n	8004390 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800422c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004230:	429a      	cmp	r2, r3
 8004232:	f040 80ad 	bne.w	8004390 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004240:	f040 80a6 	bne.w	8004390 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f8c1 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
      return;
 8004256:	e09b      	b.n	8004390 <HAL_UART_IRQHandler+0x548>
 8004258:	08004903 	.word	0x08004903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004264:	b29b      	uxth	r3, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 808e 	beq.w	8004394 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8089 	beq.w	8004394 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	623b      	str	r3, [r7, #32]
   return(result);
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042de:	633a      	str	r2, [r7, #48]	@ 0x30
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e3      	bne.n	80042ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0310 	bic.w	r3, r3, #16
 8004316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004324:	61fa      	str	r2, [r7, #28]
 8004326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	69b9      	ldr	r1, [r7, #24]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	617b      	str	r3, [r7, #20]
   return(result);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e3      	bne.n	8004300 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800433e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f847 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800434a:	e023      	b.n	8004394 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <HAL_UART_IRQHandler+0x524>
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fadd 	bl	8004924 <UART_Transmit_IT>
    return;
 800436a:	e014      	b.n	8004396 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_UART_IRQHandler+0x54e>
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb1d 	bl	80049c4 <UART_EndTransmit_IT>
    return;
 800438a:	e004      	b.n	8004396 <HAL_UART_IRQHandler+0x54e>
    return;
 800438c:	bf00      	nop
 800438e:	e002      	b.n	8004396 <HAL_UART_IRQHandler+0x54e>
      return;
 8004390:	bf00      	nop
 8004392:	e000      	b.n	8004396 <HAL_UART_IRQHandler+0x54e>
      return;
 8004394:	bf00      	nop
  }
}
 8004396:	37e8      	adds	r7, #232	@ 0xe8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b09c      	sub	sp, #112	@ 0x70
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d172      	bne.n	80044f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800440c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440e:	2200      	movs	r2, #0
 8004410:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004428:	66bb      	str	r3, [r7, #104]	@ 0x68
 800442a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004432:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004434:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e5      	bne.n	8004412 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	667b      	str	r3, [r7, #100]	@ 0x64
 800445e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004466:	647a      	str	r2, [r7, #68]	@ 0x44
 8004468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800446c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	623b      	str	r3, [r7, #32]
   return(result);
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800449a:	633a      	str	r2, [r7, #48]	@ 0x30
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d119      	bne.n	80044f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0310 	bic.w	r3, r3, #16
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044de:	61fa      	str	r2, [r7, #28]
 80044e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	69b9      	ldr	r1, [r7, #24]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	617b      	str	r3, [r7, #20]
   return(result);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e5      	bne.n	80044be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f4:	2200      	movs	r2, #0
 80044f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004502:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004504:	4619      	mov	r1, r3
 8004506:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004508:	f7ff ff66 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800450c:	e002      	b.n	8004514 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800450e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004510:	f7fc fbac 	bl	8000c6c <HAL_UART_RxCpltCallback>
}
 8004514:	bf00      	nop
 8004516:	3770      	adds	r7, #112	@ 0x70
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d108      	bne.n	800454a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ff48 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004548:	e002      	b.n	8004550 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff ff30 	bl	80043b0 <HAL_UART_RxHalfCpltCallback>
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004574:	2b80      	cmp	r3, #128	@ 0x80
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b21      	cmp	r3, #33	@ 0x21
 800458a:	d108      	bne.n	800459e <UART_DMAError+0x46>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f000 f927 	bl	80047ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	2b40      	cmp	r3, #64	@ 0x40
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b22      	cmp	r3, #34	@ 0x22
 80045be:	d108      	bne.n	80045d2 <UART_DMAError+0x7a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80045cc:	68b8      	ldr	r0, [r7, #8]
 80045ce:	f000 f935 	bl	800483c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045de:	68b8      	ldr	r0, [r7, #8]
 80045e0:	f7ff fef0 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fc:	e03b      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d037      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fc ff65 	bl	80014d4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	6a3a      	ldr	r2, [r7, #32]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <UART_WaitOnFlagUntilTimeout+0x30>
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e03a      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d023      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x8a>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b80      	cmp	r3, #128	@ 0x80
 8004632:	d020      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b40      	cmp	r3, #64	@ 0x40
 8004638:	d01d      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b08      	cmp	r3, #8
 8004646:	d116      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8ec 	bl	800483c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2208      	movs	r2, #8
 8004668:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e00f      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d0b4      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b098      	sub	sp, #96	@ 0x60
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2222      	movs	r2, #34	@ 0x22
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	4a44      	ldr	r2, [pc, #272]	@ (80047e0 <UART_Start_Receive_DMA+0x140>)
 80046ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	4a43      	ldr	r2, [pc, #268]	@ (80047e4 <UART_Start_Receive_DMA+0x144>)
 80046d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	4a42      	ldr	r2, [pc, #264]	@ (80047e8 <UART_Start_Receive_DMA+0x148>)
 80046de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	2200      	movs	r2, #0
 80046e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	f7fd f884 	bl	800180c <HAL_DMA_Start_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2210      	movs	r2, #16
 800470e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e05d      	b.n	80047d8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d019      	beq.n	800476e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800474a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800474c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800475a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800475c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3314      	adds	r3, #20
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	657b      	str	r3, [r7, #84]	@ 0x54
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800478e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e5      	bne.n	800476e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	617b      	str	r3, [r7, #20]
   return(result);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6a39      	ldr	r1, [r7, #32]
 80047c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3760      	adds	r7, #96	@ 0x60
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	080043f1 	.word	0x080043f1
 80047e4:	0800451d 	.word	0x0800451d
 80047e8:	08004559 	.word	0x08004559

080047ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	60bb      	str	r3, [r7, #8]
   return(result);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	61ba      	str	r2, [r7, #24]
 8004816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	613b      	str	r3, [r7, #16]
   return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e5      	bne.n	80047f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004830:	bf00      	nop
 8004832:	3724      	adds	r7, #36	@ 0x24
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b095      	sub	sp, #84	@ 0x54
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800485a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004864:	643a      	str	r2, [r7, #64]	@ 0x40
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800486a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	61fb      	str	r3, [r7, #28]
   return(result);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3314      	adds	r3, #20
 8004896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d119      	bne.n	80048e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f023 0310 	bic.w	r3, r3, #16
 80048ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d4:	61ba      	str	r2, [r7, #24]
 80048d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6979      	ldr	r1, [r7, #20]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	613b      	str	r3, [r7, #16]
   return(result);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048f6:	bf00      	nop
 80048f8:	3754      	adds	r7, #84	@ 0x54
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fd54 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b21      	cmp	r3, #33	@ 0x21
 8004936:	d13e      	bne.n	80049b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	d114      	bne.n	800496c <UART_Transmit_IT+0x48>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]
 800496a:	e008      	b.n	800497e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	1c59      	adds	r1, r3, #1
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6211      	str	r1, [r2, #32]
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fcd9 	bl	800439c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	@ 0x30
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b22      	cmp	r3, #34	@ 0x22
 8004a0e:	f040 80aa 	bne.w	8004b66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d115      	bne.n	8004a48 <UART_Receive_IT+0x54>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d111      	bne.n	8004a48 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a46:	e024      	b.n	8004a92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a56:	d007      	beq.n	8004a68 <UART_Receive_IT+0x74>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <UART_Receive_IT+0x82>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e008      	b.n	8004a88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d15d      	bne.n	8004b62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0220 	bic.w	r2, r2, #32
 8004ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d135      	bne.n	8004b58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b12:	623a      	str	r2, [r7, #32]
 8004b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	69f9      	ldr	r1, [r7, #28]
 8004b18:	6a3a      	ldr	r2, [r7, #32]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d10a      	bne.n	8004b4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fc41 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
 8004b56:	e002      	b.n	8004b5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc f887 	bl	8000c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e002      	b.n	8004b68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e000      	b.n	8004b68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3730      	adds	r7, #48	@ 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b0c0      	sub	sp, #256	@ 0x100
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	68d9      	ldr	r1, [r3, #12]
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	ea40 0301 	orr.w	r3, r0, r1
 8004b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bc8:	f021 010c 	bic.w	r1, r1, #12
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bea:	6999      	ldr	r1, [r3, #24]
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	ea40 0301 	orr.w	r3, r0, r1
 8004bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d005      	beq.n	8004c10 <UART_SetConfig+0xa0>
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e40 <UART_SetConfig+0x2d0>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d104      	bne.n	8004c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fd ff30 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8004c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c18:	e003      	b.n	8004c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1a:	f7fd ff17 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8004c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c2c:	f040 810c 	bne.w	8004e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c52:	4621      	mov	r1, r4
 8004c54:	eb12 0801 	adds.w	r8, r2, r1
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb43 0901 	adc.w	r9, r3, r1
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c72:	4690      	mov	r8, r2
 8004c74:	4699      	mov	r9, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	eb18 0303 	adds.w	r3, r8, r3
 8004c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c80:	462b      	mov	r3, r5
 8004c82:	eb49 0303 	adc.w	r3, r9, r3
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	18db      	adds	r3, r3, r3
 8004ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	eb42 0303 	adc.w	r3, r2, r3
 8004caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cb4:	f7fb fae4 	bl	8000280 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ce8:	4641      	mov	r1, r8
 8004cea:	eb12 0a01 	adds.w	sl, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d08:	4692      	mov	sl, r2
 8004d0a:	469b      	mov	fp, r3
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb4b 0303 	adc.w	r3, fp, r3
 8004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d34:	460b      	mov	r3, r1
 8004d36:	18db      	adds	r3, r3, r3
 8004d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d4a:	f7fb fa99 	bl	8000280 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004d56:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2264      	movs	r2, #100	@ 0x64
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d6a:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d78:	441c      	add	r4, r3
 8004d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d94:	415b      	adcs	r3, r3
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004df0:	460b      	mov	r3, r1
 8004df2:	18db      	adds	r3, r3, r3
 8004df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df6:	4613      	mov	r3, r2
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e06:	f7fb fa3b 	bl	8000280 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2164      	movs	r1, #100	@ 0x64
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	3332      	adds	r3, #50	@ 0x32
 8004e22:	4a08      	ldr	r2, [pc, #32]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 0207 	and.w	r2, r3, #7
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4422      	add	r2, r4
 8004e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e38:	e106      	b.n	8005048 <UART_SetConfig+0x4d8>
 8004e3a:	bf00      	nop
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	40011400 	.word	0x40011400
 8004e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	6239      	str	r1, [r7, #32]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	1854      	adds	r4, r2, r1
 8004e6e:	4649      	mov	r1, r9
 8004e70:	eb43 0501 	adc.w	r5, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e90:	464b      	mov	r3, r9
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	008b      	lsls	r3, r1, #2
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	008a      	lsls	r2, r1, #2
 8004ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ec8:	f7fb f9da 	bl	8000280 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b60      	ldr	r3, [pc, #384]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	011c      	lsls	r4, r3, #4
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	61b9      	str	r1, [r7, #24]
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004efc:	4641      	mov	r1, r8
 8004efe:	1851      	adds	r1, r2, r1
 8004f00:	6139      	str	r1, [r7, #16]
 8004f02:	4649      	mov	r1, r9
 8004f04:	414b      	adcs	r3, r1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f14:	4659      	mov	r1, fp
 8004f16:	00cb      	lsls	r3, r1, #3
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1e:	4651      	mov	r1, sl
 8004f20:	00ca      	lsls	r2, r1, #3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	189b      	adds	r3, r3, r2
 8004f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f54:	4649      	mov	r1, r9
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	4641      	mov	r1, r8
 8004f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5e:	4641      	mov	r1, r8
 8004f60:	008a      	lsls	r2, r1, #2
 8004f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f66:	f7fb f98b 	bl	8000280 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2301 	umull	r2, r3, r3, r1
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2264      	movs	r2, #100	@ 0x64
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	@ 0x32
 8004f84:	4a33      	ldr	r2, [pc, #204]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	eb42 0303 	adc.w	r3, r2, r3
 8004fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005016:	f7fb f933 	bl	8000280 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <UART_SetConfig+0x4e4>)
 8005020:	fba3 1302 	umull	r1, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	2164      	movs	r1, #100	@ 0x64
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	3332      	adds	r3, #50	@ 0x32
 8005032:	4a08      	ldr	r2, [pc, #32]	@ (8005054 <UART_SetConfig+0x4e4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4422      	add	r2, r4
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005054:	51eb851f 	.word	0x51eb851f

08005058 <__NVIC_SetPriority>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db0a      	blt.n	8005082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	490c      	ldr	r1, [pc, #48]	@ (80050a4 <__NVIC_SetPriority+0x4c>)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	440b      	add	r3, r1
 800507c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005080:	e00a      	b.n	8005098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4908      	ldr	r1, [pc, #32]	@ (80050a8 <__NVIC_SetPriority+0x50>)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	3b04      	subs	r3, #4
 8005090:	0112      	lsls	r2, r2, #4
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	440b      	add	r3, r1
 8005096:	761a      	strb	r2, [r3, #24]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000e100 	.word	0xe000e100
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <SysTick_Handler+0x1c>)
 80050b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050b4:	f001 ff34 	bl	8006f20 <xTaskGetSchedulerState>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050be:	f002 fd2b 	bl	8007b18 <xPortSysTickHandler>
  }
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	e000e010 	.word	0xe000e010

080050cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050d0:	2100      	movs	r1, #0
 80050d2:	f06f 0004 	mvn.w	r0, #4
 80050d6:	f7ff ffbf 	bl	8005058 <__NVIC_SetPriority>
#endif
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e6:	f3ef 8305 	mrs	r3, IPSR
 80050ea:	603b      	str	r3, [r7, #0]
  return(result);
 80050ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050f2:	f06f 0305 	mvn.w	r3, #5
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e00c      	b.n	8005114 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <osKernelInitialize+0x44>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005102:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <osKernelInitialize+0x44>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005108:	2300      	movs	r3, #0
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	e002      	b.n	8005114 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800510e:	f04f 33ff 	mov.w	r3, #4294967295
 8005112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005114:	687b      	ldr	r3, [r7, #4]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000310 	.word	0x20000310

08005128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	603b      	str	r3, [r7, #0]
  return(result);
 8005134:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <osKernelStart+0x1a>
    stat = osErrorISR;
 800513a:	f06f 0305 	mvn.w	r3, #5
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	e010      	b.n	8005164 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <osKernelStart+0x48>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d109      	bne.n	800515e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800514a:	f7ff ffbf 	bl	80050cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <osKernelStart+0x48>)
 8005150:	2202      	movs	r2, #2
 8005152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005154:	f001 fa80 	bl	8006658 <vTaskStartScheduler>
      stat = osOK;
 8005158:	2300      	movs	r3, #0
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e002      	b.n	8005164 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800515e:	f04f 33ff 	mov.w	r3, #4294967295
 8005162:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005164:	687b      	ldr	r3, [r7, #4]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000310 	.word	0x20000310

08005174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b08e      	sub	sp, #56	@ 0x38
 8005178:	af04      	add	r7, sp, #16
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005184:	f3ef 8305 	mrs	r3, IPSR
 8005188:	617b      	str	r3, [r7, #20]
  return(result);
 800518a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800518c:	2b00      	cmp	r3, #0
 800518e:	d17e      	bne.n	800528e <osThreadNew+0x11a>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d07b      	beq.n	800528e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005196:	2380      	movs	r3, #128	@ 0x80
 8005198:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800519a:	2318      	movs	r3, #24
 800519c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d045      	beq.n	800523a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <osThreadNew+0x48>
        name = attr->name;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <osThreadNew+0x6e>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b38      	cmp	r3, #56	@ 0x38
 80051d4:	d805      	bhi.n	80051e2 <osThreadNew+0x6e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <osThreadNew+0x72>
        return (NULL);
 80051e2:	2300      	movs	r3, #0
 80051e4:	e054      	b.n	8005290 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <osThreadNew+0xa8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2ba7      	cmp	r3, #167	@ 0xa7
 8005204:	d90a      	bls.n	800521c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <osThreadNew+0xa8>
        mem = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e010      	b.n	800523e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <osThreadNew+0xca>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <osThreadNew+0xca>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <osThreadNew+0xca>
          mem = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e001      	b.n	800523e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d110      	bne.n	8005266 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800524c:	9202      	str	r2, [sp, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f001 f808 	bl	8006270 <xTaskCreateStatic>
 8005260:	4603      	mov	r3, r0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e013      	b.n	800528e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d110      	bne.n	800528e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	b29a      	uxth	r2, r3
 8005270:	f107 0310 	add.w	r3, r7, #16
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f001 f856 	bl	8006330 <xTaskCreate>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d001      	beq.n	800528e <osThreadNew+0x11a>
            hTask = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800528e:	693b      	ldr	r3, [r7, #16]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3728      	adds	r7, #40	@ 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a0:	f3ef 8305 	mrs	r3, IPSR
 80052a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <osDelay+0x1c>
    stat = osErrorISR;
 80052ac:	f06f 0305 	mvn.w	r3, #5
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e007      	b.n	80052c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 f994 	bl	80065ec <vTaskDelay>
    }
  }

  return (stat);
 80052c4:	68fb      	ldr	r3, [r7, #12]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b08a      	sub	sp, #40	@ 0x28
 80052d2:	af02      	add	r7, sp, #8
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052de:	f3ef 8305 	mrs	r3, IPSR
 80052e2:	613b      	str	r3, [r7, #16]
  return(result);
 80052e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d15f      	bne.n	80053aa <osMessageQueueNew+0xdc>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05c      	beq.n	80053aa <osMessageQueueNew+0xdc>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d059      	beq.n	80053aa <osMessageQueueNew+0xdc>
    mem = -1;
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d029      	beq.n	8005356 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <osMessageQueueNew+0x62>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005310:	d90e      	bls.n	8005330 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <osMessageQueueNew+0x62>
        mem = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e014      	b.n	800535a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d110      	bne.n	800535a <osMessageQueueNew+0x8c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10c      	bne.n	800535a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005344:	2b00      	cmp	r3, #0
 8005346:	d108      	bne.n	800535a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <osMessageQueueNew+0x8c>
          mem = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	e001      	b.n	800535a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10b      	bne.n	8005378 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2100      	movs	r1, #0
 800536a:	9100      	str	r1, [sp, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fa30 	bl	80057d4 <xQueueGenericCreateStatic>
 8005374:	61f8      	str	r0, [r7, #28]
 8005376:	e008      	b.n	800538a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800537e:	2200      	movs	r2, #0
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 faa3 	bl	80058ce <xQueueGenericCreate>
 8005388:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e001      	b.n	80053a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	69f8      	ldr	r0, [r7, #28]
 80053a6:	f000 ff05 	bl	80061b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053cc:	f3ef 8305 	mrs	r3, IPSR
 80053d0:	617b      	str	r3, [r7, #20]
  return(result);
 80053d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d028      	beq.n	800542a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <osMessageQueuePut+0x36>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <osMessageQueuePut+0x36>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80053ea:	f06f 0303 	mvn.w	r3, #3
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e038      	b.n	8005464 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80053f6:	f107 0210 	add.w	r2, r7, #16
 80053fa:	2300      	movs	r3, #0
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	69b8      	ldr	r0, [r7, #24]
 8005400:	f000 fbc6 	bl	8005b90 <xQueueGenericSendFromISR>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d003      	beq.n	8005412 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800540a:	f06f 0302 	mvn.w	r3, #2
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e028      	b.n	8005464 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d025      	beq.n	8005464 <osMessageQueuePut+0xb0>
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <osMessageQueuePut+0xbc>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	e01c      	b.n	8005464 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <osMessageQueuePut+0x82>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005436:	f06f 0303 	mvn.w	r3, #3
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	e012      	b.n	8005464 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800543e:	2300      	movs	r3, #0
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	69b8      	ldr	r0, [r7, #24]
 8005446:	f000 faa1 	bl	800598c <xQueueGenericSend>
 800544a:	4603      	mov	r3, r0
 800544c:	2b01      	cmp	r3, #1
 800544e:	d009      	beq.n	8005464 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005456:	f06f 0301 	mvn.w	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e002      	b.n	8005464 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800545e:	f06f 0302 	mvn.w	r3, #2
 8005462:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005464:	69fb      	ldr	r3, [r7, #28]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548a:	f3ef 8305 	mrs	r3, IPSR
 800548e:	617b      	str	r3, [r7, #20]
  return(result);
 8005490:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005492:	2b00      	cmp	r3, #0
 8005494:	d028      	beq.n	80054e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <osMessageQueueGet+0x34>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <osMessageQueueGet+0x34>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80054a8:	f06f 0303 	mvn.w	r3, #3
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e037      	b.n	8005520 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	461a      	mov	r2, r3
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	69b8      	ldr	r0, [r7, #24]
 80054be:	f000 fce7 	bl	8005e90 <xQueueReceiveFromISR>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d003      	beq.n	80054d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80054c8:	f06f 0302 	mvn.w	r3, #2
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e027      	b.n	8005520 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d024      	beq.n	8005520 <osMessageQueueGet+0xac>
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <osMessageQueueGet+0xb8>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	e01b      	b.n	8005520 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osMessageQueueGet+0x80>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80054f4:	f06f 0303 	mvn.w	r3, #3
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e011      	b.n	8005520 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	69b8      	ldr	r0, [r7, #24]
 8005502:	f000 fbe3 	bl	8005ccc <xQueueReceive>
 8005506:	4603      	mov	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d009      	beq.n	8005520 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005512:	f06f 0301 	mvn.w	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e002      	b.n	8005520 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800551a:	f06f 0302 	mvn.w	r3, #2
 800551e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005520:	69fb      	ldr	r3, [r7, #28]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a07      	ldr	r2, [pc, #28]	@ (800555c <vApplicationGetIdleTaskMemory+0x2c>)
 8005540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4a06      	ldr	r2, [pc, #24]	@ (8005560 <vApplicationGetIdleTaskMemory+0x30>)
 8005546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2280      	movs	r2, #128	@ 0x80
 800554c:	601a      	str	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000314 	.word	0x20000314
 8005560:	200003bc 	.word	0x200003bc

08005564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a07      	ldr	r2, [pc, #28]	@ (8005590 <vApplicationGetTimerTaskMemory+0x2c>)
 8005574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a06      	ldr	r2, [pc, #24]	@ (8005594 <vApplicationGetTimerTaskMemory+0x30>)
 800557a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	200005bc 	.word	0x200005bc
 8005594:	20000664 	.word	0x20000664

08005598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295
 80055b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f103 0208 	add.w	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 0208 	add.w	r2, r3, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d103      	bne.n	800565a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e00c      	b.n	8005674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3308      	adds	r3, #8
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e002      	b.n	8005668 <vListInsert+0x2e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d2f6      	bcs.n	8005662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6852      	ldr	r2, [r2, #4]
 80056cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d103      	bne.n	80056e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	1e5a      	subs	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800572c:	f002 f964 	bl	80079f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	3b01      	subs	r3, #1
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	22ff      	movs	r2, #255	@ 0xff
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	22ff      	movs	r2, #255	@ 0xff
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d114      	bne.n	80057ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01a      	beq.n	80057c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3310      	adds	r3, #16
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fa00 	bl	8006b94 <xTaskRemoveFromEventList>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d012      	beq.n	80057c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <xQueueGenericReset+0xd0>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	e009      	b.n	80057c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3310      	adds	r3, #16
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fef1 	bl	8005598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3324      	adds	r3, #36	@ 0x24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff feec 	bl	8005598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057c0:	f002 f94c 	bl	8007a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057c4:	2301      	movs	r3, #1
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08e      	sub	sp, #56	@ 0x38
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10b      	bne.n	8005800 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	e7fd      	b.n	80057fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <xQueueGenericCreateStatic+0x56>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <xQueueGenericCreateStatic+0x5a>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueGenericCreateStatic+0x5c>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <xQueueGenericCreateStatic+0x84>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <xQueueGenericCreateStatic+0x88>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <xQueueGenericCreateStatic+0x8a>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	61fb      	str	r3, [r7, #28]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800587a:	2350      	movs	r3, #80	@ 0x50
 800587c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b50      	cmp	r3, #80	@ 0x50
 8005882:	d00b      	beq.n	800589c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61bb      	str	r3, [r7, #24]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800589c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f840 	bl	8005944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3730      	adds	r7, #48	@ 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08a      	sub	sp, #40	@ 0x28
 80058d2:	af02      	add	r7, sp, #8
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	4613      	mov	r3, r2
 80058da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	613b      	str	r3, [r7, #16]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3350      	adds	r3, #80	@ 0x50
 8005908:	4618      	mov	r0, r3
 800590a:	f002 f997 	bl	8007c3c <pvPortMalloc>
 800590e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3350      	adds	r3, #80	@ 0x50
 800591e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005928:	79fa      	ldrb	r2, [r7, #7]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f805 	bl	8005944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800593a:	69bb      	ldr	r3, [r7, #24]
	}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e002      	b.n	8005966 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005972:	2101      	movs	r1, #1
 8005974:	69b8      	ldr	r0, [r7, #24]
 8005976:	f7ff fec3 	bl	8005700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	@ 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <xQueueGenericSend+0x34>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <xQueueGenericSend+0x42>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueGenericSend+0x46>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueGenericSend+0x48>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <xQueueGenericSend+0x64>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSend+0x72>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <xQueueGenericSend+0x76>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <xQueueGenericSend+0x78>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <xQueueGenericSend+0x94>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	623b      	str	r3, [r7, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	e7fd      	b.n	8005a1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a20:	f001 fa7e 	bl	8006f20 <xTaskGetSchedulerState>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <xQueueGenericSend+0xa4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <xQueueGenericSend+0xa8>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <xQueueGenericSend+0xaa>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <xQueueGenericSend+0xc6>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	61fb      	str	r3, [r7, #28]
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a52:	f001 ffd1 	bl	80079f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <xQueueGenericSend+0xdc>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d129      	bne.n	8005abc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a6e:	f000 fa91 	bl	8005f94 <prvCopyDataToQueue>
 8005a72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	3324      	adds	r3, #36	@ 0x24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 f887 	bl	8006b94 <xTaskRemoveFromEventList>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d013      	beq.n	8005ab4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	e00a      	b.n	8005ab4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005aa4:	4b39      	ldr	r3, [pc, #228]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ab4:	f001 ffd2 	bl	8007a5c <vPortExitCritical>
				return pdPASS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e063      	b.n	8005b84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ac2:	f001 ffcb 	bl	8007a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e05c      	b.n	8005b84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f8c1 	bl	8006c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ade:	f001 ffbd 	bl	8007a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae2:	f000 fe29 	bl	8006738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae6:	f001 ff87 	bl	80079f8 <vPortEnterCritical>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d103      	bne.n	8005b00 <xQueueGenericSend+0x174>
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b06:	b25b      	sxtb	r3, r3
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSend+0x18a>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b16:	f001 ffa1 	bl	8007a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b1a:	1d3a      	adds	r2, r7, #4
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f8b0 	bl	8006c88 <xTaskCheckForTimeOut>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d124      	bne.n	8005b78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b30:	f000 fb28 	bl	8006184 <prvIsQueueFull>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	3310      	adds	r3, #16
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ffd4 	bl	8006af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4a:	f000 fab3 	bl	80060b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b4e:	f000 fe01 	bl	8006754 <xTaskResumeAll>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f47f af7c 	bne.w	8005a52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	e772      	b.n	8005a52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b6e:	f000 faa1 	bl	80060b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b72:	f000 fdef 	bl	8006754 <xTaskResumeAll>
 8005b76:	e76c      	b.n	8005a52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b7a:	f000 fa9b 	bl	80060b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7e:	f000 fde9 	bl	8006754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3738      	adds	r7, #56	@ 0x38
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b090      	sub	sp, #64	@ 0x40
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSendFromISR+0x3e>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x42>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <xQueueGenericSendFromISR+0x44>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d103      	bne.n	8005bfe <xQueueGenericSendFromISR+0x6e>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <xQueueGenericSendFromISR+0x72>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueGenericSendFromISR+0x74>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c20:	f001 ffca 	bl	8007bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c24:	f3ef 8211 	mrs	r2, BASEPRI
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61fa      	str	r2, [r7, #28]
 8005c3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d302      	bcc.n	8005c52 <xQueueGenericSendFromISR+0xc2>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d12f      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c68:	f000 f994 	bl	8005f94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d112      	bne.n	8005c9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	3324      	adds	r3, #36	@ 0x24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 ff86 	bl	8006b94 <xTaskRemoveFromEventList>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	b25a      	sxtb	r2, r3
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005cb0:	e001      	b.n	8005cb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3740      	adds	r7, #64	@ 0x40
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <xQueueReceive+0x32>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	623b      	str	r3, [r7, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x40>
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <xQueueReceive+0x44>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <xQueueReceive+0x46>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <xQueueReceive+0x62>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61fb      	str	r3, [r7, #28]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2e:	f001 f8f7 	bl	8006f20 <xTaskGetSchedulerState>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <xQueueReceive+0x72>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <xQueueReceive+0x76>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueReceive+0x78>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xQueueReceive+0x94>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61bb      	str	r3, [r7, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d60:	f001 fe4a 	bl	80079f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01f      	beq.n	8005db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d74:	f000 f978 	bl	8006068 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 ff01 	bl	8006b94 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3c      	ldr	r3, [pc, #240]	@ (8005e8c <xQueueReceive+0x1c0>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da8:	f001 fe58 	bl	8007a5c <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e069      	b.n	8005e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f001 fe51 	bl	8007a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e062      	b.n	8005e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 ff47 	bl	8006c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f001 fe43 	bl	8007a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f000 fcaf 	bl	8006738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f001 fe0d 	bl	80079f8 <vPortEnterCritical>
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d103      	bne.n	8005df4 <xQueueReceive+0x128>
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x13e>
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0a:	f001 fe27 	bl	8007a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 ff36 	bl	8006c88 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e24:	f000 f998 	bl	8006158 <prvIsQueueEmpty>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	3324      	adds	r3, #36	@ 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fe5a 	bl	8006af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 f939 	bl	80060b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f000 fc87 	bl	8006754 <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d189      	bne.n	8005d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <xQueueReceive+0x1c0>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e780      	b.n	8005d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e60:	f000 f928 	bl	80060b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e64:	f000 fc76 	bl	8006754 <xTaskResumeAll>
 8005e68:	e77a      	b.n	8005d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e6c:	f000 f922 	bl	80060b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e70:	f000 fc70 	bl	8006754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e76:	f000 f96f 	bl	8006158 <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f43f af6f 	beq.w	8005d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3730      	adds	r7, #48	@ 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	@ 0x38
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	623b      	str	r3, [r7, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <xQueueReceiveFromISR+0x3c>
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <xQueueReceiveFromISR+0x40>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <xQueueReceiveFromISR+0x42>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	61fb      	str	r3, [r7, #28]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eee:	f001 fe63 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005ef2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	61ba      	str	r2, [r7, #24]
 8005f08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d02f      	beq.n	8005f7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f28:	f000 f89e 	bl	8006068 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d112      	bne.n	8005f64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	3310      	adds	r3, #16
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fe22 	bl	8006b94 <xTaskRemoveFromEventList>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e007      	b.n	8005f74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	b25a      	sxtb	r2, r3
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005f74:	2301      	movs	r3, #1
 8005f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f78:	e001      	b.n	8005f7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f383 8811 	msr	BASEPRI, r3
}
 8005f88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3738      	adds	r7, #56	@ 0x38
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10d      	bne.n	8005fce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d14d      	bne.n	8006056 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ffcc 	bl	8006f5c <xTaskPriorityDisinherit>
 8005fc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e043      	b.n	8006056 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d119      	bne.n	8006008 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6858      	ldr	r0, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	f002 fb21 	bl	8008626 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d32b      	bcc.n	8006056 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	e026      	b.n	8006056 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68d8      	ldr	r0, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	461a      	mov	r2, r3
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	f002 fb07 	bl	8008626 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	425b      	negs	r3, r3
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d207      	bcs.n	8006044 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	425b      	negs	r3, r3
 800603e:	441a      	add	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d105      	bne.n	8006056 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3b01      	subs	r3, #1
 8006054:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800605e:	697b      	ldr	r3, [r7, #20]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	441a      	add	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d303      	bcc.n	800609c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68d9      	ldr	r1, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	6838      	ldr	r0, [r7, #0]
 80060a8:	f002 fabd 	bl	8008626 <memcpy>
	}
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060bc:	f001 fc9c 	bl	80079f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060c8:	e011      	b.n	80060ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3324      	adds	r3, #36	@ 0x24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd5c 	bl	8006b94 <xTaskRemoveFromEventList>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060e2:	f000 fe35 	bl	8006d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dce9      	bgt.n	80060ca <prvUnlockQueue+0x16>
 80060f6:	e000      	b.n	80060fa <prvUnlockQueue+0x46>
					break;
 80060f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	22ff      	movs	r2, #255	@ 0xff
 80060fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006102:	f001 fcab 	bl	8007a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006106:	f001 fc77 	bl	80079f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006110:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006112:	e011      	b.n	8006138 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3310      	adds	r3, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fd37 	bl	8006b94 <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800612c:	f000 fe10 	bl	8006d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	3b01      	subs	r3, #1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613c:	2b00      	cmp	r3, #0
 800613e:	dce9      	bgt.n	8006114 <prvUnlockQueue+0x60>
 8006140:	e000      	b.n	8006144 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006142:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	22ff      	movs	r2, #255	@ 0xff
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800614c:	f001 fc86 	bl	8007a5c <vPortExitCritical>
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006160:	f001 fc4a 	bl	80079f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e001      	b.n	8006176 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f001 fc71 	bl	8007a5c <vPortExitCritical>

	return xReturn;
 800617a:	68fb      	ldr	r3, [r7, #12]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800618c:	f001 fc34 	bl	80079f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006198:	429a      	cmp	r2, r3
 800619a:	d102      	bne.n	80061a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e001      	b.n	80061a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 fc59 	bl	8007a5c <vPortExitCritical>

	return xReturn;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e014      	b.n	80061ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006204 <vQueueAddToRegistry+0x50>)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061d0:	490c      	ldr	r1, [pc, #48]	@ (8006204 <vQueueAddToRegistry+0x50>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061da:	4a0a      	ldr	r2, [pc, #40]	@ (8006204 <vQueueAddToRegistry+0x50>)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061e6:	e006      	b.n	80061f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d9e7      	bls.n	80061c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000a64 	.word	0x20000a64

08006208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006218:	f001 fbee 	bl	80079f8 <vPortEnterCritical>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006222:	b25b      	sxtb	r3, r3
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d103      	bne.n	8006232 <vQueueWaitForMessageRestricted+0x2a>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006238:	b25b      	sxtb	r3, r3
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d103      	bne.n	8006248 <vQueueWaitForMessageRestricted+0x40>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006248:	f001 fc08 	bl	8007a5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3324      	adds	r3, #36	@ 0x24
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fc6d 	bl	8006b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff26 	bl	80060b4 <prvUnlockQueue>
	}
 8006268:	bf00      	nop
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08e      	sub	sp, #56	@ 0x38
 8006274:	af04      	add	r7, sp, #16
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800627e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	623b      	str	r3, [r7, #32]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61fb      	str	r3, [r7, #28]
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	e7fd      	b.n	80062b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062ba:	23a8      	movs	r3, #168	@ 0xa8
 80062bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80062c2:	d00b      	beq.n	80062dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	61bb      	str	r3, [r7, #24]
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <xTaskCreateStatic+0xb2>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01b      	beq.n	8006322 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062fc:	2300      	movs	r3, #0
 80062fe:	9303      	str	r3, [sp, #12]
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	9302      	str	r3, [sp, #8]
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f851 	bl	80063bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800631a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800631c:	f000 f8f6 	bl	800650c <prvAddNewTaskToReadyList>
 8006320:	e001      	b.n	8006326 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006326:	697b      	ldr	r3, [r7, #20]
	}
 8006328:	4618      	mov	r0, r3
 800632a:	3728      	adds	r7, #40	@ 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	@ 0x30
 8006334:	af04      	add	r7, sp, #16
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fc79 	bl	8007c3c <pvPortMalloc>
 800634a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006352:	20a8      	movs	r0, #168	@ 0xa8
 8006354:	f001 fc72 	bl	8007c3c <pvPortMalloc>
 8006358:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	631a      	str	r2, [r3, #48]	@ 0x30
 8006366:	e005      	b.n	8006374 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f001 fd35 	bl	8007dd8 <vPortFree>
 800636e:	e001      	b.n	8006374 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d017      	beq.n	80063aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	2300      	movs	r3, #0
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f80f 	bl	80063bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800639e:	69f8      	ldr	r0, [r7, #28]
 80063a0:	f000 f8b4 	bl	800650c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063a4:	2301      	movs	r3, #1
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	e002      	b.n	80063b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063b0:	69bb      	ldr	r3, [r7, #24]
	}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	461a      	mov	r2, r3
 80063d4:	21a5      	movs	r1, #165	@ 0xa5
 80063d6:	f002 f84d 	bl	8008474 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063e4:	3b01      	subs	r3, #1
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617b      	str	r3, [r7, #20]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01f      	beq.n	800645c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e012      	b.n	8006448 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	7819      	ldrb	r1, [r3, #0]
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	3334      	adds	r3, #52	@ 0x34
 8006432:	460a      	mov	r2, r1
 8006434:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d006      	beq.n	8006450 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d9e9      	bls.n	8006422 <prvInitialiseNewTask+0x66>
 800644e:	e000      	b.n	8006452 <prvInitialiseNewTask+0x96>
			{
				break;
 8006450:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800645a:	e003      	b.n	8006464 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	2b37      	cmp	r3, #55	@ 0x37
 8006468:	d901      	bls.n	800646e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800646a:	2337      	movs	r3, #55	@ 0x37
 800646c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006472:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006478:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	2200      	movs	r2, #0
 800647e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	3304      	adds	r3, #4
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff f8a7 	bl	80055d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	3318      	adds	r3, #24
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f8a2 	bl	80055d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	3354      	adds	r3, #84	@ 0x54
 80064be:	224c      	movs	r2, #76	@ 0x4c
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 ffd6 	bl	8008474 <memset>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006500 <prvInitialiseNewTask+0x144>)
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006504 <prvInitialiseNewTask+0x148>)
 80064d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <prvInitialiseNewTask+0x14c>)
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	69b8      	ldr	r0, [r7, #24]
 80064e0:	f001 f95a 	bl	8007798 <pxPortInitialiseStack>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f6:	bf00      	nop
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20005f18 	.word	0x20005f18
 8006504:	20005f80 	.word	0x20005f80
 8006508:	20005fe8 	.word	0x20005fe8

0800650c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006514:	f001 fa70 	bl	80079f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006518:	4b2d      	ldr	r3, [pc, #180]	@ (80065d0 <prvAddNewTaskToReadyList+0xc4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a2c      	ldr	r2, [pc, #176]	@ (80065d0 <prvAddNewTaskToReadyList+0xc4>)
 8006520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006522:	4b2c      	ldr	r3, [pc, #176]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800652a:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006530:	4b27      	ldr	r3, [pc, #156]	@ (80065d0 <prvAddNewTaskToReadyList+0xc4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d110      	bne.n	800655a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006538:	f000 fc2e 	bl	8006d98 <prvInitialiseTaskLists>
 800653c:	e00d      	b.n	800655a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800653e:	4b26      	ldr	r3, [pc, #152]	@ (80065d8 <prvAddNewTaskToReadyList+0xcc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006546:	4b23      	ldr	r3, [pc, #140]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	429a      	cmp	r2, r3
 8006552:	d802      	bhi.n	800655a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006554:	4a1f      	ldr	r2, [pc, #124]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800655a:	4b20      	ldr	r3, [pc, #128]	@ (80065dc <prvAddNewTaskToReadyList+0xd0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3301      	adds	r3, #1
 8006560:	4a1e      	ldr	r2, [pc, #120]	@ (80065dc <prvAddNewTaskToReadyList+0xd0>)
 8006562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006564:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <prvAddNewTaskToReadyList+0xd0>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4b1b      	ldr	r3, [pc, #108]	@ (80065e0 <prvAddNewTaskToReadyList+0xd4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <prvAddNewTaskToReadyList+0x74>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	4a18      	ldr	r2, [pc, #96]	@ (80065e0 <prvAddNewTaskToReadyList+0xd4>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a15      	ldr	r2, [pc, #84]	@ (80065e4 <prvAddNewTaskToReadyList+0xd8>)
 800658e:	441a      	add	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7ff f82b 	bl	80055f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800659c:	f001 fa5e 	bl	8007a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065a0:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <prvAddNewTaskToReadyList+0xcc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00e      	beq.n	80065c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065a8:	4b0a      	ldr	r3, [pc, #40]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d207      	bcs.n	80065c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065b6:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <prvAddNewTaskToReadyList+0xdc>)
 80065b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000f78 	.word	0x20000f78
 80065d4:	20000aa4 	.word	0x20000aa4
 80065d8:	20000f84 	.word	0x20000f84
 80065dc:	20000f94 	.word	0x20000f94
 80065e0:	20000f80 	.word	0x20000f80
 80065e4:	20000aa8 	.word	0x20000aa8
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065fe:	4b14      	ldr	r3, [pc, #80]	@ (8006650 <vTaskDelay+0x64>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <vTaskDelay+0x32>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	60bb      	str	r3, [r7, #8]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800661e:	f000 f88b 	bl	8006738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd09 	bl	800703c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800662a:	f000 f893 	bl	8006754 <xTaskResumeAll>
 800662e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <vTaskDelay+0x68>)
 8006638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000fa0 	.word	0x20000fa0
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	@ 0x28
 800665c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006666:	463a      	mov	r2, r7
 8006668:	1d39      	adds	r1, r7, #4
 800666a:	f107 0308 	add.w	r3, r7, #8
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe ff5e 	bl	8005530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	9202      	str	r2, [sp, #8]
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	2300      	movs	r3, #0
 8006684:	460a      	mov	r2, r1
 8006686:	4924      	ldr	r1, [pc, #144]	@ (8006718 <vTaskStartScheduler+0xc0>)
 8006688:	4824      	ldr	r0, [pc, #144]	@ (800671c <vTaskStartScheduler+0xc4>)
 800668a:	f7ff fdf1 	bl	8006270 <xTaskCreateStatic>
 800668e:	4603      	mov	r3, r0
 8006690:	4a23      	ldr	r2, [pc, #140]	@ (8006720 <vTaskStartScheduler+0xc8>)
 8006692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006694:	4b22      	ldr	r3, [pc, #136]	@ (8006720 <vTaskStartScheduler+0xc8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800669c:	2301      	movs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e001      	b.n	80066a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d102      	bne.n	80066b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066ac:	f000 fd1a 	bl	80070e4 <xTimerCreateTimerTask>
 80066b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d11b      	bne.n	80066f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	613b      	str	r3, [r7, #16]
}
 80066ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066cc:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <vTaskStartScheduler+0xcc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3354      	adds	r3, #84	@ 0x54
 80066d2:	4a15      	ldr	r2, [pc, #84]	@ (8006728 <vTaskStartScheduler+0xd0>)
 80066d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066d6:	4b15      	ldr	r3, [pc, #84]	@ (800672c <vTaskStartScheduler+0xd4>)
 80066d8:	f04f 32ff 	mov.w	r2, #4294967295
 80066dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066de:	4b14      	ldr	r3, [pc, #80]	@ (8006730 <vTaskStartScheduler+0xd8>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066e4:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <vTaskStartScheduler+0xdc>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066ea:	f001 f8e1 	bl	80078b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066ee:	e00f      	b.n	8006710 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d10b      	bne.n	8006710 <vTaskStartScheduler+0xb8>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	60fb      	str	r3, [r7, #12]
}
 800670a:	bf00      	nop
 800670c:	bf00      	nop
 800670e:	e7fd      	b.n	800670c <vTaskStartScheduler+0xb4>
}
 8006710:	bf00      	nop
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	080091d4 	.word	0x080091d4
 800671c:	08006d69 	.word	0x08006d69
 8006720:	20000f9c 	.word	0x20000f9c
 8006724:	20000aa4 	.word	0x20000aa4
 8006728:	2000001c 	.word	0x2000001c
 800672c:	20000f98 	.word	0x20000f98
 8006730:	20000f84 	.word	0x20000f84
 8006734:	20000f7c 	.word	0x20000f7c

08006738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800673c:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <vTaskSuspendAll+0x18>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a03      	ldr	r2, [pc, #12]	@ (8006750 <vTaskSuspendAll+0x18>)
 8006744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006746:	bf00      	nop
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000fa0 	.word	0x20000fa0

08006754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006762:	4b42      	ldr	r3, [pc, #264]	@ (800686c <xTaskResumeAll+0x118>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <xTaskResumeAll+0x2e>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	603b      	str	r3, [r7, #0]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006782:	f001 f939 	bl	80079f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006786:	4b39      	ldr	r3, [pc, #228]	@ (800686c <xTaskResumeAll+0x118>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a37      	ldr	r2, [pc, #220]	@ (800686c <xTaskResumeAll+0x118>)
 800678e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006790:	4b36      	ldr	r3, [pc, #216]	@ (800686c <xTaskResumeAll+0x118>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d162      	bne.n	800685e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006798:	4b35      	ldr	r3, [pc, #212]	@ (8006870 <xTaskResumeAll+0x11c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d05e      	beq.n	800685e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a0:	e02f      	b.n	8006802 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a2:	4b34      	ldr	r3, [pc, #208]	@ (8006874 <xTaskResumeAll+0x120>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3318      	adds	r3, #24
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe ff7c 	bl	80056ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe ff77 	bl	80056ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006878 <xTaskResumeAll+0x124>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d903      	bls.n	80067d2 <xTaskResumeAll+0x7e>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006878 <xTaskResumeAll+0x124>)
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4a27      	ldr	r2, [pc, #156]	@ (800687c <xTaskResumeAll+0x128>)
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe ff02 	bl	80055f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f2:	4b23      	ldr	r3, [pc, #140]	@ (8006880 <xTaskResumeAll+0x12c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d302      	bcc.n	8006802 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80067fc:	4b21      	ldr	r3, [pc, #132]	@ (8006884 <xTaskResumeAll+0x130>)
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006802:	4b1c      	ldr	r3, [pc, #112]	@ (8006874 <xTaskResumeAll+0x120>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1cb      	bne.n	80067a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006810:	f000 fb66 	bl	8006ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006814:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <xTaskResumeAll+0x134>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006820:	f000 f846 	bl	80068b0 <xTaskIncrementTick>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800682a:	4b16      	ldr	r3, [pc, #88]	@ (8006884 <xTaskResumeAll+0x130>)
 800682c:	2201      	movs	r2, #1
 800682e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3b01      	subs	r3, #1
 8006834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f1      	bne.n	8006820 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800683c:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <xTaskResumeAll+0x134>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <xTaskResumeAll+0x130>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800684e:	4b0f      	ldr	r3, [pc, #60]	@ (800688c <xTaskResumeAll+0x138>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800685e:	f001 f8fd 	bl	8007a5c <vPortExitCritical>

	return xAlreadyYielded;
 8006862:	68bb      	ldr	r3, [r7, #8]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000fa0 	.word	0x20000fa0
 8006870:	20000f78 	.word	0x20000f78
 8006874:	20000f38 	.word	0x20000f38
 8006878:	20000f80 	.word	0x20000f80
 800687c:	20000aa8 	.word	0x20000aa8
 8006880:	20000aa4 	.word	0x20000aa4
 8006884:	20000f8c 	.word	0x20000f8c
 8006888:	20000f88 	.word	0x20000f88
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006896:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <xTaskGetTickCount+0x1c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800689c:	687b      	ldr	r3, [r7, #4]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000f7c 	.word	0x20000f7c

080068b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ba:	4b4f      	ldr	r3, [pc, #316]	@ (80069f8 <xTaskIncrementTick+0x148>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8090 	bne.w	80069e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068c4:	4b4d      	ldr	r3, [pc, #308]	@ (80069fc <xTaskIncrementTick+0x14c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068cc:	4a4b      	ldr	r2, [pc, #300]	@ (80069fc <xTaskIncrementTick+0x14c>)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d121      	bne.n	800691c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80068d8:	4b49      	ldr	r3, [pc, #292]	@ (8006a00 <xTaskIncrementTick+0x150>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	603b      	str	r3, [r7, #0]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <xTaskIncrementTick+0x46>
 80068fa:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <xTaskIncrementTick+0x150>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	4b40      	ldr	r3, [pc, #256]	@ (8006a04 <xTaskIncrementTick+0x154>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a3e      	ldr	r2, [pc, #248]	@ (8006a00 <xTaskIncrementTick+0x150>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4a3e      	ldr	r2, [pc, #248]	@ (8006a04 <xTaskIncrementTick+0x154>)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a08 <xTaskIncrementTick+0x158>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a3c      	ldr	r2, [pc, #240]	@ (8006a08 <xTaskIncrementTick+0x158>)
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	f000 fae2 	bl	8006ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800691c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a0c <xTaskIncrementTick+0x15c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d349      	bcc.n	80069ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006926:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <xTaskIncrementTick+0x150>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006930:	4b36      	ldr	r3, [pc, #216]	@ (8006a0c <xTaskIncrementTick+0x15c>)
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	601a      	str	r2, [r3, #0]
					break;
 8006938:	e03f      	b.n	80069ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693a:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <xTaskIncrementTick+0x150>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006952:	4a2e      	ldr	r2, [pc, #184]	@ (8006a0c <xTaskIncrementTick+0x15c>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006958:	e02f      	b.n	80069ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fea4 	bl	80056ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3318      	adds	r3, #24
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fe9b 	bl	80056ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697a:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <xTaskIncrementTick+0x160>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d903      	bls.n	800698a <xTaskIncrementTick+0xda>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a22      	ldr	r2, [pc, #136]	@ (8006a10 <xTaskIncrementTick+0x160>)
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <xTaskIncrementTick+0x164>)
 8006998:	441a      	add	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7fe fe26 	bl	80055f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <xTaskIncrementTick+0x168>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3b8      	bcc.n	8006926 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b8:	e7b5      	b.n	8006926 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069ba:	4b17      	ldr	r3, [pc, #92]	@ (8006a18 <xTaskIncrementTick+0x168>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4914      	ldr	r1, [pc, #80]	@ (8006a14 <xTaskIncrementTick+0x164>)
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d901      	bls.n	80069d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069d6:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <xTaskIncrementTick+0x16c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e004      	b.n	80069ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a20 <xTaskIncrementTick+0x170>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006a20 <xTaskIncrementTick+0x170>)
 80069ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000fa0 	.word	0x20000fa0
 80069fc:	20000f7c 	.word	0x20000f7c
 8006a00:	20000f30 	.word	0x20000f30
 8006a04:	20000f34 	.word	0x20000f34
 8006a08:	20000f90 	.word	0x20000f90
 8006a0c:	20000f98 	.word	0x20000f98
 8006a10:	20000f80 	.word	0x20000f80
 8006a14:	20000aa8 	.word	0x20000aa8
 8006a18:	20000aa4 	.word	0x20000aa4
 8006a1c:	20000f8c 	.word	0x20000f8c
 8006a20:	20000f88 	.word	0x20000f88

08006a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad8 <vTaskSwitchContext+0xb4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a32:	4b2a      	ldr	r3, [pc, #168]	@ (8006adc <vTaskSwitchContext+0xb8>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a38:	e047      	b.n	8006aca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006a3a:	4b28      	ldr	r3, [pc, #160]	@ (8006adc <vTaskSwitchContext+0xb8>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a40:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <vTaskSwitchContext+0xbc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e011      	b.n	8006a6c <vTaskSwitchContext+0x48>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <vTaskSwitchContext+0x42>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <vTaskSwitchContext+0x3e>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	491d      	ldr	r1, [pc, #116]	@ (8006ae4 <vTaskSwitchContext+0xc0>)
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0e3      	beq.n	8006a48 <vTaskSwitchContext+0x24>
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <vTaskSwitchContext+0xc0>)
 8006a8c:	4413      	add	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d104      	bne.n	8006ab0 <vTaskSwitchContext+0x8c>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae8 <vTaskSwitchContext+0xc4>)
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <vTaskSwitchContext+0xbc>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ac0:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <vTaskSwitchContext+0xc4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3354      	adds	r3, #84	@ 0x54
 8006ac6:	4a09      	ldr	r2, [pc, #36]	@ (8006aec <vTaskSwitchContext+0xc8>)
 8006ac8:	6013      	str	r3, [r2, #0]
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000fa0 	.word	0x20000fa0
 8006adc:	20000f8c 	.word	0x20000f8c
 8006ae0:	20000f80 	.word	0x20000f80
 8006ae4:	20000aa8 	.word	0x20000aa8
 8006ae8:	20000aa4 	.word	0x20000aa4
 8006aec:	2000001c 	.word	0x2000001c

08006af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b18:	4b07      	ldr	r3, [pc, #28]	@ (8006b38 <vTaskPlaceOnEventList+0x48>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fe fd8a 	bl	800563a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b26:	2101      	movs	r1, #1
 8006b28:	6838      	ldr	r0, [r7, #0]
 8006b2a:	f000 fa87 	bl	800703c <prvAddCurrentTaskToDelayedList>
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000aa4 	.word	0x20000aa4

08006b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b66:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7fe fd3f 	bl	80055f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68b8      	ldr	r0, [r7, #8]
 8006b84:	f000 fa5a 	bl	800703c <prvAddCurrentTaskToDelayedList>
	}
 8006b88:	bf00      	nop
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000aa4 	.word	0x20000aa4

08006b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60fb      	str	r3, [r7, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fd70 	bl	80056ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <xTaskRemoveFromEventList+0xb0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11d      	bne.n	8006c10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe fd67 	bl	80056ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be2:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <xTaskRemoveFromEventList+0xb4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d903      	bls.n	8006bf2 <xTaskRemoveFromEventList+0x5e>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <xTaskRemoveFromEventList+0xb4>)
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a13      	ldr	r2, [pc, #76]	@ (8006c4c <xTaskRemoveFromEventList+0xb8>)
 8006c00:	441a      	add	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fe fcf2 	bl	80055f2 <vListInsertEnd>
 8006c0e:	e005      	b.n	8006c1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4619      	mov	r1, r3
 8006c16:	480e      	ldr	r0, [pc, #56]	@ (8006c50 <xTaskRemoveFromEventList+0xbc>)
 8006c18:	f7fe fceb 	bl	80055f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <xTaskRemoveFromEventList+0xc0>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d905      	bls.n	8006c36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <xTaskRemoveFromEventList+0xc4>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e001      	b.n	8006c3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c3a:	697b      	ldr	r3, [r7, #20]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000fa0 	.word	0x20000fa0
 8006c48:	20000f80 	.word	0x20000f80
 8006c4c:	20000aa8 	.word	0x20000aa8
 8006c50:	20000f38 	.word	0x20000f38
 8006c54:	20000aa4 	.word	0x20000aa4
 8006c58:	20000f8c 	.word	0x20000f8c

08006c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <vTaskInternalSetTimeOutState+0x24>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c6c:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <vTaskInternalSetTimeOutState+0x28>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000f90 	.word	0x20000f90
 8006c84:	20000f7c 	.word	0x20000f7c

08006c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	613b      	str	r3, [r7, #16]
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60fb      	str	r3, [r7, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006cce:	f000 fe93 	bl	80079f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d48 <xTaskCheckForTimeOut+0xc0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d102      	bne.n	8006cf2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e023      	b.n	8006d3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b15      	ldr	r3, [pc, #84]	@ (8006d4c <xTaskCheckForTimeOut+0xc4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d007      	beq.n	8006d0e <xTaskCheckForTimeOut+0x86>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d302      	bcc.n	8006d0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e015      	b.n	8006d3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d20b      	bcs.n	8006d30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ff99 	bl	8006c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	e004      	b.n	8006d3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d3a:	f000 fe8f 	bl	8007a5c <vPortExitCritical>

	return xReturn;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000f7c 	.word	0x20000f7c
 8006d4c:	20000f90 	.word	0x20000f90

08006d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d54:	4b03      	ldr	r3, [pc, #12]	@ (8006d64 <vTaskMissedYield+0x14>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	20000f8c 	.word	0x20000f8c

08006d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d70:	f000 f852 	bl	8006e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d74:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <prvIdleTask+0x28>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d9f9      	bls.n	8006d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d7c:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <prvIdleTask+0x2c>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d8c:	e7f0      	b.n	8006d70 <prvIdleTask+0x8>
 8006d8e:	bf00      	nop
 8006d90:	20000aa8 	.word	0x20000aa8
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d9e:	2300      	movs	r3, #0
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	e00c      	b.n	8006dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4a12      	ldr	r2, [pc, #72]	@ (8006df8 <prvInitialiseTaskLists+0x60>)
 8006db0:	4413      	add	r3, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fbf0 	bl	8005598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b37      	cmp	r3, #55	@ 0x37
 8006dc2:	d9ef      	bls.n	8006da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dc4:	480d      	ldr	r0, [pc, #52]	@ (8006dfc <prvInitialiseTaskLists+0x64>)
 8006dc6:	f7fe fbe7 	bl	8005598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dca:	480d      	ldr	r0, [pc, #52]	@ (8006e00 <prvInitialiseTaskLists+0x68>)
 8006dcc:	f7fe fbe4 	bl	8005598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dd0:	480c      	ldr	r0, [pc, #48]	@ (8006e04 <prvInitialiseTaskLists+0x6c>)
 8006dd2:	f7fe fbe1 	bl	8005598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dd6:	480c      	ldr	r0, [pc, #48]	@ (8006e08 <prvInitialiseTaskLists+0x70>)
 8006dd8:	f7fe fbde 	bl	8005598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ddc:	480b      	ldr	r0, [pc, #44]	@ (8006e0c <prvInitialiseTaskLists+0x74>)
 8006dde:	f7fe fbdb 	bl	8005598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006de2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <prvInitialiseTaskLists+0x78>)
 8006de4:	4a05      	ldr	r2, [pc, #20]	@ (8006dfc <prvInitialiseTaskLists+0x64>)
 8006de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <prvInitialiseTaskLists+0x7c>)
 8006dea:	4a05      	ldr	r2, [pc, #20]	@ (8006e00 <prvInitialiseTaskLists+0x68>)
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000aa8 	.word	0x20000aa8
 8006dfc:	20000f08 	.word	0x20000f08
 8006e00:	20000f1c 	.word	0x20000f1c
 8006e04:	20000f38 	.word	0x20000f38
 8006e08:	20000f4c 	.word	0x20000f4c
 8006e0c:	20000f64 	.word	0x20000f64
 8006e10:	20000f30 	.word	0x20000f30
 8006e14:	20000f34 	.word	0x20000f34

08006e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e1e:	e019      	b.n	8006e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e20:	f000 fdea 	bl	80079f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e24:	4b10      	ldr	r3, [pc, #64]	@ (8006e68 <prvCheckTasksWaitingTermination+0x50>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fc3b 	bl	80056ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <prvCheckTasksWaitingTermination+0x54>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e6c <prvCheckTasksWaitingTermination+0x54>)
 8006e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <prvCheckTasksWaitingTermination+0x58>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	4a0a      	ldr	r2, [pc, #40]	@ (8006e70 <prvCheckTasksWaitingTermination+0x58>)
 8006e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e4a:	f000 fe07 	bl	8007a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f810 	bl	8006e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <prvCheckTasksWaitingTermination+0x58>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e1      	bne.n	8006e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000f4c 	.word	0x20000f4c
 8006e6c:	20000f78 	.word	0x20000f78
 8006e70:	20000f60 	.word	0x20000f60

08006e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3354      	adds	r3, #84	@ 0x54
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fb0f 	bl	80084a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 ff9f 	bl	8007dd8 <vPortFree>
				vPortFree( pxTCB );
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 ff9c 	bl	8007dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ea0:	e019      	b.n	8006ed6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d103      	bne.n	8006eb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 ff93 	bl	8007dd8 <vPortFree>
	}
 8006eb2:	e010      	b.n	8006ed6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d00b      	beq.n	8006ed6 <prvDeleteTCB+0x62>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <prvDeleteTCB+0x5e>
	}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <prvResetNextTaskUnblockTime+0x38>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <prvResetNextTaskUnblockTime+0x3c>)
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef8:	e008      	b.n	8006f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efa:	4b07      	ldr	r3, [pc, #28]	@ (8006f18 <prvResetNextTaskUnblockTime+0x38>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a04      	ldr	r2, [pc, #16]	@ (8006f1c <prvResetNextTaskUnblockTime+0x3c>)
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	20000f30 	.word	0x20000f30
 8006f1c:	20000f98 	.word	0x20000f98

08006f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f26:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <xTaskGetSchedulerState+0x34>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e008      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b08      	ldr	r3, [pc, #32]	@ (8006f58 <xTaskGetSchedulerState+0x38>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e001      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f46:	687b      	ldr	r3, [r7, #4]
	}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	20000f84 	.word	0x20000f84
 8006f58:	20000fa0 	.word	0x20000fa0

08006f5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d058      	beq.n	8007024 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f72:	4b2f      	ldr	r3, [pc, #188]	@ (8007030 <xTaskPriorityDisinherit+0xd4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d00b      	beq.n	8006f94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60fb      	str	r3, [r7, #12]
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	e7fd      	b.n	8006f90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60bb      	str	r3, [r7, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d02c      	beq.n	8007024 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d128      	bne.n	8007024 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fb68 	bl	80056ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <xTaskPriorityDisinherit+0xd8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d903      	bls.n	8007004 <xTaskPriorityDisinherit+0xa8>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a0c      	ldr	r2, [pc, #48]	@ (8007034 <xTaskPriorityDisinherit+0xd8>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <xTaskPriorityDisinherit+0xdc>)
 8007012:	441a      	add	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fe fae9 	bl	80055f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007024:	697b      	ldr	r3, [r7, #20]
	}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000aa4 	.word	0x20000aa4
 8007034:	20000f80 	.word	0x20000f80
 8007038:	20000aa8 	.word	0x20000aa8

0800703c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007046:	4b21      	ldr	r3, [pc, #132]	@ (80070cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800704c:	4b20      	ldr	r3, [pc, #128]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3304      	adds	r3, #4
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fb2a 	bl	80056ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d10a      	bne.n	8007076 <prvAddCurrentTaskToDelayedList+0x3a>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	4b1a      	ldr	r3, [pc, #104]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4819      	ldr	r0, [pc, #100]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007070:	f7fe fabf 	bl	80055f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007074:	e026      	b.n	80070c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800707e:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	429a      	cmp	r2, r3
 800708c:	d209      	bcs.n	80070a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800708e:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b0f      	ldr	r3, [pc, #60]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7fe facd 	bl	800563a <vListInsert>
}
 80070a0:	e010      	b.n	80070c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a2:	4b0e      	ldr	r3, [pc, #56]	@ (80070dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b0a      	ldr	r3, [pc, #40]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	f7fe fac3 	bl	800563a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070b4:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d202      	bcs.n	80070c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070be:	4a08      	ldr	r2, [pc, #32]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6013      	str	r3, [r2, #0]
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000f7c 	.word	0x20000f7c
 80070d0:	20000aa4 	.word	0x20000aa4
 80070d4:	20000f64 	.word	0x20000f64
 80070d8:	20000f34 	.word	0x20000f34
 80070dc:	20000f30 	.word	0x20000f30
 80070e0:	20000f98 	.word	0x20000f98

080070e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	@ 0x28
 80070e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ee:	f000 fb13 	bl	8007718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <xTimerCreateTimerTask+0x84>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d021      	beq.n	800713e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007102:	1d3a      	adds	r2, r7, #4
 8007104:	f107 0108 	add.w	r1, r7, #8
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fa29 	bl	8005564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	9202      	str	r2, [sp, #8]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	2302      	movs	r3, #2
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2300      	movs	r3, #0
 8007122:	460a      	mov	r2, r1
 8007124:	4911      	ldr	r1, [pc, #68]	@ (800716c <xTimerCreateTimerTask+0x88>)
 8007126:	4812      	ldr	r0, [pc, #72]	@ (8007170 <xTimerCreateTimerTask+0x8c>)
 8007128:	f7ff f8a2 	bl	8006270 <xTaskCreateStatic>
 800712c:	4603      	mov	r3, r0
 800712e:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <xTimerCreateTimerTask+0x90>)
 8007130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <xTimerCreateTimerTask+0x90>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800713a:	2301      	movs	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10b      	bne.n	800715c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	613b      	str	r3, [r7, #16]
}
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	e7fd      	b.n	8007158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800715c:	697b      	ldr	r3, [r7, #20]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000fd4 	.word	0x20000fd4
 800716c:	080091dc 	.word	0x080091dc
 8007170:	080072b1 	.word	0x080072b1
 8007174:	20000fd8 	.word	0x20000fd8

08007178 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	@ 0x28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	623b      	str	r3, [r7, #32]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071a8:	4b19      	ldr	r3, [pc, #100]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d02a      	beq.n	8007206 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b05      	cmp	r3, #5
 80071c0:	dc18      	bgt.n	80071f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071c2:	f7ff fead 	bl	8006f20 <xTaskGetSchedulerState>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d109      	bne.n	80071e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071cc:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	f107 0110 	add.w	r1, r7, #16
 80071d4:	2300      	movs	r3, #0
 80071d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d8:	f7fe fbd8 	bl	800598c <xQueueGenericSend>
 80071dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80071de:	e012      	b.n	8007206 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	f107 0110 	add.w	r1, r7, #16
 80071e8:	2300      	movs	r3, #0
 80071ea:	2200      	movs	r2, #0
 80071ec:	f7fe fbce 	bl	800598c <xQueueGenericSend>
 80071f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80071f2:	e008      	b.n	8007206 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071f4:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	f107 0110 	add.w	r1, r7, #16
 80071fc:	2300      	movs	r3, #0
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	f7fe fcc6 	bl	8005b90 <xQueueGenericSendFromISR>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	@ 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000fd4 	.word	0x20000fd4

08007214 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af02      	add	r7, sp, #8
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800721e:	4b23      	ldr	r3, [pc, #140]	@ (80072ac <prvProcessExpiredTimer+0x98>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3304      	adds	r3, #4
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fa3d 	bl	80056ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d023      	beq.n	8007288 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	18d1      	adds	r1, r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	6978      	ldr	r0, [r7, #20]
 800724e:	f000 f8d5 	bl	80073fc <prvInsertTimerInActiveList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d020      	beq.n	800729a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007258:	2300      	movs	r3, #0
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2300      	movs	r3, #0
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	2100      	movs	r1, #0
 8007262:	6978      	ldr	r0, [r7, #20]
 8007264:	f7ff ff88 	bl	8007178 <xTimerGenericCommand>
 8007268:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d114      	bne.n	800729a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	4798      	blx	r3
}
 80072a2:	bf00      	nop
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000fcc 	.word	0x20000fcc

080072b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072b8:	f107 0308 	add.w	r3, r7, #8
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f859 	bl	8007374 <prvGetNextExpireTime>
 80072c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4619      	mov	r1, r3
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f805 	bl	80072d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072ce:	f000 f8d7 	bl	8007480 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072d2:	bf00      	nop
 80072d4:	e7f0      	b.n	80072b8 <prvTimerTask+0x8>
	...

080072d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072e2:	f7ff fa29 	bl	8006738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072e6:	f107 0308 	add.w	r3, r7, #8
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f866 	bl	80073bc <prvSampleTimeNow>
 80072f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d130      	bne.n	800735a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <prvProcessTimerOrBlockTask+0x3c>
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	429a      	cmp	r2, r3
 8007304:	d806      	bhi.n	8007314 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007306:	f7ff fa25 	bl	8006754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff81 	bl	8007214 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007312:	e024      	b.n	800735e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800731a:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <prvProcessTimerOrBlockTask+0x90>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <prvProcessTimerOrBlockTask+0x50>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <prvProcessTimerOrBlockTask+0x52>
 8007328:	2300      	movs	r3, #0
 800732a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <prvProcessTimerOrBlockTask+0x94>)
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	4619      	mov	r1, r3
 800733a:	f7fe ff65 	bl	8006208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800733e:	f7ff fa09 	bl	8006754 <xTaskResumeAll>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <prvProcessTimerOrBlockTask+0x98>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
}
 8007358:	e001      	b.n	800735e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800735a:	f7ff f9fb 	bl	8006754 <xTaskResumeAll>
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000fd0 	.word	0x20000fd0
 800736c:	20000fd4 	.word	0x20000fd4
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800737c:	4b0e      	ldr	r3, [pc, #56]	@ (80073b8 <prvGetNextExpireTime+0x44>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <prvGetNextExpireTime+0x16>
 8007386:	2201      	movs	r2, #1
 8007388:	e000      	b.n	800738c <prvGetNextExpireTime+0x18>
 800738a:	2200      	movs	r2, #0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007398:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <prvGetNextExpireTime+0x44>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e001      	b.n	80073a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073a8:	68fb      	ldr	r3, [r7, #12]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000fcc 	.word	0x20000fcc

080073bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073c4:	f7ff fa64 	bl	8006890 <xTaskGetTickCount>
 80073c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <prvSampleTimeNow+0x3c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d205      	bcs.n	80073e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073d4:	f000 f93a 	bl	800764c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e002      	b.n	80073e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073e6:	4a04      	ldr	r2, [pc, #16]	@ (80073f8 <prvSampleTimeNow+0x3c>)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000fdc 	.word	0x20000fdc

080073fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	429a      	cmp	r2, r3
 8007420:	d812      	bhi.n	8007448 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	1ad2      	subs	r2, r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	429a      	cmp	r2, r3
 800742e:	d302      	bcc.n	8007436 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e01b      	b.n	800746e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <prvInsertTimerInActiveList+0x7c>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7fe f8fa 	bl	800563a <vListInsert>
 8007446:	e012      	b.n	800746e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d206      	bcs.n	800745e <prvInsertTimerInActiveList+0x62>
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e007      	b.n	800746e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800745e:	4b07      	ldr	r3, [pc, #28]	@ (800747c <prvInsertTimerInActiveList+0x80>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fe f8e6 	bl	800563a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800746e:	697b      	ldr	r3, [r7, #20]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000fd0 	.word	0x20000fd0
 800747c:	20000fcc 	.word	0x20000fcc

08007480 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	@ 0x38
 8007484:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007486:	e0ce      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	da19      	bge.n	80074c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	3304      	adds	r3, #4
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	61fb      	str	r3, [r7, #28]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b8:	6850      	ldr	r0, [r2, #4]
 80074ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074bc:	6892      	ldr	r2, [r2, #8]
 80074be:	4611      	mov	r1, r2
 80074c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f2c0 80ae 	blt.w	8007626 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	3304      	adds	r3, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe f8e6 	bl	80056ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074e0:	463b      	mov	r3, r7
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff ff6a 	bl	80073bc <prvSampleTimeNow>
 80074e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b09      	cmp	r3, #9
 80074ee:	f200 8097 	bhi.w	8007620 <prvProcessReceivedCommands+0x1a0>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <prvProcessReceivedCommands+0x78>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007521 	.word	0x08007521
 8007504:	08007597 	.word	0x08007597
 8007508:	080075ab 	.word	0x080075ab
 800750c:	080075f7 	.word	0x080075f7
 8007510:	08007521 	.word	0x08007521
 8007514:	08007521 	.word	0x08007521
 8007518:	08007597 	.word	0x08007597
 800751c:	080075ab 	.word	0x080075ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	18d1      	adds	r1, r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007540:	f7ff ff5c 	bl	80073fc <prvInsertTimerInActiveList>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d06c      	beq.n	8007624 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007550:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d061      	beq.n	8007624 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	441a      	add	r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	2300      	movs	r3, #0
 800756e:	2100      	movs	r1, #0
 8007570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007572:	f7ff fe01 	bl	8007178 <xTimerGenericCommand>
 8007576:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d152      	bne.n	8007624 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61bb      	str	r3, [r7, #24]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075a8:	e03d      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	617b      	str	r3, [r7, #20]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	18d1      	adds	r1, r2, r3
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075f0:	f7ff ff04 	bl	80073fc <prvInsertTimerInActiveList>
					break;
 80075f4:	e017      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d103      	bne.n	800760c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007606:	f000 fbe7 	bl	8007dd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800760a:	e00c      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	b2da      	uxtb	r2, r3
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800761e:	e002      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007620:	bf00      	nop
 8007622:	e000      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
					break;
 8007624:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <prvProcessReceivedCommands+0x1c8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	1d39      	adds	r1, r7, #4
 800762c:	2200      	movs	r2, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fb4c 	bl	8005ccc <xQueueReceive>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	f47f af26 	bne.w	8007488 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	3730      	adds	r7, #48	@ 0x30
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000fd4 	.word	0x20000fd4

0800764c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007652:	e049      	b.n	80076e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007654:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765e:	4b2c      	ldr	r3, [pc, #176]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe f81d 	bl	80056ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02f      	beq.n	80076e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d90e      	bls.n	80076b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7fd ffc2 	bl	800563a <vListInsert>
 80076b6:	e017      	b.n	80076e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076b8:	2300      	movs	r3, #0
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2300      	movs	r3, #0
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	2100      	movs	r1, #0
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff fd58 	bl	8007178 <xTimerGenericCommand>
 80076c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	603b      	str	r3, [r7, #0]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e8:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1b0      	bne.n	8007654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076f2:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076f8:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <prvSwitchTimerLists+0xc8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a04      	ldr	r2, [pc, #16]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007700:	4a04      	ldr	r2, [pc, #16]	@ (8007714 <prvSwitchTimerLists+0xc8>)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	6013      	str	r3, [r2, #0]
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000fcc 	.word	0x20000fcc
 8007714:	20000fd0 	.word	0x20000fd0

08007718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800771e:	f000 f96b 	bl	80079f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007722:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d120      	bne.n	800776c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800772a:	4814      	ldr	r0, [pc, #80]	@ (800777c <prvCheckForValidListAndQueue+0x64>)
 800772c:	f7fd ff34 	bl	8005598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007730:	4813      	ldr	r0, [pc, #76]	@ (8007780 <prvCheckForValidListAndQueue+0x68>)
 8007732:	f7fd ff31 	bl	8005598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007736:	4b13      	ldr	r3, [pc, #76]	@ (8007784 <prvCheckForValidListAndQueue+0x6c>)
 8007738:	4a10      	ldr	r2, [pc, #64]	@ (800777c <prvCheckForValidListAndQueue+0x64>)
 800773a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800773c:	4b12      	ldr	r3, [pc, #72]	@ (8007788 <prvCheckForValidListAndQueue+0x70>)
 800773e:	4a10      	ldr	r2, [pc, #64]	@ (8007780 <prvCheckForValidListAndQueue+0x68>)
 8007740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4b11      	ldr	r3, [pc, #68]	@ (800778c <prvCheckForValidListAndQueue+0x74>)
 8007748:	4a11      	ldr	r2, [pc, #68]	@ (8007790 <prvCheckForValidListAndQueue+0x78>)
 800774a:	2110      	movs	r1, #16
 800774c:	200a      	movs	r0, #10
 800774e:	f7fe f841 	bl	80057d4 <xQueueGenericCreateStatic>
 8007752:	4603      	mov	r3, r0
 8007754:	4a08      	ldr	r2, [pc, #32]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007758:	4b07      	ldr	r3, [pc, #28]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007760:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	490b      	ldr	r1, [pc, #44]	@ (8007794 <prvCheckForValidListAndQueue+0x7c>)
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fd24 	bl	80061b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800776c:	f000 f976 	bl	8007a5c <vPortExitCritical>
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000fd4 	.word	0x20000fd4
 800777c:	20000fa4 	.word	0x20000fa4
 8007780:	20000fb8 	.word	0x20000fb8
 8007784:	20000fcc 	.word	0x20000fcc
 8007788:	20000fd0 	.word	0x20000fd0
 800778c:	20001080 	.word	0x20001080
 8007790:	20000fe0 	.word	0x20000fe0
 8007794:	080091e4 	.word	0x080091e4

08007798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3b04      	subs	r3, #4
 80077a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 0201 	bic.w	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b04      	subs	r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c8:	4a0c      	ldr	r2, [pc, #48]	@ (80077fc <pxPortInitialiseStack+0x64>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3b14      	subs	r3, #20
 80077d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3b04      	subs	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f06f 0202 	mvn.w	r2, #2
 80077e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b20      	subs	r3, #32
 80077ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ee:	68fb      	ldr	r3, [r7, #12]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	08007801 	.word	0x08007801

08007800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800780a:	4b13      	ldr	r3, [pc, #76]	@ (8007858 <prvTaskExitError+0x58>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d00b      	beq.n	800782c <prvTaskExitError+0x2c>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	e7fd      	b.n	8007828 <prvTaskExitError+0x28>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	60bb      	str	r3, [r7, #8]
}
 800783e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007840:	bf00      	nop
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0fc      	beq.n	8007842 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	2000000c 	.word	0x2000000c
 800785c:	00000000 	.word	0x00000000

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	20000aa4 	.word	0x20000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007888:	4808      	ldr	r0, [pc, #32]	@ (80078ac <prvPortStartFirstTask+0x24>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8814 	msr	CONTROL, r0
 800789a:	b662      	cpsie	i
 800789c:	b661      	cpsie	f
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	df00      	svc	0
 80078a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078aa:	bf00      	nop
 80078ac:	e000ed08 	.word	0xe000ed08

080078b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078b6:	4b47      	ldr	r3, [pc, #284]	@ (80079d4 <xPortStartScheduler+0x124>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a47      	ldr	r2, [pc, #284]	@ (80079d8 <xPortStartScheduler+0x128>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10b      	bne.n	80078d8 <xPortStartScheduler+0x28>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078d8:	4b3e      	ldr	r3, [pc, #248]	@ (80079d4 <xPortStartScheduler+0x124>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a3f      	ldr	r2, [pc, #252]	@ (80079dc <xPortStartScheduler+0x12c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10b      	bne.n	80078fa <xPortStartScheduler+0x4a>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	613b      	str	r3, [r7, #16]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078fa:	4b39      	ldr	r3, [pc, #228]	@ (80079e0 <xPortStartScheduler+0x130>)
 80078fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	22ff      	movs	r2, #255	@ 0xff
 800790a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800791c:	b2da      	uxtb	r2, r3
 800791e:	4b31      	ldr	r3, [pc, #196]	@ (80079e4 <xPortStartScheduler+0x134>)
 8007920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007922:	4b31      	ldr	r3, [pc, #196]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007924:	2207      	movs	r2, #7
 8007926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007928:	e009      	b.n	800793e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800792a:	4b2f      	ldr	r3, [pc, #188]	@ (80079e8 <xPortStartScheduler+0x138>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3b01      	subs	r3, #1
 8007930:	4a2d      	ldr	r2, [pc, #180]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	b2db      	uxtb	r3, r3
 800793c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007946:	2b80      	cmp	r3, #128	@ 0x80
 8007948:	d0ef      	beq.n	800792a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800794a:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <xPortStartScheduler+0x138>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1c3 0307 	rsb	r3, r3, #7
 8007952:	2b04      	cmp	r3, #4
 8007954:	d00b      	beq.n	800796e <xPortStartScheduler+0xbe>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60bb      	str	r3, [r7, #8]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800796e:	4b1e      	ldr	r3, [pc, #120]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	4a1c      	ldr	r2, [pc, #112]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007978:	4b1b      	ldr	r3, [pc, #108]	@ (80079e8 <xPortStartScheduler+0x138>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007980:	4a19      	ldr	r2, [pc, #100]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800798c:	4b17      	ldr	r3, [pc, #92]	@ (80079ec <xPortStartScheduler+0x13c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a16      	ldr	r2, [pc, #88]	@ (80079ec <xPortStartScheduler+0x13c>)
 8007992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007998:	4b14      	ldr	r3, [pc, #80]	@ (80079ec <xPortStartScheduler+0x13c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a13      	ldr	r2, [pc, #76]	@ (80079ec <xPortStartScheduler+0x13c>)
 800799e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80079a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079a4:	f000 f8da 	bl	8007b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079a8:	4b11      	ldr	r3, [pc, #68]	@ (80079f0 <xPortStartScheduler+0x140>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079ae:	f000 f8f9 	bl	8007ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079b2:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <xPortStartScheduler+0x144>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a0f      	ldr	r2, [pc, #60]	@ (80079f4 <xPortStartScheduler+0x144>)
 80079b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80079bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079be:	f7ff ff63 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079c2:	f7ff f82f 	bl	8006a24 <vTaskSwitchContext>
	prvTaskExitError();
 80079c6:	f7ff ff1b 	bl	8007800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	e000ed00 	.word	0xe000ed00
 80079d8:	410fc271 	.word	0x410fc271
 80079dc:	410fc270 	.word	0x410fc270
 80079e0:	e000e400 	.word	0xe000e400
 80079e4:	200010d0 	.word	0x200010d0
 80079e8:	200010d4 	.word	0x200010d4
 80079ec:	e000ed20 	.word	0xe000ed20
 80079f0:	2000000c 	.word	0x2000000c
 80079f4:	e000ef34 	.word	0xe000ef34

080079f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a12:	4b10      	ldr	r3, [pc, #64]	@ (8007a54 <vPortEnterCritical+0x5c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	4a0e      	ldr	r2, [pc, #56]	@ (8007a54 <vPortEnterCritical+0x5c>)
 8007a1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <vPortEnterCritical+0x5c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d110      	bne.n	8007a46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <vPortEnterCritical+0x60>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	603b      	str	r3, [r7, #0]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <vPortEnterCritical+0x4a>
	}
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	2000000c 	.word	0x2000000c
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a62:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <vPortExitCritical+0x50>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <vPortExitCritical+0x26>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	607b      	str	r3, [r7, #4]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a82:	4b0a      	ldr	r3, [pc, #40]	@ (8007aac <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	4a08      	ldr	r2, [pc, #32]	@ (8007aac <vPortExitCritical+0x50>)
 8007a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a8c:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <vPortExitCritical+0x50>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <vPortExitCritical+0x44>
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	2000000c 	.word	0x2000000c

08007ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ab0:	f3ef 8009 	mrs	r0, PSP
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4b15      	ldr	r3, [pc, #84]	@ (8007b10 <pxCurrentTCBConst>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f01e 0f10 	tst.w	lr, #16
 8007ac0:	bf08      	it	eq
 8007ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aca:	6010      	str	r0, [r2, #0]
 8007acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ad4:	f380 8811 	msr	BASEPRI, r0
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f7fe ffa0 	bl	8006a24 <vTaskSwitchContext>
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f380 8811 	msr	BASEPRI, r0
 8007aec:	bc09      	pop	{r0, r3}
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af6:	f01e 0f10 	tst.w	lr, #16
 8007afa:	bf08      	it	eq
 8007afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b00:	f380 8809 	msr	PSP, r0
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst>:
 8007b10:	20000aa4 	.word	0x20000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b32:	f7fe febd 	bl	80068b0 <xTaskIncrementTick>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	@ (8007b58 <xPortSysTickHandler+0x40>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <vPortSetupTimerInterrupt+0x38>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <vPortSetupTimerInterrupt+0x3c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	@ (8007b9c <vPortSetupTimerInterrupt+0x40>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	4a09      	ldr	r2, [pc, #36]	@ (8007ba0 <vPortSetupTimerInterrupt+0x44>)
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b7e:	4b04      	ldr	r3, [pc, #16]	@ (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b80:	2207      	movs	r2, #7
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e010 	.word	0xe000e010
 8007b94:	e000e018 	.word	0xe000e018
 8007b98:	20000000 	.word	0x20000000
 8007b9c:	10624dd3 	.word	0x10624dd3
 8007ba0:	e000e014 	.word	0xe000e014

08007ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007bb4 <vPortEnableVFP+0x10>
 8007ba8:	6801      	ldr	r1, [r0, #0]
 8007baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007bae:	6001      	str	r1, [r0, #0]
 8007bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bb2:	bf00      	nop
 8007bb4:	e000ed88 	.word	0xe000ed88

08007bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d915      	bls.n	8007bf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bca:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <vPortValidateInterruptPriority+0x74>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bd4:	4b16      	ldr	r3, [pc, #88]	@ (8007c30 <vPortValidateInterruptPriority+0x78>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	7afa      	ldrb	r2, [r7, #11]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d20b      	bcs.n	8007bf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	e7fd      	b.n	8007bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c34 <vPortValidateInterruptPriority+0x7c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007c38 <vPortValidateInterruptPriority+0x80>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d90b      	bls.n	8007c1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	603b      	str	r3, [r7, #0]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <vPortValidateInterruptPriority+0x62>
	}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	e000e3f0 	.word	0xe000e3f0
 8007c30:	200010d0 	.word	0x200010d0
 8007c34:	e000ed0c 	.word	0xe000ed0c
 8007c38:	200010d4 	.word	0x200010d4

08007c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	@ 0x28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c48:	f7fe fd76 	bl	8006738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc0 <pvPortMalloc+0x184>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c54:	f000 f924 	bl	8007ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c58:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc4 <pvPortMalloc+0x188>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8095 	bne.w	8007d90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01e      	beq.n	8007caa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d015      	beq.n	8007caa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f023 0307 	bic.w	r3, r3, #7
 8007c84:	3308      	adds	r3, #8
 8007c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <pvPortMalloc+0x6e>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	617b      	str	r3, [r7, #20]
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	e7fd      	b.n	8007ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d06f      	beq.n	8007d90 <pvPortMalloc+0x154>
 8007cb0:	4b45      	ldr	r3, [pc, #276]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d86a      	bhi.n	8007d90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cba:	4b44      	ldr	r3, [pc, #272]	@ (8007dcc <pvPortMalloc+0x190>)
 8007cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cbe:	4b43      	ldr	r3, [pc, #268]	@ (8007dcc <pvPortMalloc+0x190>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cc4:	e004      	b.n	8007cd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d903      	bls.n	8007ce2 <pvPortMalloc+0xa6>
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f1      	bne.n	8007cc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ce2:	4b37      	ldr	r3, [pc, #220]	@ (8007dc0 <pvPortMalloc+0x184>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d051      	beq.n	8007d90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	4413      	add	r3, r2
 8007cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	1ad2      	subs	r2, r2, r3
 8007d06:	2308      	movs	r3, #8
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d920      	bls.n	8007d50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4413      	add	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <pvPortMalloc+0xfc>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d4a:	69b8      	ldr	r0, [r7, #24]
 8007d4c:	f000 f90a 	bl	8007f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d50:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd0 <pvPortMalloc+0x194>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d203      	bcs.n	8007d72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d6a:	4b17      	ldr	r3, [pc, #92]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a18      	ldr	r2, [pc, #96]	@ (8007dd0 <pvPortMalloc+0x194>)
 8007d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	4b13      	ldr	r3, [pc, #76]	@ (8007dc4 <pvPortMalloc+0x188>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <pvPortMalloc+0x198>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	4a11      	ldr	r2, [pc, #68]	@ (8007dd4 <pvPortMalloc+0x198>)
 8007d8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d90:	f7fe fce0 	bl	8006754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <pvPortMalloc+0x17a>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	60fb      	str	r3, [r7, #12]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <pvPortMalloc+0x176>
	return pvReturn;
 8007db6:	69fb      	ldr	r3, [r7, #28]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3728      	adds	r7, #40	@ 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20005f00 	.word	0x20005f00
 8007dc4:	20005f14 	.word	0x20005f14
 8007dc8:	20005f04 	.word	0x20005f04
 8007dcc:	20005ef8 	.word	0x20005ef8
 8007dd0:	20005f08 	.word	0x20005f08
 8007dd4:	20005f0c 	.word	0x20005f0c

08007dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d04f      	beq.n	8007e8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dea:	2308      	movs	r3, #8
 8007dec:	425b      	negs	r3, r3
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b25      	ldr	r3, [pc, #148]	@ (8007e94 <vPortFree+0xbc>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <vPortFree+0x46>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60fb      	str	r3, [r7, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <vPortFree+0x66>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60bb      	str	r3, [r7, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	4b14      	ldr	r3, [pc, #80]	@ (8007e94 <vPortFree+0xbc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01e      	beq.n	8007e8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11a      	bne.n	8007e8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <vPortFree+0xbc>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	401a      	ands	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e64:	f7fe fc68 	bl	8006738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <vPortFree+0xc0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4413      	add	r3, r2
 8007e72:	4a09      	ldr	r2, [pc, #36]	@ (8007e98 <vPortFree+0xc0>)
 8007e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f000 f874 	bl	8007f64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <vPortFree+0xc4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	4a06      	ldr	r2, [pc, #24]	@ (8007e9c <vPortFree+0xc4>)
 8007e84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e86:	f7fe fc65 	bl	8006754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20005f14 	.word	0x20005f14
 8007e98:	20005f04 	.word	0x20005f04
 8007e9c:	20005f10 	.word	0x20005f10

08007ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ea6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007eac:	4b27      	ldr	r3, [pc, #156]	@ (8007f4c <prvHeapInit+0xac>)
 8007eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0307 	bic.w	r3, r3, #7
 8007ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	4a1f      	ldr	r2, [pc, #124]	@ (8007f4c <prvHeapInit+0xac>)
 8007ed0:	4413      	add	r3, r2
 8007ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f50 <prvHeapInit+0xb0>)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ede:	4b1c      	ldr	r3, [pc, #112]	@ (8007f50 <prvHeapInit+0xb0>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007eec:	2208      	movs	r2, #8
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4a15      	ldr	r2, [pc, #84]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f02:	4b14      	ldr	r3, [pc, #80]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f0a:	4b12      	ldr	r3, [pc, #72]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	1ad2      	subs	r2, r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f58 <prvHeapInit+0xb8>)
 8007f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4a09      	ldr	r2, [pc, #36]	@ (8007f5c <prvHeapInit+0xbc>)
 8007f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f38:	4b09      	ldr	r3, [pc, #36]	@ (8007f60 <prvHeapInit+0xc0>)
 8007f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f3e:	601a      	str	r2, [r3, #0]
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	200010d8 	.word	0x200010d8
 8007f50:	20005ef8 	.word	0x20005ef8
 8007f54:	20005f00 	.word	0x20005f00
 8007f58:	20005f08 	.word	0x20005f08
 8007f5c:	20005f04 	.word	0x20005f04
 8007f60:	20005f14 	.word	0x20005f14

08007f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f6c:	4b28      	ldr	r3, [pc, #160]	@ (8008010 <prvInsertBlockIntoFreeList+0xac>)
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e002      	b.n	8007f78 <prvInsertBlockIntoFreeList+0x14>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d8f7      	bhi.n	8007f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d108      	bne.n	8007fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	441a      	add	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d118      	bne.n	8007fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b15      	ldr	r3, [pc, #84]	@ (8008014 <prvInsertBlockIntoFreeList+0xb0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d00d      	beq.n	8007fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e008      	b.n	8007ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	e003      	b.n	8007ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d002      	beq.n	8008002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20005ef8 	.word	0x20005ef8
 8008014:	20005f00 	.word	0x20005f00

08008018 <std>:
 8008018:	2300      	movs	r3, #0
 800801a:	b510      	push	{r4, lr}
 800801c:	4604      	mov	r4, r0
 800801e:	e9c0 3300 	strd	r3, r3, [r0]
 8008022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008026:	6083      	str	r3, [r0, #8]
 8008028:	8181      	strh	r1, [r0, #12]
 800802a:	6643      	str	r3, [r0, #100]	@ 0x64
 800802c:	81c2      	strh	r2, [r0, #14]
 800802e:	6183      	str	r3, [r0, #24]
 8008030:	4619      	mov	r1, r3
 8008032:	2208      	movs	r2, #8
 8008034:	305c      	adds	r0, #92	@ 0x5c
 8008036:	f000 fa1d 	bl	8008474 <memset>
 800803a:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <std+0x58>)
 800803c:	6263      	str	r3, [r4, #36]	@ 0x24
 800803e:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <std+0x5c>)
 8008040:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <std+0x60>)
 8008044:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <std+0x64>)
 8008048:	6323      	str	r3, [r4, #48]	@ 0x30
 800804a:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <std+0x68>)
 800804c:	6224      	str	r4, [r4, #32]
 800804e:	429c      	cmp	r4, r3
 8008050:	d006      	beq.n	8008060 <std+0x48>
 8008052:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008056:	4294      	cmp	r4, r2
 8008058:	d002      	beq.n	8008060 <std+0x48>
 800805a:	33d0      	adds	r3, #208	@ 0xd0
 800805c:	429c      	cmp	r4, r3
 800805e:	d105      	bne.n	800806c <std+0x54>
 8008060:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	f000 bada 	b.w	8008620 <__retarget_lock_init_recursive>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	bf00      	nop
 8008070:	080082c5 	.word	0x080082c5
 8008074:	080082e7 	.word	0x080082e7
 8008078:	0800831f 	.word	0x0800831f
 800807c:	08008343 	.word	0x08008343
 8008080:	20005f18 	.word	0x20005f18

08008084 <stdio_exit_handler>:
 8008084:	4a02      	ldr	r2, [pc, #8]	@ (8008090 <stdio_exit_handler+0xc>)
 8008086:	4903      	ldr	r1, [pc, #12]	@ (8008094 <stdio_exit_handler+0x10>)
 8008088:	4803      	ldr	r0, [pc, #12]	@ (8008098 <stdio_exit_handler+0x14>)
 800808a:	f000 b869 	b.w	8008160 <_fwalk_sglue>
 800808e:	bf00      	nop
 8008090:	20000010 	.word	0x20000010
 8008094:	08008f05 	.word	0x08008f05
 8008098:	20000020 	.word	0x20000020

0800809c <cleanup_stdio>:
 800809c:	6841      	ldr	r1, [r0, #4]
 800809e:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <cleanup_stdio+0x34>)
 80080a0:	4299      	cmp	r1, r3
 80080a2:	b510      	push	{r4, lr}
 80080a4:	4604      	mov	r4, r0
 80080a6:	d001      	beq.n	80080ac <cleanup_stdio+0x10>
 80080a8:	f000 ff2c 	bl	8008f04 <_fflush_r>
 80080ac:	68a1      	ldr	r1, [r4, #8]
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <cleanup_stdio+0x38>)
 80080b0:	4299      	cmp	r1, r3
 80080b2:	d002      	beq.n	80080ba <cleanup_stdio+0x1e>
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 ff25 	bl	8008f04 <_fflush_r>
 80080ba:	68e1      	ldr	r1, [r4, #12]
 80080bc:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <cleanup_stdio+0x3c>)
 80080be:	4299      	cmp	r1, r3
 80080c0:	d004      	beq.n	80080cc <cleanup_stdio+0x30>
 80080c2:	4620      	mov	r0, r4
 80080c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c8:	f000 bf1c 	b.w	8008f04 <_fflush_r>
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	bf00      	nop
 80080d0:	20005f18 	.word	0x20005f18
 80080d4:	20005f80 	.word	0x20005f80
 80080d8:	20005fe8 	.word	0x20005fe8

080080dc <global_stdio_init.part.0>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <global_stdio_init.part.0+0x30>)
 80080e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008110 <global_stdio_init.part.0+0x34>)
 80080e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008114 <global_stdio_init.part.0+0x38>)
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	4620      	mov	r0, r4
 80080e8:	2200      	movs	r2, #0
 80080ea:	2104      	movs	r1, #4
 80080ec:	f7ff ff94 	bl	8008018 <std>
 80080f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080f4:	2201      	movs	r2, #1
 80080f6:	2109      	movs	r1, #9
 80080f8:	f7ff ff8e 	bl	8008018 <std>
 80080fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008100:	2202      	movs	r2, #2
 8008102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008106:	2112      	movs	r1, #18
 8008108:	f7ff bf86 	b.w	8008018 <std>
 800810c:	20006050 	.word	0x20006050
 8008110:	20005f18 	.word	0x20005f18
 8008114:	08008085 	.word	0x08008085

08008118 <__sfp_lock_acquire>:
 8008118:	4801      	ldr	r0, [pc, #4]	@ (8008120 <__sfp_lock_acquire+0x8>)
 800811a:	f000 ba82 	b.w	8008622 <__retarget_lock_acquire_recursive>
 800811e:	bf00      	nop
 8008120:	20006059 	.word	0x20006059

08008124 <__sfp_lock_release>:
 8008124:	4801      	ldr	r0, [pc, #4]	@ (800812c <__sfp_lock_release+0x8>)
 8008126:	f000 ba7d 	b.w	8008624 <__retarget_lock_release_recursive>
 800812a:	bf00      	nop
 800812c:	20006059 	.word	0x20006059

08008130 <__sinit>:
 8008130:	b510      	push	{r4, lr}
 8008132:	4604      	mov	r4, r0
 8008134:	f7ff fff0 	bl	8008118 <__sfp_lock_acquire>
 8008138:	6a23      	ldr	r3, [r4, #32]
 800813a:	b11b      	cbz	r3, 8008144 <__sinit+0x14>
 800813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008140:	f7ff bff0 	b.w	8008124 <__sfp_lock_release>
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <__sinit+0x28>)
 8008146:	6223      	str	r3, [r4, #32]
 8008148:	4b04      	ldr	r3, [pc, #16]	@ (800815c <__sinit+0x2c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f5      	bne.n	800813c <__sinit+0xc>
 8008150:	f7ff ffc4 	bl	80080dc <global_stdio_init.part.0>
 8008154:	e7f2      	b.n	800813c <__sinit+0xc>
 8008156:	bf00      	nop
 8008158:	0800809d 	.word	0x0800809d
 800815c:	20006050 	.word	0x20006050

08008160 <_fwalk_sglue>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4607      	mov	r7, r0
 8008166:	4688      	mov	r8, r1
 8008168:	4614      	mov	r4, r2
 800816a:	2600      	movs	r6, #0
 800816c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008170:	f1b9 0901 	subs.w	r9, r9, #1
 8008174:	d505      	bpl.n	8008182 <_fwalk_sglue+0x22>
 8008176:	6824      	ldr	r4, [r4, #0]
 8008178:	2c00      	cmp	r4, #0
 800817a:	d1f7      	bne.n	800816c <_fwalk_sglue+0xc>
 800817c:	4630      	mov	r0, r6
 800817e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d907      	bls.n	8008198 <_fwalk_sglue+0x38>
 8008188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800818c:	3301      	adds	r3, #1
 800818e:	d003      	beq.n	8008198 <_fwalk_sglue+0x38>
 8008190:	4629      	mov	r1, r5
 8008192:	4638      	mov	r0, r7
 8008194:	47c0      	blx	r8
 8008196:	4306      	orrs	r6, r0
 8008198:	3568      	adds	r5, #104	@ 0x68
 800819a:	e7e9      	b.n	8008170 <_fwalk_sglue+0x10>

0800819c <_puts_r>:
 800819c:	6a03      	ldr	r3, [r0, #32]
 800819e:	b570      	push	{r4, r5, r6, lr}
 80081a0:	6884      	ldr	r4, [r0, #8]
 80081a2:	4605      	mov	r5, r0
 80081a4:	460e      	mov	r6, r1
 80081a6:	b90b      	cbnz	r3, 80081ac <_puts_r+0x10>
 80081a8:	f7ff ffc2 	bl	8008130 <__sinit>
 80081ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081ae:	07db      	lsls	r3, r3, #31
 80081b0:	d405      	bmi.n	80081be <_puts_r+0x22>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	0598      	lsls	r0, r3, #22
 80081b6:	d402      	bmi.n	80081be <_puts_r+0x22>
 80081b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ba:	f000 fa32 	bl	8008622 <__retarget_lock_acquire_recursive>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	0719      	lsls	r1, r3, #28
 80081c2:	d502      	bpl.n	80081ca <_puts_r+0x2e>
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d135      	bne.n	8008236 <_puts_r+0x9a>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 f8fb 	bl	80083c8 <__swsetup_r>
 80081d2:	b380      	cbz	r0, 8008236 <_puts_r+0x9a>
 80081d4:	f04f 35ff 	mov.w	r5, #4294967295
 80081d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081da:	07da      	lsls	r2, r3, #31
 80081dc:	d405      	bmi.n	80081ea <_puts_r+0x4e>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	059b      	lsls	r3, r3, #22
 80081e2:	d402      	bmi.n	80081ea <_puts_r+0x4e>
 80081e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081e6:	f000 fa1d 	bl	8008624 <__retarget_lock_release_recursive>
 80081ea:	4628      	mov	r0, r5
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da04      	bge.n	80081fc <_puts_r+0x60>
 80081f2:	69a2      	ldr	r2, [r4, #24]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	dc17      	bgt.n	8008228 <_puts_r+0x8c>
 80081f8:	290a      	cmp	r1, #10
 80081fa:	d015      	beq.n	8008228 <_puts_r+0x8c>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	7019      	strb	r1, [r3, #0]
 8008204:	68a3      	ldr	r3, [r4, #8]
 8008206:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800820a:	3b01      	subs	r3, #1
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	2900      	cmp	r1, #0
 8008210:	d1ed      	bne.n	80081ee <_puts_r+0x52>
 8008212:	2b00      	cmp	r3, #0
 8008214:	da11      	bge.n	800823a <_puts_r+0x9e>
 8008216:	4622      	mov	r2, r4
 8008218:	210a      	movs	r1, #10
 800821a:	4628      	mov	r0, r5
 800821c:	f000 f895 	bl	800834a <__swbuf_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d0d7      	beq.n	80081d4 <_puts_r+0x38>
 8008224:	250a      	movs	r5, #10
 8008226:	e7d7      	b.n	80081d8 <_puts_r+0x3c>
 8008228:	4622      	mov	r2, r4
 800822a:	4628      	mov	r0, r5
 800822c:	f000 f88d 	bl	800834a <__swbuf_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d1e7      	bne.n	8008204 <_puts_r+0x68>
 8008234:	e7ce      	b.n	80081d4 <_puts_r+0x38>
 8008236:	3e01      	subs	r6, #1
 8008238:	e7e4      	b.n	8008204 <_puts_r+0x68>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	220a      	movs	r2, #10
 8008242:	701a      	strb	r2, [r3, #0]
 8008244:	e7ee      	b.n	8008224 <_puts_r+0x88>
	...

08008248 <puts>:
 8008248:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <puts+0xc>)
 800824a:	4601      	mov	r1, r0
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	f7ff bfa5 	b.w	800819c <_puts_r>
 8008252:	bf00      	nop
 8008254:	2000001c 	.word	0x2000001c

08008258 <sniprintf>:
 8008258:	b40c      	push	{r2, r3}
 800825a:	b530      	push	{r4, r5, lr}
 800825c:	4b18      	ldr	r3, [pc, #96]	@ (80082c0 <sniprintf+0x68>)
 800825e:	1e0c      	subs	r4, r1, #0
 8008260:	681d      	ldr	r5, [r3, #0]
 8008262:	b09d      	sub	sp, #116	@ 0x74
 8008264:	da08      	bge.n	8008278 <sniprintf+0x20>
 8008266:	238b      	movs	r3, #139	@ 0x8b
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	f04f 30ff 	mov.w	r0, #4294967295
 800826e:	b01d      	add	sp, #116	@ 0x74
 8008270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008274:	b002      	add	sp, #8
 8008276:	4770      	bx	lr
 8008278:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800827c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008286:	bf14      	ite	ne
 8008288:	f104 33ff 	addne.w	r3, r4, #4294967295
 800828c:	4623      	moveq	r3, r4
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008296:	9002      	str	r0, [sp, #8]
 8008298:	9006      	str	r0, [sp, #24]
 800829a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800829e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082a0:	ab21      	add	r3, sp, #132	@ 0x84
 80082a2:	a902      	add	r1, sp, #8
 80082a4:	4628      	mov	r0, r5
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f000 fb20 	bl	80088ec <_svfiprintf_r>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	bfbc      	itt	lt
 80082b0:	238b      	movlt	r3, #139	@ 0x8b
 80082b2:	602b      	strlt	r3, [r5, #0]
 80082b4:	2c00      	cmp	r4, #0
 80082b6:	d0da      	beq.n	800826e <sniprintf+0x16>
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e7d6      	b.n	800826e <sniprintf+0x16>
 80082c0:	2000001c 	.word	0x2000001c

080082c4 <__sread>:
 80082c4:	b510      	push	{r4, lr}
 80082c6:	460c      	mov	r4, r1
 80082c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082cc:	f000 f95a 	bl	8008584 <_read_r>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	bfab      	itete	ge
 80082d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082d6:	89a3      	ldrhlt	r3, [r4, #12]
 80082d8:	181b      	addge	r3, r3, r0
 80082da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082de:	bfac      	ite	ge
 80082e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082e2:	81a3      	strhlt	r3, [r4, #12]
 80082e4:	bd10      	pop	{r4, pc}

080082e6 <__swrite>:
 80082e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	461f      	mov	r7, r3
 80082ec:	898b      	ldrh	r3, [r1, #12]
 80082ee:	05db      	lsls	r3, r3, #23
 80082f0:	4605      	mov	r5, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	4616      	mov	r6, r2
 80082f6:	d505      	bpl.n	8008304 <__swrite+0x1e>
 80082f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fc:	2302      	movs	r3, #2
 80082fe:	2200      	movs	r2, #0
 8008300:	f000 f92e 	bl	8008560 <_lseek_r>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800830a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	4632      	mov	r2, r6
 8008312:	463b      	mov	r3, r7
 8008314:	4628      	mov	r0, r5
 8008316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800831a:	f000 b945 	b.w	80085a8 <_write_r>

0800831e <__sseek>:
 800831e:	b510      	push	{r4, lr}
 8008320:	460c      	mov	r4, r1
 8008322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008326:	f000 f91b 	bl	8008560 <_lseek_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	bf15      	itete	ne
 8008330:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800833a:	81a3      	strheq	r3, [r4, #12]
 800833c:	bf18      	it	ne
 800833e:	81a3      	strhne	r3, [r4, #12]
 8008340:	bd10      	pop	{r4, pc}

08008342 <__sclose>:
 8008342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008346:	f000 b89d 	b.w	8008484 <_close_r>

0800834a <__swbuf_r>:
 800834a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834c:	460e      	mov	r6, r1
 800834e:	4614      	mov	r4, r2
 8008350:	4605      	mov	r5, r0
 8008352:	b118      	cbz	r0, 800835c <__swbuf_r+0x12>
 8008354:	6a03      	ldr	r3, [r0, #32]
 8008356:	b90b      	cbnz	r3, 800835c <__swbuf_r+0x12>
 8008358:	f7ff feea 	bl	8008130 <__sinit>
 800835c:	69a3      	ldr	r3, [r4, #24]
 800835e:	60a3      	str	r3, [r4, #8]
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	071a      	lsls	r2, r3, #28
 8008364:	d501      	bpl.n	800836a <__swbuf_r+0x20>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	b943      	cbnz	r3, 800837c <__swbuf_r+0x32>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f82b 	bl	80083c8 <__swsetup_r>
 8008372:	b118      	cbz	r0, 800837c <__swbuf_r+0x32>
 8008374:	f04f 37ff 	mov.w	r7, #4294967295
 8008378:	4638      	mov	r0, r7
 800837a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	6922      	ldr	r2, [r4, #16]
 8008380:	1a98      	subs	r0, r3, r2
 8008382:	6963      	ldr	r3, [r4, #20]
 8008384:	b2f6      	uxtb	r6, r6
 8008386:	4283      	cmp	r3, r0
 8008388:	4637      	mov	r7, r6
 800838a:	dc05      	bgt.n	8008398 <__swbuf_r+0x4e>
 800838c:	4621      	mov	r1, r4
 800838e:	4628      	mov	r0, r5
 8008390:	f000 fdb8 	bl	8008f04 <_fflush_r>
 8008394:	2800      	cmp	r0, #0
 8008396:	d1ed      	bne.n	8008374 <__swbuf_r+0x2a>
 8008398:	68a3      	ldr	r3, [r4, #8]
 800839a:	3b01      	subs	r3, #1
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	6022      	str	r2, [r4, #0]
 80083a4:	701e      	strb	r6, [r3, #0]
 80083a6:	6962      	ldr	r2, [r4, #20]
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d004      	beq.n	80083b8 <__swbuf_r+0x6e>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	07db      	lsls	r3, r3, #31
 80083b2:	d5e1      	bpl.n	8008378 <__swbuf_r+0x2e>
 80083b4:	2e0a      	cmp	r6, #10
 80083b6:	d1df      	bne.n	8008378 <__swbuf_r+0x2e>
 80083b8:	4621      	mov	r1, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 fda2 	bl	8008f04 <_fflush_r>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d0d9      	beq.n	8008378 <__swbuf_r+0x2e>
 80083c4:	e7d6      	b.n	8008374 <__swbuf_r+0x2a>
	...

080083c8 <__swsetup_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4b29      	ldr	r3, [pc, #164]	@ (8008470 <__swsetup_r+0xa8>)
 80083cc:	4605      	mov	r5, r0
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	460c      	mov	r4, r1
 80083d2:	b118      	cbz	r0, 80083dc <__swsetup_r+0x14>
 80083d4:	6a03      	ldr	r3, [r0, #32]
 80083d6:	b90b      	cbnz	r3, 80083dc <__swsetup_r+0x14>
 80083d8:	f7ff feaa 	bl	8008130 <__sinit>
 80083dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e0:	0719      	lsls	r1, r3, #28
 80083e2:	d422      	bmi.n	800842a <__swsetup_r+0x62>
 80083e4:	06da      	lsls	r2, r3, #27
 80083e6:	d407      	bmi.n	80083f8 <__swsetup_r+0x30>
 80083e8:	2209      	movs	r2, #9
 80083ea:	602a      	str	r2, [r5, #0]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	f04f 30ff 	mov.w	r0, #4294967295
 80083f6:	e033      	b.n	8008460 <__swsetup_r+0x98>
 80083f8:	0758      	lsls	r0, r3, #29
 80083fa:	d512      	bpl.n	8008422 <__swsetup_r+0x5a>
 80083fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083fe:	b141      	cbz	r1, 8008412 <__swsetup_r+0x4a>
 8008400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008404:	4299      	cmp	r1, r3
 8008406:	d002      	beq.n	800840e <__swsetup_r+0x46>
 8008408:	4628      	mov	r0, r5
 800840a:	f000 f91b 	bl	8008644 <_free_r>
 800840e:	2300      	movs	r3, #0
 8008410:	6363      	str	r3, [r4, #52]	@ 0x34
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	2300      	movs	r3, #0
 800841c:	6063      	str	r3, [r4, #4]
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f043 0308 	orr.w	r3, r3, #8
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	b94b      	cbnz	r3, 8008442 <__swsetup_r+0x7a>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008438:	d003      	beq.n	8008442 <__swsetup_r+0x7a>
 800843a:	4621      	mov	r1, r4
 800843c:	4628      	mov	r0, r5
 800843e:	f000 fdaf 	bl	8008fa0 <__smakebuf_r>
 8008442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008446:	f013 0201 	ands.w	r2, r3, #1
 800844a:	d00a      	beq.n	8008462 <__swsetup_r+0x9a>
 800844c:	2200      	movs	r2, #0
 800844e:	60a2      	str	r2, [r4, #8]
 8008450:	6962      	ldr	r2, [r4, #20]
 8008452:	4252      	negs	r2, r2
 8008454:	61a2      	str	r2, [r4, #24]
 8008456:	6922      	ldr	r2, [r4, #16]
 8008458:	b942      	cbnz	r2, 800846c <__swsetup_r+0xa4>
 800845a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800845e:	d1c5      	bne.n	80083ec <__swsetup_r+0x24>
 8008460:	bd38      	pop	{r3, r4, r5, pc}
 8008462:	0799      	lsls	r1, r3, #30
 8008464:	bf58      	it	pl
 8008466:	6962      	ldrpl	r2, [r4, #20]
 8008468:	60a2      	str	r2, [r4, #8]
 800846a:	e7f4      	b.n	8008456 <__swsetup_r+0x8e>
 800846c:	2000      	movs	r0, #0
 800846e:	e7f7      	b.n	8008460 <__swsetup_r+0x98>
 8008470:	2000001c 	.word	0x2000001c

08008474 <memset>:
 8008474:	4402      	add	r2, r0
 8008476:	4603      	mov	r3, r0
 8008478:	4293      	cmp	r3, r2
 800847a:	d100      	bne.n	800847e <memset+0xa>
 800847c:	4770      	bx	lr
 800847e:	f803 1b01 	strb.w	r1, [r3], #1
 8008482:	e7f9      	b.n	8008478 <memset+0x4>

08008484 <_close_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d06      	ldr	r5, [pc, #24]	@ (80084a0 <_close_r+0x1c>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	602b      	str	r3, [r5, #0]
 8008490:	f7f8 ff43 	bl	800131a <_close>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_close_r+0x1a>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_close_r+0x1a>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20006054 	.word	0x20006054

080084a4 <_reclaim_reent>:
 80084a4:	4b2d      	ldr	r3, [pc, #180]	@ (800855c <_reclaim_reent+0xb8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4283      	cmp	r3, r0
 80084aa:	b570      	push	{r4, r5, r6, lr}
 80084ac:	4604      	mov	r4, r0
 80084ae:	d053      	beq.n	8008558 <_reclaim_reent+0xb4>
 80084b0:	69c3      	ldr	r3, [r0, #28]
 80084b2:	b31b      	cbz	r3, 80084fc <_reclaim_reent+0x58>
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	b163      	cbz	r3, 80084d2 <_reclaim_reent+0x2e>
 80084b8:	2500      	movs	r5, #0
 80084ba:	69e3      	ldr	r3, [r4, #28]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	5959      	ldr	r1, [r3, r5]
 80084c0:	b9b1      	cbnz	r1, 80084f0 <_reclaim_reent+0x4c>
 80084c2:	3504      	adds	r5, #4
 80084c4:	2d80      	cmp	r5, #128	@ 0x80
 80084c6:	d1f8      	bne.n	80084ba <_reclaim_reent+0x16>
 80084c8:	69e3      	ldr	r3, [r4, #28]
 80084ca:	4620      	mov	r0, r4
 80084cc:	68d9      	ldr	r1, [r3, #12]
 80084ce:	f000 f8b9 	bl	8008644 <_free_r>
 80084d2:	69e3      	ldr	r3, [r4, #28]
 80084d4:	6819      	ldr	r1, [r3, #0]
 80084d6:	b111      	cbz	r1, 80084de <_reclaim_reent+0x3a>
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 f8b3 	bl	8008644 <_free_r>
 80084de:	69e3      	ldr	r3, [r4, #28]
 80084e0:	689d      	ldr	r5, [r3, #8]
 80084e2:	b15d      	cbz	r5, 80084fc <_reclaim_reent+0x58>
 80084e4:	4629      	mov	r1, r5
 80084e6:	4620      	mov	r0, r4
 80084e8:	682d      	ldr	r5, [r5, #0]
 80084ea:	f000 f8ab 	bl	8008644 <_free_r>
 80084ee:	e7f8      	b.n	80084e2 <_reclaim_reent+0x3e>
 80084f0:	680e      	ldr	r6, [r1, #0]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f8a6 	bl	8008644 <_free_r>
 80084f8:	4631      	mov	r1, r6
 80084fa:	e7e1      	b.n	80084c0 <_reclaim_reent+0x1c>
 80084fc:	6961      	ldr	r1, [r4, #20]
 80084fe:	b111      	cbz	r1, 8008506 <_reclaim_reent+0x62>
 8008500:	4620      	mov	r0, r4
 8008502:	f000 f89f 	bl	8008644 <_free_r>
 8008506:	69e1      	ldr	r1, [r4, #28]
 8008508:	b111      	cbz	r1, 8008510 <_reclaim_reent+0x6c>
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f89a 	bl	8008644 <_free_r>
 8008510:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008512:	b111      	cbz	r1, 800851a <_reclaim_reent+0x76>
 8008514:	4620      	mov	r0, r4
 8008516:	f000 f895 	bl	8008644 <_free_r>
 800851a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800851c:	b111      	cbz	r1, 8008524 <_reclaim_reent+0x80>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 f890 	bl	8008644 <_free_r>
 8008524:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008526:	b111      	cbz	r1, 800852e <_reclaim_reent+0x8a>
 8008528:	4620      	mov	r0, r4
 800852a:	f000 f88b 	bl	8008644 <_free_r>
 800852e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008530:	b111      	cbz	r1, 8008538 <_reclaim_reent+0x94>
 8008532:	4620      	mov	r0, r4
 8008534:	f000 f886 	bl	8008644 <_free_r>
 8008538:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800853a:	b111      	cbz	r1, 8008542 <_reclaim_reent+0x9e>
 800853c:	4620      	mov	r0, r4
 800853e:	f000 f881 	bl	8008644 <_free_r>
 8008542:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008544:	b111      	cbz	r1, 800854c <_reclaim_reent+0xa8>
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f87c 	bl	8008644 <_free_r>
 800854c:	6a23      	ldr	r3, [r4, #32]
 800854e:	b11b      	cbz	r3, 8008558 <_reclaim_reent+0xb4>
 8008550:	4620      	mov	r0, r4
 8008552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008556:	4718      	bx	r3
 8008558:	bd70      	pop	{r4, r5, r6, pc}
 800855a:	bf00      	nop
 800855c:	2000001c 	.word	0x2000001c

08008560 <_lseek_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	@ (8008580 <_lseek_r+0x20>)
 8008564:	4604      	mov	r4, r0
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7f8 fefa 	bl	8001368 <_lseek>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_lseek_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_lseek_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20006054 	.word	0x20006054

08008584 <_read_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	@ (80085a4 <_read_r+0x20>)
 8008588:	4604      	mov	r4, r0
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	2200      	movs	r2, #0
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7f8 fea4 	bl	80012e0 <_read>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_read_r+0x1e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_read_r+0x1e>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	20006054 	.word	0x20006054

080085a8 <_write_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	@ (80085c8 <_write_r+0x20>)
 80085ac:	4604      	mov	r4, r0
 80085ae:	4608      	mov	r0, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	602a      	str	r2, [r5, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f7f8 fb20 	bl	8000bfc <_write>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_write_r+0x1e>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_write_r+0x1e>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	20006054 	.word	0x20006054

080085cc <__errno>:
 80085cc:	4b01      	ldr	r3, [pc, #4]	@ (80085d4 <__errno+0x8>)
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	2000001c 	.word	0x2000001c

080085d8 <__libc_init_array>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4d0d      	ldr	r5, [pc, #52]	@ (8008610 <__libc_init_array+0x38>)
 80085dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008614 <__libc_init_array+0x3c>)
 80085de:	1b64      	subs	r4, r4, r5
 80085e0:	10a4      	asrs	r4, r4, #2
 80085e2:	2600      	movs	r6, #0
 80085e4:	42a6      	cmp	r6, r4
 80085e6:	d109      	bne.n	80085fc <__libc_init_array+0x24>
 80085e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008618 <__libc_init_array+0x40>)
 80085ea:	4c0c      	ldr	r4, [pc, #48]	@ (800861c <__libc_init_array+0x44>)
 80085ec:	f000 fd96 	bl	800911c <_init>
 80085f0:	1b64      	subs	r4, r4, r5
 80085f2:	10a4      	asrs	r4, r4, #2
 80085f4:	2600      	movs	r6, #0
 80085f6:	42a6      	cmp	r6, r4
 80085f8:	d105      	bne.n	8008606 <__libc_init_array+0x2e>
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008600:	4798      	blx	r3
 8008602:	3601      	adds	r6, #1
 8008604:	e7ee      	b.n	80085e4 <__libc_init_array+0xc>
 8008606:	f855 3b04 	ldr.w	r3, [r5], #4
 800860a:	4798      	blx	r3
 800860c:	3601      	adds	r6, #1
 800860e:	e7f2      	b.n	80085f6 <__libc_init_array+0x1e>
 8008610:	080092b4 	.word	0x080092b4
 8008614:	080092b4 	.word	0x080092b4
 8008618:	080092b4 	.word	0x080092b4
 800861c:	080092b8 	.word	0x080092b8

08008620 <__retarget_lock_init_recursive>:
 8008620:	4770      	bx	lr

08008622 <__retarget_lock_acquire_recursive>:
 8008622:	4770      	bx	lr

08008624 <__retarget_lock_release_recursive>:
 8008624:	4770      	bx	lr

08008626 <memcpy>:
 8008626:	440a      	add	r2, r1
 8008628:	4291      	cmp	r1, r2
 800862a:	f100 33ff 	add.w	r3, r0, #4294967295
 800862e:	d100      	bne.n	8008632 <memcpy+0xc>
 8008630:	4770      	bx	lr
 8008632:	b510      	push	{r4, lr}
 8008634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800863c:	4291      	cmp	r1, r2
 800863e:	d1f9      	bne.n	8008634 <memcpy+0xe>
 8008640:	bd10      	pop	{r4, pc}
	...

08008644 <_free_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	2900      	cmp	r1, #0
 800864a:	d041      	beq.n	80086d0 <_free_r+0x8c>
 800864c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008650:	1f0c      	subs	r4, r1, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfb8      	it	lt
 8008656:	18e4      	addlt	r4, r4, r3
 8008658:	f000 f8e0 	bl	800881c <__malloc_lock>
 800865c:	4a1d      	ldr	r2, [pc, #116]	@ (80086d4 <_free_r+0x90>)
 800865e:	6813      	ldr	r3, [r2, #0]
 8008660:	b933      	cbnz	r3, 8008670 <_free_r+0x2c>
 8008662:	6063      	str	r3, [r4, #4]
 8008664:	6014      	str	r4, [r2, #0]
 8008666:	4628      	mov	r0, r5
 8008668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866c:	f000 b8dc 	b.w	8008828 <__malloc_unlock>
 8008670:	42a3      	cmp	r3, r4
 8008672:	d908      	bls.n	8008686 <_free_r+0x42>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	1821      	adds	r1, r4, r0
 8008678:	428b      	cmp	r3, r1
 800867a:	bf01      	itttt	eq
 800867c:	6819      	ldreq	r1, [r3, #0]
 800867e:	685b      	ldreq	r3, [r3, #4]
 8008680:	1809      	addeq	r1, r1, r0
 8008682:	6021      	streq	r1, [r4, #0]
 8008684:	e7ed      	b.n	8008662 <_free_r+0x1e>
 8008686:	461a      	mov	r2, r3
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	b10b      	cbz	r3, 8008690 <_free_r+0x4c>
 800868c:	42a3      	cmp	r3, r4
 800868e:	d9fa      	bls.n	8008686 <_free_r+0x42>
 8008690:	6811      	ldr	r1, [r2, #0]
 8008692:	1850      	adds	r0, r2, r1
 8008694:	42a0      	cmp	r0, r4
 8008696:	d10b      	bne.n	80086b0 <_free_r+0x6c>
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	4401      	add	r1, r0
 800869c:	1850      	adds	r0, r2, r1
 800869e:	4283      	cmp	r3, r0
 80086a0:	6011      	str	r1, [r2, #0]
 80086a2:	d1e0      	bne.n	8008666 <_free_r+0x22>
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	6053      	str	r3, [r2, #4]
 80086aa:	4408      	add	r0, r1
 80086ac:	6010      	str	r0, [r2, #0]
 80086ae:	e7da      	b.n	8008666 <_free_r+0x22>
 80086b0:	d902      	bls.n	80086b8 <_free_r+0x74>
 80086b2:	230c      	movs	r3, #12
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	e7d6      	b.n	8008666 <_free_r+0x22>
 80086b8:	6820      	ldr	r0, [r4, #0]
 80086ba:	1821      	adds	r1, r4, r0
 80086bc:	428b      	cmp	r3, r1
 80086be:	bf04      	itt	eq
 80086c0:	6819      	ldreq	r1, [r3, #0]
 80086c2:	685b      	ldreq	r3, [r3, #4]
 80086c4:	6063      	str	r3, [r4, #4]
 80086c6:	bf04      	itt	eq
 80086c8:	1809      	addeq	r1, r1, r0
 80086ca:	6021      	streq	r1, [r4, #0]
 80086cc:	6054      	str	r4, [r2, #4]
 80086ce:	e7ca      	b.n	8008666 <_free_r+0x22>
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	bf00      	nop
 80086d4:	20006060 	.word	0x20006060

080086d8 <sbrk_aligned>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	4e0f      	ldr	r6, [pc, #60]	@ (8008718 <sbrk_aligned+0x40>)
 80086dc:	460c      	mov	r4, r1
 80086de:	6831      	ldr	r1, [r6, #0]
 80086e0:	4605      	mov	r5, r0
 80086e2:	b911      	cbnz	r1, 80086ea <sbrk_aligned+0x12>
 80086e4:	f000 fcd4 	bl	8009090 <_sbrk_r>
 80086e8:	6030      	str	r0, [r6, #0]
 80086ea:	4621      	mov	r1, r4
 80086ec:	4628      	mov	r0, r5
 80086ee:	f000 fccf 	bl	8009090 <_sbrk_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d103      	bne.n	80086fe <sbrk_aligned+0x26>
 80086f6:	f04f 34ff 	mov.w	r4, #4294967295
 80086fa:	4620      	mov	r0, r4
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	1cc4      	adds	r4, r0, #3
 8008700:	f024 0403 	bic.w	r4, r4, #3
 8008704:	42a0      	cmp	r0, r4
 8008706:	d0f8      	beq.n	80086fa <sbrk_aligned+0x22>
 8008708:	1a21      	subs	r1, r4, r0
 800870a:	4628      	mov	r0, r5
 800870c:	f000 fcc0 	bl	8009090 <_sbrk_r>
 8008710:	3001      	adds	r0, #1
 8008712:	d1f2      	bne.n	80086fa <sbrk_aligned+0x22>
 8008714:	e7ef      	b.n	80086f6 <sbrk_aligned+0x1e>
 8008716:	bf00      	nop
 8008718:	2000605c 	.word	0x2000605c

0800871c <_malloc_r>:
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	1ccd      	adds	r5, r1, #3
 8008722:	f025 0503 	bic.w	r5, r5, #3
 8008726:	3508      	adds	r5, #8
 8008728:	2d0c      	cmp	r5, #12
 800872a:	bf38      	it	cc
 800872c:	250c      	movcc	r5, #12
 800872e:	2d00      	cmp	r5, #0
 8008730:	4606      	mov	r6, r0
 8008732:	db01      	blt.n	8008738 <_malloc_r+0x1c>
 8008734:	42a9      	cmp	r1, r5
 8008736:	d904      	bls.n	8008742 <_malloc_r+0x26>
 8008738:	230c      	movs	r3, #12
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	2000      	movs	r0, #0
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008818 <_malloc_r+0xfc>
 8008746:	f000 f869 	bl	800881c <__malloc_lock>
 800874a:	f8d8 3000 	ldr.w	r3, [r8]
 800874e:	461c      	mov	r4, r3
 8008750:	bb44      	cbnz	r4, 80087a4 <_malloc_r+0x88>
 8008752:	4629      	mov	r1, r5
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ffbf 	bl	80086d8 <sbrk_aligned>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	4604      	mov	r4, r0
 800875e:	d158      	bne.n	8008812 <_malloc_r+0xf6>
 8008760:	f8d8 4000 	ldr.w	r4, [r8]
 8008764:	4627      	mov	r7, r4
 8008766:	2f00      	cmp	r7, #0
 8008768:	d143      	bne.n	80087f2 <_malloc_r+0xd6>
 800876a:	2c00      	cmp	r4, #0
 800876c:	d04b      	beq.n	8008806 <_malloc_r+0xea>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	4639      	mov	r1, r7
 8008772:	4630      	mov	r0, r6
 8008774:	eb04 0903 	add.w	r9, r4, r3
 8008778:	f000 fc8a 	bl	8009090 <_sbrk_r>
 800877c:	4581      	cmp	r9, r0
 800877e:	d142      	bne.n	8008806 <_malloc_r+0xea>
 8008780:	6821      	ldr	r1, [r4, #0]
 8008782:	1a6d      	subs	r5, r5, r1
 8008784:	4629      	mov	r1, r5
 8008786:	4630      	mov	r0, r6
 8008788:	f7ff ffa6 	bl	80086d8 <sbrk_aligned>
 800878c:	3001      	adds	r0, #1
 800878e:	d03a      	beq.n	8008806 <_malloc_r+0xea>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	442b      	add	r3, r5
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	f8d8 3000 	ldr.w	r3, [r8]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	bb62      	cbnz	r2, 80087f8 <_malloc_r+0xdc>
 800879e:	f8c8 7000 	str.w	r7, [r8]
 80087a2:	e00f      	b.n	80087c4 <_malloc_r+0xa8>
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	1b52      	subs	r2, r2, r5
 80087a8:	d420      	bmi.n	80087ec <_malloc_r+0xd0>
 80087aa:	2a0b      	cmp	r2, #11
 80087ac:	d917      	bls.n	80087de <_malloc_r+0xc2>
 80087ae:	1961      	adds	r1, r4, r5
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	6025      	str	r5, [r4, #0]
 80087b4:	bf18      	it	ne
 80087b6:	6059      	strne	r1, [r3, #4]
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	bf08      	it	eq
 80087bc:	f8c8 1000 	streq.w	r1, [r8]
 80087c0:	5162      	str	r2, [r4, r5]
 80087c2:	604b      	str	r3, [r1, #4]
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 f82f 	bl	8008828 <__malloc_unlock>
 80087ca:	f104 000b 	add.w	r0, r4, #11
 80087ce:	1d23      	adds	r3, r4, #4
 80087d0:	f020 0007 	bic.w	r0, r0, #7
 80087d4:	1ac2      	subs	r2, r0, r3
 80087d6:	bf1c      	itt	ne
 80087d8:	1a1b      	subne	r3, r3, r0
 80087da:	50a3      	strne	r3, [r4, r2]
 80087dc:	e7af      	b.n	800873e <_malloc_r+0x22>
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	bf0c      	ite	eq
 80087e4:	f8c8 2000 	streq.w	r2, [r8]
 80087e8:	605a      	strne	r2, [r3, #4]
 80087ea:	e7eb      	b.n	80087c4 <_malloc_r+0xa8>
 80087ec:	4623      	mov	r3, r4
 80087ee:	6864      	ldr	r4, [r4, #4]
 80087f0:	e7ae      	b.n	8008750 <_malloc_r+0x34>
 80087f2:	463c      	mov	r4, r7
 80087f4:	687f      	ldr	r7, [r7, #4]
 80087f6:	e7b6      	b.n	8008766 <_malloc_r+0x4a>
 80087f8:	461a      	mov	r2, r3
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d1fb      	bne.n	80087f8 <_malloc_r+0xdc>
 8008800:	2300      	movs	r3, #0
 8008802:	6053      	str	r3, [r2, #4]
 8008804:	e7de      	b.n	80087c4 <_malloc_r+0xa8>
 8008806:	230c      	movs	r3, #12
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	4630      	mov	r0, r6
 800880c:	f000 f80c 	bl	8008828 <__malloc_unlock>
 8008810:	e794      	b.n	800873c <_malloc_r+0x20>
 8008812:	6005      	str	r5, [r0, #0]
 8008814:	e7d6      	b.n	80087c4 <_malloc_r+0xa8>
 8008816:	bf00      	nop
 8008818:	20006060 	.word	0x20006060

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	@ (8008824 <__malloc_lock+0x8>)
 800881e:	f7ff bf00 	b.w	8008622 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20006058 	.word	0x20006058

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	@ (8008830 <__malloc_unlock+0x8>)
 800882a:	f7ff befb 	b.w	8008624 <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20006058 	.word	0x20006058

08008834 <__ssputs_r>:
 8008834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	688e      	ldr	r6, [r1, #8]
 800883a:	461f      	mov	r7, r3
 800883c:	42be      	cmp	r6, r7
 800883e:	680b      	ldr	r3, [r1, #0]
 8008840:	4682      	mov	sl, r0
 8008842:	460c      	mov	r4, r1
 8008844:	4690      	mov	r8, r2
 8008846:	d82d      	bhi.n	80088a4 <__ssputs_r+0x70>
 8008848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800884c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008850:	d026      	beq.n	80088a0 <__ssputs_r+0x6c>
 8008852:	6965      	ldr	r5, [r4, #20]
 8008854:	6909      	ldr	r1, [r1, #16]
 8008856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800885a:	eba3 0901 	sub.w	r9, r3, r1
 800885e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008862:	1c7b      	adds	r3, r7, #1
 8008864:	444b      	add	r3, r9
 8008866:	106d      	asrs	r5, r5, #1
 8008868:	429d      	cmp	r5, r3
 800886a:	bf38      	it	cc
 800886c:	461d      	movcc	r5, r3
 800886e:	0553      	lsls	r3, r2, #21
 8008870:	d527      	bpl.n	80088c2 <__ssputs_r+0x8e>
 8008872:	4629      	mov	r1, r5
 8008874:	f7ff ff52 	bl	800871c <_malloc_r>
 8008878:	4606      	mov	r6, r0
 800887a:	b360      	cbz	r0, 80088d6 <__ssputs_r+0xa2>
 800887c:	6921      	ldr	r1, [r4, #16]
 800887e:	464a      	mov	r2, r9
 8008880:	f7ff fed1 	bl	8008626 <memcpy>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800888a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	6126      	str	r6, [r4, #16]
 8008892:	6165      	str	r5, [r4, #20]
 8008894:	444e      	add	r6, r9
 8008896:	eba5 0509 	sub.w	r5, r5, r9
 800889a:	6026      	str	r6, [r4, #0]
 800889c:	60a5      	str	r5, [r4, #8]
 800889e:	463e      	mov	r6, r7
 80088a0:	42be      	cmp	r6, r7
 80088a2:	d900      	bls.n	80088a6 <__ssputs_r+0x72>
 80088a4:	463e      	mov	r6, r7
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	4632      	mov	r2, r6
 80088aa:	4641      	mov	r1, r8
 80088ac:	f000 fbb4 	bl	8009018 <memmove>
 80088b0:	68a3      	ldr	r3, [r4, #8]
 80088b2:	1b9b      	subs	r3, r3, r6
 80088b4:	60a3      	str	r3, [r4, #8]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	4433      	add	r3, r6
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	2000      	movs	r0, #0
 80088be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c2:	462a      	mov	r2, r5
 80088c4:	f000 fbf4 	bl	80090b0 <_realloc_r>
 80088c8:	4606      	mov	r6, r0
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d1e0      	bne.n	8008890 <__ssputs_r+0x5c>
 80088ce:	6921      	ldr	r1, [r4, #16]
 80088d0:	4650      	mov	r0, sl
 80088d2:	f7ff feb7 	bl	8008644 <_free_r>
 80088d6:	230c      	movs	r3, #12
 80088d8:	f8ca 3000 	str.w	r3, [sl]
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e7e9      	b.n	80088be <__ssputs_r+0x8a>
	...

080088ec <_svfiprintf_r>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	4698      	mov	r8, r3
 80088f2:	898b      	ldrh	r3, [r1, #12]
 80088f4:	061b      	lsls	r3, r3, #24
 80088f6:	b09d      	sub	sp, #116	@ 0x74
 80088f8:	4607      	mov	r7, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	4614      	mov	r4, r2
 80088fe:	d510      	bpl.n	8008922 <_svfiprintf_r+0x36>
 8008900:	690b      	ldr	r3, [r1, #16]
 8008902:	b973      	cbnz	r3, 8008922 <_svfiprintf_r+0x36>
 8008904:	2140      	movs	r1, #64	@ 0x40
 8008906:	f7ff ff09 	bl	800871c <_malloc_r>
 800890a:	6028      	str	r0, [r5, #0]
 800890c:	6128      	str	r0, [r5, #16]
 800890e:	b930      	cbnz	r0, 800891e <_svfiprintf_r+0x32>
 8008910:	230c      	movs	r3, #12
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	b01d      	add	sp, #116	@ 0x74
 800891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891e:	2340      	movs	r3, #64	@ 0x40
 8008920:	616b      	str	r3, [r5, #20]
 8008922:	2300      	movs	r3, #0
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	2320      	movs	r3, #32
 8008928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800892c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008930:	2330      	movs	r3, #48	@ 0x30
 8008932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ad0 <_svfiprintf_r+0x1e4>
 8008936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800893a:	f04f 0901 	mov.w	r9, #1
 800893e:	4623      	mov	r3, r4
 8008940:	469a      	mov	sl, r3
 8008942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008946:	b10a      	cbz	r2, 800894c <_svfiprintf_r+0x60>
 8008948:	2a25      	cmp	r2, #37	@ 0x25
 800894a:	d1f9      	bne.n	8008940 <_svfiprintf_r+0x54>
 800894c:	ebba 0b04 	subs.w	fp, sl, r4
 8008950:	d00b      	beq.n	800896a <_svfiprintf_r+0x7e>
 8008952:	465b      	mov	r3, fp
 8008954:	4622      	mov	r2, r4
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ff6b 	bl	8008834 <__ssputs_r>
 800895e:	3001      	adds	r0, #1
 8008960:	f000 80a7 	beq.w	8008ab2 <_svfiprintf_r+0x1c6>
 8008964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008966:	445a      	add	r2, fp
 8008968:	9209      	str	r2, [sp, #36]	@ 0x24
 800896a:	f89a 3000 	ldrb.w	r3, [sl]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 809f 	beq.w	8008ab2 <_svfiprintf_r+0x1c6>
 8008974:	2300      	movs	r3, #0
 8008976:	f04f 32ff 	mov.w	r2, #4294967295
 800897a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897e:	f10a 0a01 	add.w	sl, sl, #1
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	9307      	str	r3, [sp, #28]
 8008986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800898a:	931a      	str	r3, [sp, #104]	@ 0x68
 800898c:	4654      	mov	r4, sl
 800898e:	2205      	movs	r2, #5
 8008990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008994:	484e      	ldr	r0, [pc, #312]	@ (8008ad0 <_svfiprintf_r+0x1e4>)
 8008996:	f7f7 fc23 	bl	80001e0 <memchr>
 800899a:	9a04      	ldr	r2, [sp, #16]
 800899c:	b9d8      	cbnz	r0, 80089d6 <_svfiprintf_r+0xea>
 800899e:	06d0      	lsls	r0, r2, #27
 80089a0:	bf44      	itt	mi
 80089a2:	2320      	movmi	r3, #32
 80089a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a8:	0711      	lsls	r1, r2, #28
 80089aa:	bf44      	itt	mi
 80089ac:	232b      	movmi	r3, #43	@ 0x2b
 80089ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b2:	f89a 3000 	ldrb.w	r3, [sl]
 80089b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b8:	d015      	beq.n	80089e6 <_svfiprintf_r+0xfa>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	4654      	mov	r4, sl
 80089be:	2000      	movs	r0, #0
 80089c0:	f04f 0c0a 	mov.w	ip, #10
 80089c4:	4621      	mov	r1, r4
 80089c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ca:	3b30      	subs	r3, #48	@ 0x30
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	d94b      	bls.n	8008a68 <_svfiprintf_r+0x17c>
 80089d0:	b1b0      	cbz	r0, 8008a00 <_svfiprintf_r+0x114>
 80089d2:	9207      	str	r2, [sp, #28]
 80089d4:	e014      	b.n	8008a00 <_svfiprintf_r+0x114>
 80089d6:	eba0 0308 	sub.w	r3, r0, r8
 80089da:	fa09 f303 	lsl.w	r3, r9, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	46a2      	mov	sl, r4
 80089e4:	e7d2      	b.n	800898c <_svfiprintf_r+0xa0>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	1d19      	adds	r1, r3, #4
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	9103      	str	r1, [sp, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfbb      	ittet	lt
 80089f2:	425b      	neglt	r3, r3
 80089f4:	f042 0202 	orrlt.w	r2, r2, #2
 80089f8:	9307      	strge	r3, [sp, #28]
 80089fa:	9307      	strlt	r3, [sp, #28]
 80089fc:	bfb8      	it	lt
 80089fe:	9204      	strlt	r2, [sp, #16]
 8008a00:	7823      	ldrb	r3, [r4, #0]
 8008a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a04:	d10a      	bne.n	8008a1c <_svfiprintf_r+0x130>
 8008a06:	7863      	ldrb	r3, [r4, #1]
 8008a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a0a:	d132      	bne.n	8008a72 <_svfiprintf_r+0x186>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	1d1a      	adds	r2, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9203      	str	r2, [sp, #12]
 8008a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a18:	3402      	adds	r4, #2
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ae0 <_svfiprintf_r+0x1f4>
 8008a20:	7821      	ldrb	r1, [r4, #0]
 8008a22:	2203      	movs	r2, #3
 8008a24:	4650      	mov	r0, sl
 8008a26:	f7f7 fbdb 	bl	80001e0 <memchr>
 8008a2a:	b138      	cbz	r0, 8008a3c <_svfiprintf_r+0x150>
 8008a2c:	9b04      	ldr	r3, [sp, #16]
 8008a2e:	eba0 000a 	sub.w	r0, r0, sl
 8008a32:	2240      	movs	r2, #64	@ 0x40
 8008a34:	4082      	lsls	r2, r0
 8008a36:	4313      	orrs	r3, r2
 8008a38:	3401      	adds	r4, #1
 8008a3a:	9304      	str	r3, [sp, #16]
 8008a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a40:	4824      	ldr	r0, [pc, #144]	@ (8008ad4 <_svfiprintf_r+0x1e8>)
 8008a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a46:	2206      	movs	r2, #6
 8008a48:	f7f7 fbca 	bl	80001e0 <memchr>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d036      	beq.n	8008abe <_svfiprintf_r+0x1d2>
 8008a50:	4b21      	ldr	r3, [pc, #132]	@ (8008ad8 <_svfiprintf_r+0x1ec>)
 8008a52:	bb1b      	cbnz	r3, 8008a9c <_svfiprintf_r+0x1b0>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	3307      	adds	r3, #7
 8008a58:	f023 0307 	bic.w	r3, r3, #7
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	4433      	add	r3, r6
 8008a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a66:	e76a      	b.n	800893e <_svfiprintf_r+0x52>
 8008a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e7a8      	b.n	80089c4 <_svfiprintf_r+0xd8>
 8008a72:	2300      	movs	r3, #0
 8008a74:	3401      	adds	r4, #1
 8008a76:	9305      	str	r3, [sp, #20]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a84:	3a30      	subs	r2, #48	@ 0x30
 8008a86:	2a09      	cmp	r2, #9
 8008a88:	d903      	bls.n	8008a92 <_svfiprintf_r+0x1a6>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0c6      	beq.n	8008a1c <_svfiprintf_r+0x130>
 8008a8e:	9105      	str	r1, [sp, #20]
 8008a90:	e7c4      	b.n	8008a1c <_svfiprintf_r+0x130>
 8008a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a96:	4604      	mov	r4, r0
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e7f0      	b.n	8008a7e <_svfiprintf_r+0x192>
 8008a9c:	ab03      	add	r3, sp, #12
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8008adc <_svfiprintf_r+0x1f0>)
 8008aa4:	a904      	add	r1, sp, #16
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f3af 8000 	nop.w
 8008aac:	1c42      	adds	r2, r0, #1
 8008aae:	4606      	mov	r6, r0
 8008ab0:	d1d6      	bne.n	8008a60 <_svfiprintf_r+0x174>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	065b      	lsls	r3, r3, #25
 8008ab6:	f53f af2d 	bmi.w	8008914 <_svfiprintf_r+0x28>
 8008aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008abc:	e72c      	b.n	8008918 <_svfiprintf_r+0x2c>
 8008abe:	ab03      	add	r3, sp, #12
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <_svfiprintf_r+0x1f0>)
 8008ac6:	a904      	add	r1, sp, #16
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f000 f879 	bl	8008bc0 <_printf_i>
 8008ace:	e7ed      	b.n	8008aac <_svfiprintf_r+0x1c0>
 8008ad0:	08009278 	.word	0x08009278
 8008ad4:	08009282 	.word	0x08009282
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	08008835 	.word	0x08008835
 8008ae0:	0800927e 	.word	0x0800927e

08008ae4 <_printf_common>:
 8008ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	4616      	mov	r6, r2
 8008aea:	4698      	mov	r8, r3
 8008aec:	688a      	ldr	r2, [r1, #8]
 8008aee:	690b      	ldr	r3, [r1, #16]
 8008af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	bfb8      	it	lt
 8008af8:	4613      	movlt	r3, r2
 8008afa:	6033      	str	r3, [r6, #0]
 8008afc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b00:	4607      	mov	r7, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b10a      	cbz	r2, 8008b0a <_printf_common+0x26>
 8008b06:	3301      	adds	r3, #1
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	0699      	lsls	r1, r3, #26
 8008b0e:	bf42      	ittt	mi
 8008b10:	6833      	ldrmi	r3, [r6, #0]
 8008b12:	3302      	addmi	r3, #2
 8008b14:	6033      	strmi	r3, [r6, #0]
 8008b16:	6825      	ldr	r5, [r4, #0]
 8008b18:	f015 0506 	ands.w	r5, r5, #6
 8008b1c:	d106      	bne.n	8008b2c <_printf_common+0x48>
 8008b1e:	f104 0a19 	add.w	sl, r4, #25
 8008b22:	68e3      	ldr	r3, [r4, #12]
 8008b24:	6832      	ldr	r2, [r6, #0]
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	42ab      	cmp	r3, r5
 8008b2a:	dc26      	bgt.n	8008b7a <_printf_common+0x96>
 8008b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	3b00      	subs	r3, #0
 8008b34:	bf18      	it	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	0692      	lsls	r2, r2, #26
 8008b3a:	d42b      	bmi.n	8008b94 <_printf_common+0xb0>
 8008b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b40:	4641      	mov	r1, r8
 8008b42:	4638      	mov	r0, r7
 8008b44:	47c8      	blx	r9
 8008b46:	3001      	adds	r0, #1
 8008b48:	d01e      	beq.n	8008b88 <_printf_common+0xa4>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	f003 0306 	and.w	r3, r3, #6
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	bf02      	ittt	eq
 8008b56:	68e5      	ldreq	r5, [r4, #12]
 8008b58:	6833      	ldreq	r3, [r6, #0]
 8008b5a:	1aed      	subeq	r5, r5, r3
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	bf0c      	ite	eq
 8008b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b64:	2500      	movne	r5, #0
 8008b66:	4293      	cmp	r3, r2
 8008b68:	bfc4      	itt	gt
 8008b6a:	1a9b      	subgt	r3, r3, r2
 8008b6c:	18ed      	addgt	r5, r5, r3
 8008b6e:	2600      	movs	r6, #0
 8008b70:	341a      	adds	r4, #26
 8008b72:	42b5      	cmp	r5, r6
 8008b74:	d11a      	bne.n	8008bac <_printf_common+0xc8>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e008      	b.n	8008b8c <_printf_common+0xa8>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4641      	mov	r1, r8
 8008b80:	4638      	mov	r0, r7
 8008b82:	47c8      	blx	r9
 8008b84:	3001      	adds	r0, #1
 8008b86:	d103      	bne.n	8008b90 <_printf_common+0xac>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	3501      	adds	r5, #1
 8008b92:	e7c6      	b.n	8008b22 <_printf_common+0x3e>
 8008b94:	18e1      	adds	r1, r4, r3
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	2030      	movs	r0, #48	@ 0x30
 8008b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b9e:	4422      	add	r2, r4
 8008ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ba8:	3302      	adds	r3, #2
 8008baa:	e7c7      	b.n	8008b3c <_printf_common+0x58>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4622      	mov	r2, r4
 8008bb0:	4641      	mov	r1, r8
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c8      	blx	r9
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d0e6      	beq.n	8008b88 <_printf_common+0xa4>
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7d9      	b.n	8008b72 <_printf_common+0x8e>
	...

08008bc0 <_printf_i>:
 8008bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	7e0f      	ldrb	r7, [r1, #24]
 8008bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bc8:	2f78      	cmp	r7, #120	@ 0x78
 8008bca:	4691      	mov	r9, r2
 8008bcc:	4680      	mov	r8, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bd6:	d807      	bhi.n	8008be8 <_printf_i+0x28>
 8008bd8:	2f62      	cmp	r7, #98	@ 0x62
 8008bda:	d80a      	bhi.n	8008bf2 <_printf_i+0x32>
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	f000 80d1 	beq.w	8008d84 <_printf_i+0x1c4>
 8008be2:	2f58      	cmp	r7, #88	@ 0x58
 8008be4:	f000 80b8 	beq.w	8008d58 <_printf_i+0x198>
 8008be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bf0:	e03a      	b.n	8008c68 <_printf_i+0xa8>
 8008bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bf6:	2b15      	cmp	r3, #21
 8008bf8:	d8f6      	bhi.n	8008be8 <_printf_i+0x28>
 8008bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8008c00 <_printf_i+0x40>)
 8008bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008be9 	.word	0x08008be9
 8008c0c:	08008be9 	.word	0x08008be9
 8008c10:	08008be9 	.word	0x08008be9
 8008c14:	08008be9 	.word	0x08008be9
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008be9 	.word	0x08008be9
 8008c20:	08008be9 	.word	0x08008be9
 8008c24:	08008be9 	.word	0x08008be9
 8008c28:	08008be9 	.word	0x08008be9
 8008c2c:	08008d6b 	.word	0x08008d6b
 8008c30:	08008c97 	.word	0x08008c97
 8008c34:	08008d25 	.word	0x08008d25
 8008c38:	08008be9 	.word	0x08008be9
 8008c3c:	08008be9 	.word	0x08008be9
 8008c40:	08008d8d 	.word	0x08008d8d
 8008c44:	08008be9 	.word	0x08008be9
 8008c48:	08008c97 	.word	0x08008c97
 8008c4c:	08008be9 	.word	0x08008be9
 8008c50:	08008be9 	.word	0x08008be9
 8008c54:	08008d2d 	.word	0x08008d2d
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6032      	str	r2, [r6, #0]
 8008c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e09c      	b.n	8008da6 <_printf_i+0x1e6>
 8008c6c:	6833      	ldr	r3, [r6, #0]
 8008c6e:	6820      	ldr	r0, [r4, #0]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	6031      	str	r1, [r6, #0]
 8008c74:	0606      	lsls	r6, r0, #24
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0xbc>
 8008c78:	681d      	ldr	r5, [r3, #0]
 8008c7a:	e003      	b.n	8008c84 <_printf_i+0xc4>
 8008c7c:	0645      	lsls	r5, r0, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0xb8>
 8008c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	da03      	bge.n	8008c90 <_printf_i+0xd0>
 8008c88:	232d      	movs	r3, #45	@ 0x2d
 8008c8a:	426d      	negs	r5, r5
 8008c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c90:	4858      	ldr	r0, [pc, #352]	@ (8008df4 <_printf_i+0x234>)
 8008c92:	230a      	movs	r3, #10
 8008c94:	e011      	b.n	8008cba <_printf_i+0xfa>
 8008c96:	6821      	ldr	r1, [r4, #0]
 8008c98:	6833      	ldr	r3, [r6, #0]
 8008c9a:	0608      	lsls	r0, r1, #24
 8008c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ca0:	d402      	bmi.n	8008ca8 <_printf_i+0xe8>
 8008ca2:	0649      	lsls	r1, r1, #25
 8008ca4:	bf48      	it	mi
 8008ca6:	b2ad      	uxthmi	r5, r5
 8008ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008caa:	4852      	ldr	r0, [pc, #328]	@ (8008df4 <_printf_i+0x234>)
 8008cac:	6033      	str	r3, [r6, #0]
 8008cae:	bf14      	ite	ne
 8008cb0:	230a      	movne	r3, #10
 8008cb2:	2308      	moveq	r3, #8
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cba:	6866      	ldr	r6, [r4, #4]
 8008cbc:	60a6      	str	r6, [r4, #8]
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	db05      	blt.n	8008cce <_printf_i+0x10e>
 8008cc2:	6821      	ldr	r1, [r4, #0]
 8008cc4:	432e      	orrs	r6, r5
 8008cc6:	f021 0104 	bic.w	r1, r1, #4
 8008cca:	6021      	str	r1, [r4, #0]
 8008ccc:	d04b      	beq.n	8008d66 <_printf_i+0x1a6>
 8008cce:	4616      	mov	r6, r2
 8008cd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cd4:	fb03 5711 	mls	r7, r3, r1, r5
 8008cd8:	5dc7      	ldrb	r7, [r0, r7]
 8008cda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cde:	462f      	mov	r7, r5
 8008ce0:	42bb      	cmp	r3, r7
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	d9f4      	bls.n	8008cd0 <_printf_i+0x110>
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	d10b      	bne.n	8008d02 <_printf_i+0x142>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	07df      	lsls	r7, r3, #31
 8008cee:	d508      	bpl.n	8008d02 <_printf_i+0x142>
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	6861      	ldr	r1, [r4, #4]
 8008cf4:	4299      	cmp	r1, r3
 8008cf6:	bfde      	ittt	le
 8008cf8:	2330      	movle	r3, #48	@ 0x30
 8008cfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d02:	1b92      	subs	r2, r2, r6
 8008d04:	6122      	str	r2, [r4, #16]
 8008d06:	f8cd a000 	str.w	sl, [sp]
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	aa03      	add	r2, sp, #12
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4640      	mov	r0, r8
 8008d12:	f7ff fee7 	bl	8008ae4 <_printf_common>
 8008d16:	3001      	adds	r0, #1
 8008d18:	d14a      	bne.n	8008db0 <_printf_i+0x1f0>
 8008d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1e:	b004      	add	sp, #16
 8008d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	f043 0320 	orr.w	r3, r3, #32
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	4832      	ldr	r0, [pc, #200]	@ (8008df8 <_printf_i+0x238>)
 8008d2e:	2778      	movs	r7, #120	@ 0x78
 8008d30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	6831      	ldr	r1, [r6, #0]
 8008d38:	061f      	lsls	r7, r3, #24
 8008d3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d3e:	d402      	bmi.n	8008d46 <_printf_i+0x186>
 8008d40:	065f      	lsls	r7, r3, #25
 8008d42:	bf48      	it	mi
 8008d44:	b2ad      	uxthmi	r5, r5
 8008d46:	6031      	str	r1, [r6, #0]
 8008d48:	07d9      	lsls	r1, r3, #31
 8008d4a:	bf44      	itt	mi
 8008d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008d50:	6023      	strmi	r3, [r4, #0]
 8008d52:	b11d      	cbz	r5, 8008d5c <_printf_i+0x19c>
 8008d54:	2310      	movs	r3, #16
 8008d56:	e7ad      	b.n	8008cb4 <_printf_i+0xf4>
 8008d58:	4826      	ldr	r0, [pc, #152]	@ (8008df4 <_printf_i+0x234>)
 8008d5a:	e7e9      	b.n	8008d30 <_printf_i+0x170>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	f023 0320 	bic.w	r3, r3, #32
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	e7f6      	b.n	8008d54 <_printf_i+0x194>
 8008d66:	4616      	mov	r6, r2
 8008d68:	e7bd      	b.n	8008ce6 <_printf_i+0x126>
 8008d6a:	6833      	ldr	r3, [r6, #0]
 8008d6c:	6825      	ldr	r5, [r4, #0]
 8008d6e:	6961      	ldr	r1, [r4, #20]
 8008d70:	1d18      	adds	r0, r3, #4
 8008d72:	6030      	str	r0, [r6, #0]
 8008d74:	062e      	lsls	r6, r5, #24
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	d501      	bpl.n	8008d7e <_printf_i+0x1be>
 8008d7a:	6019      	str	r1, [r3, #0]
 8008d7c:	e002      	b.n	8008d84 <_printf_i+0x1c4>
 8008d7e:	0668      	lsls	r0, r5, #25
 8008d80:	d5fb      	bpl.n	8008d7a <_printf_i+0x1ba>
 8008d82:	8019      	strh	r1, [r3, #0]
 8008d84:	2300      	movs	r3, #0
 8008d86:	6123      	str	r3, [r4, #16]
 8008d88:	4616      	mov	r6, r2
 8008d8a:	e7bc      	b.n	8008d06 <_printf_i+0x146>
 8008d8c:	6833      	ldr	r3, [r6, #0]
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	6032      	str	r2, [r6, #0]
 8008d92:	681e      	ldr	r6, [r3, #0]
 8008d94:	6862      	ldr	r2, [r4, #4]
 8008d96:	2100      	movs	r1, #0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7f7 fa21 	bl	80001e0 <memchr>
 8008d9e:	b108      	cbz	r0, 8008da4 <_printf_i+0x1e4>
 8008da0:	1b80      	subs	r0, r0, r6
 8008da2:	6060      	str	r0, [r4, #4]
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	2300      	movs	r3, #0
 8008daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dae:	e7aa      	b.n	8008d06 <_printf_i+0x146>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	4632      	mov	r2, r6
 8008db4:	4649      	mov	r1, r9
 8008db6:	4640      	mov	r0, r8
 8008db8:	47d0      	blx	sl
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d0ad      	beq.n	8008d1a <_printf_i+0x15a>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	079b      	lsls	r3, r3, #30
 8008dc2:	d413      	bmi.n	8008dec <_printf_i+0x22c>
 8008dc4:	68e0      	ldr	r0, [r4, #12]
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	4298      	cmp	r0, r3
 8008dca:	bfb8      	it	lt
 8008dcc:	4618      	movlt	r0, r3
 8008dce:	e7a6      	b.n	8008d1e <_printf_i+0x15e>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4632      	mov	r2, r6
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	47d0      	blx	sl
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d09d      	beq.n	8008d1a <_printf_i+0x15a>
 8008dde:	3501      	adds	r5, #1
 8008de0:	68e3      	ldr	r3, [r4, #12]
 8008de2:	9903      	ldr	r1, [sp, #12]
 8008de4:	1a5b      	subs	r3, r3, r1
 8008de6:	42ab      	cmp	r3, r5
 8008de8:	dcf2      	bgt.n	8008dd0 <_printf_i+0x210>
 8008dea:	e7eb      	b.n	8008dc4 <_printf_i+0x204>
 8008dec:	2500      	movs	r5, #0
 8008dee:	f104 0619 	add.w	r6, r4, #25
 8008df2:	e7f5      	b.n	8008de0 <_printf_i+0x220>
 8008df4:	08009289 	.word	0x08009289
 8008df8:	0800929a 	.word	0x0800929a

08008dfc <__sflush_r>:
 8008dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	0716      	lsls	r6, r2, #28
 8008e06:	4605      	mov	r5, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	d454      	bmi.n	8008eb6 <__sflush_r+0xba>
 8008e0c:	684b      	ldr	r3, [r1, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dc02      	bgt.n	8008e18 <__sflush_r+0x1c>
 8008e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd48      	ble.n	8008eaa <__sflush_r+0xae>
 8008e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e1a:	2e00      	cmp	r6, #0
 8008e1c:	d045      	beq.n	8008eaa <__sflush_r+0xae>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e24:	682f      	ldr	r7, [r5, #0]
 8008e26:	6a21      	ldr	r1, [r4, #32]
 8008e28:	602b      	str	r3, [r5, #0]
 8008e2a:	d030      	beq.n	8008e8e <__sflush_r+0x92>
 8008e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	0759      	lsls	r1, r3, #29
 8008e32:	d505      	bpl.n	8008e40 <__sflush_r+0x44>
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e3a:	b10b      	cbz	r3, 8008e40 <__sflush_r+0x44>
 8008e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	2300      	movs	r3, #0
 8008e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e44:	6a21      	ldr	r1, [r4, #32]
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b0      	blx	r6
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	d106      	bne.n	8008e5e <__sflush_r+0x62>
 8008e50:	6829      	ldr	r1, [r5, #0]
 8008e52:	291d      	cmp	r1, #29
 8008e54:	d82b      	bhi.n	8008eae <__sflush_r+0xb2>
 8008e56:	4a2a      	ldr	r2, [pc, #168]	@ (8008f00 <__sflush_r+0x104>)
 8008e58:	40ca      	lsrs	r2, r1
 8008e5a:	07d6      	lsls	r6, r2, #31
 8008e5c:	d527      	bpl.n	8008eae <__sflush_r+0xb2>
 8008e5e:	2200      	movs	r2, #0
 8008e60:	6062      	str	r2, [r4, #4]
 8008e62:	04d9      	lsls	r1, r3, #19
 8008e64:	6922      	ldr	r2, [r4, #16]
 8008e66:	6022      	str	r2, [r4, #0]
 8008e68:	d504      	bpl.n	8008e74 <__sflush_r+0x78>
 8008e6a:	1c42      	adds	r2, r0, #1
 8008e6c:	d101      	bne.n	8008e72 <__sflush_r+0x76>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	b903      	cbnz	r3, 8008e74 <__sflush_r+0x78>
 8008e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e76:	602f      	str	r7, [r5, #0]
 8008e78:	b1b9      	cbz	r1, 8008eaa <__sflush_r+0xae>
 8008e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	d002      	beq.n	8008e88 <__sflush_r+0x8c>
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7ff fbde 	bl	8008644 <_free_r>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e8c:	e00d      	b.n	8008eaa <__sflush_r+0xae>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b0      	blx	r6
 8008e94:	4602      	mov	r2, r0
 8008e96:	1c50      	adds	r0, r2, #1
 8008e98:	d1c9      	bne.n	8008e2e <__sflush_r+0x32>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0c6      	beq.n	8008e2e <__sflush_r+0x32>
 8008ea0:	2b1d      	cmp	r3, #29
 8008ea2:	d001      	beq.n	8008ea8 <__sflush_r+0xac>
 8008ea4:	2b16      	cmp	r3, #22
 8008ea6:	d11e      	bne.n	8008ee6 <__sflush_r+0xea>
 8008ea8:	602f      	str	r7, [r5, #0]
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e022      	b.n	8008ef4 <__sflush_r+0xf8>
 8008eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eb2:	b21b      	sxth	r3, r3
 8008eb4:	e01b      	b.n	8008eee <__sflush_r+0xf2>
 8008eb6:	690f      	ldr	r7, [r1, #16]
 8008eb8:	2f00      	cmp	r7, #0
 8008eba:	d0f6      	beq.n	8008eaa <__sflush_r+0xae>
 8008ebc:	0793      	lsls	r3, r2, #30
 8008ebe:	680e      	ldr	r6, [r1, #0]
 8008ec0:	bf08      	it	eq
 8008ec2:	694b      	ldreq	r3, [r1, #20]
 8008ec4:	600f      	str	r7, [r1, #0]
 8008ec6:	bf18      	it	ne
 8008ec8:	2300      	movne	r3, #0
 8008eca:	eba6 0807 	sub.w	r8, r6, r7
 8008ece:	608b      	str	r3, [r1, #8]
 8008ed0:	f1b8 0f00 	cmp.w	r8, #0
 8008ed4:	dde9      	ble.n	8008eaa <__sflush_r+0xae>
 8008ed6:	6a21      	ldr	r1, [r4, #32]
 8008ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008eda:	4643      	mov	r3, r8
 8008edc:	463a      	mov	r2, r7
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b0      	blx	r6
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	dc08      	bgt.n	8008ef8 <__sflush_r+0xfc>
 8008ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef8:	4407      	add	r7, r0
 8008efa:	eba8 0800 	sub.w	r8, r8, r0
 8008efe:	e7e7      	b.n	8008ed0 <__sflush_r+0xd4>
 8008f00:	20400001 	.word	0x20400001

08008f04 <_fflush_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	4605      	mov	r5, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b913      	cbnz	r3, 8008f14 <_fflush_r+0x10>
 8008f0e:	2500      	movs	r5, #0
 8008f10:	4628      	mov	r0, r5
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	b118      	cbz	r0, 8008f1e <_fflush_r+0x1a>
 8008f16:	6a03      	ldr	r3, [r0, #32]
 8008f18:	b90b      	cbnz	r3, 8008f1e <_fflush_r+0x1a>
 8008f1a:	f7ff f909 	bl	8008130 <__sinit>
 8008f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f3      	beq.n	8008f0e <_fflush_r+0xa>
 8008f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f28:	07d0      	lsls	r0, r2, #31
 8008f2a:	d404      	bmi.n	8008f36 <_fflush_r+0x32>
 8008f2c:	0599      	lsls	r1, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_fflush_r+0x32>
 8008f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f32:	f7ff fb76 	bl	8008622 <__retarget_lock_acquire_recursive>
 8008f36:	4628      	mov	r0, r5
 8008f38:	4621      	mov	r1, r4
 8008f3a:	f7ff ff5f 	bl	8008dfc <__sflush_r>
 8008f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f40:	07da      	lsls	r2, r3, #31
 8008f42:	4605      	mov	r5, r0
 8008f44:	d4e4      	bmi.n	8008f10 <_fflush_r+0xc>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	059b      	lsls	r3, r3, #22
 8008f4a:	d4e1      	bmi.n	8008f10 <_fflush_r+0xc>
 8008f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f4e:	f7ff fb69 	bl	8008624 <__retarget_lock_release_recursive>
 8008f52:	e7dd      	b.n	8008f10 <_fflush_r+0xc>

08008f54 <__swhatbuf_r>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	460c      	mov	r4, r1
 8008f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	b096      	sub	sp, #88	@ 0x58
 8008f60:	4615      	mov	r5, r2
 8008f62:	461e      	mov	r6, r3
 8008f64:	da0d      	bge.n	8008f82 <__swhatbuf_r+0x2e>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f6c:	f04f 0100 	mov.w	r1, #0
 8008f70:	bf14      	ite	ne
 8008f72:	2340      	movne	r3, #64	@ 0x40
 8008f74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f78:	2000      	movs	r0, #0
 8008f7a:	6031      	str	r1, [r6, #0]
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	b016      	add	sp, #88	@ 0x58
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	466a      	mov	r2, sp
 8008f84:	f000 f862 	bl	800904c <_fstat_r>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	dbec      	blt.n	8008f66 <__swhatbuf_r+0x12>
 8008f8c:	9901      	ldr	r1, [sp, #4]
 8008f8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f96:	4259      	negs	r1, r3
 8008f98:	4159      	adcs	r1, r3
 8008f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f9e:	e7eb      	b.n	8008f78 <__swhatbuf_r+0x24>

08008fa0 <__smakebuf_r>:
 8008fa0:	898b      	ldrh	r3, [r1, #12]
 8008fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa4:	079d      	lsls	r5, r3, #30
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	460c      	mov	r4, r1
 8008faa:	d507      	bpl.n	8008fbc <__smakebuf_r+0x1c>
 8008fac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	6123      	str	r3, [r4, #16]
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	6163      	str	r3, [r4, #20]
 8008fb8:	b003      	add	sp, #12
 8008fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fbc:	ab01      	add	r3, sp, #4
 8008fbe:	466a      	mov	r2, sp
 8008fc0:	f7ff ffc8 	bl	8008f54 <__swhatbuf_r>
 8008fc4:	9f00      	ldr	r7, [sp, #0]
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	4639      	mov	r1, r7
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff fba6 	bl	800871c <_malloc_r>
 8008fd0:	b948      	cbnz	r0, 8008fe6 <__smakebuf_r+0x46>
 8008fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd6:	059a      	lsls	r2, r3, #22
 8008fd8:	d4ee      	bmi.n	8008fb8 <__smakebuf_r+0x18>
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	e7e2      	b.n	8008fac <__smakebuf_r+0xc>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	6020      	str	r0, [r4, #0]
 8008fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ff6:	b15b      	cbz	r3, 8009010 <__smakebuf_r+0x70>
 8008ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f837 	bl	8009070 <_isatty_r>
 8009002:	b128      	cbz	r0, 8009010 <__smakebuf_r+0x70>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	431d      	orrs	r5, r3
 8009014:	81a5      	strh	r5, [r4, #12]
 8009016:	e7cf      	b.n	8008fb8 <__smakebuf_r+0x18>

08009018 <memmove>:
 8009018:	4288      	cmp	r0, r1
 800901a:	b510      	push	{r4, lr}
 800901c:	eb01 0402 	add.w	r4, r1, r2
 8009020:	d902      	bls.n	8009028 <memmove+0x10>
 8009022:	4284      	cmp	r4, r0
 8009024:	4623      	mov	r3, r4
 8009026:	d807      	bhi.n	8009038 <memmove+0x20>
 8009028:	1e43      	subs	r3, r0, #1
 800902a:	42a1      	cmp	r1, r4
 800902c:	d008      	beq.n	8009040 <memmove+0x28>
 800902e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009036:	e7f8      	b.n	800902a <memmove+0x12>
 8009038:	4402      	add	r2, r0
 800903a:	4601      	mov	r1, r0
 800903c:	428a      	cmp	r2, r1
 800903e:	d100      	bne.n	8009042 <memmove+0x2a>
 8009040:	bd10      	pop	{r4, pc}
 8009042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800904a:	e7f7      	b.n	800903c <memmove+0x24>

0800904c <_fstat_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d07      	ldr	r5, [pc, #28]	@ (800906c <_fstat_r+0x20>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	4611      	mov	r1, r2
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	f7f8 f96a 	bl	8001332 <_fstat>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	d102      	bne.n	8009068 <_fstat_r+0x1c>
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	b103      	cbz	r3, 8009068 <_fstat_r+0x1c>
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	bf00      	nop
 800906c:	20006054 	.word	0x20006054

08009070 <_isatty_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	@ (800908c <_isatty_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f7f8 f969 	bl	8001352 <_isatty>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_isatty_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_isatty_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20006054 	.word	0x20006054

08009090 <_sbrk_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d06      	ldr	r5, [pc, #24]	@ (80090ac <_sbrk_r+0x1c>)
 8009094:	2300      	movs	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7f8 f972 	bl	8001384 <_sbrk>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_sbrk_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_sbrk_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	20006054 	.word	0x20006054

080090b0 <_realloc_r>:
 80090b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b4:	4607      	mov	r7, r0
 80090b6:	4614      	mov	r4, r2
 80090b8:	460d      	mov	r5, r1
 80090ba:	b921      	cbnz	r1, 80090c6 <_realloc_r+0x16>
 80090bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	4611      	mov	r1, r2
 80090c2:	f7ff bb2b 	b.w	800871c <_malloc_r>
 80090c6:	b92a      	cbnz	r2, 80090d4 <_realloc_r+0x24>
 80090c8:	f7ff fabc 	bl	8008644 <_free_r>
 80090cc:	4625      	mov	r5, r4
 80090ce:	4628      	mov	r0, r5
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	f000 f81a 	bl	800910c <_malloc_usable_size_r>
 80090d8:	4284      	cmp	r4, r0
 80090da:	4606      	mov	r6, r0
 80090dc:	d802      	bhi.n	80090e4 <_realloc_r+0x34>
 80090de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090e2:	d8f4      	bhi.n	80090ce <_realloc_r+0x1e>
 80090e4:	4621      	mov	r1, r4
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7ff fb18 	bl	800871c <_malloc_r>
 80090ec:	4680      	mov	r8, r0
 80090ee:	b908      	cbnz	r0, 80090f4 <_realloc_r+0x44>
 80090f0:	4645      	mov	r5, r8
 80090f2:	e7ec      	b.n	80090ce <_realloc_r+0x1e>
 80090f4:	42b4      	cmp	r4, r6
 80090f6:	4622      	mov	r2, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	bf28      	it	cs
 80090fc:	4632      	movcs	r2, r6
 80090fe:	f7ff fa92 	bl	8008626 <memcpy>
 8009102:	4629      	mov	r1, r5
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff fa9d 	bl	8008644 <_free_r>
 800910a:	e7f1      	b.n	80090f0 <_realloc_r+0x40>

0800910c <_malloc_usable_size_r>:
 800910c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009110:	1f18      	subs	r0, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	bfbc      	itt	lt
 8009116:	580b      	ldrlt	r3, [r1, r0]
 8009118:	18c0      	addlt	r0, r0, r3
 800911a:	4770      	bx	lr

0800911c <_init>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr

08009128 <_fini>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr
