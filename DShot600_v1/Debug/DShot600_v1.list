
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08008dc4  08008dc4  00009dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f4c  08008f4c  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f4c  08008f4c  00009f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f54  08008f54  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f54  08008f54  00009f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f58  08008f58  00009f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008f5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00005ff4  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006060  20006060  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001998c  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036fe  00000000  00000000  00023a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00027128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d7  00000000  00000000  000286d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043c9  00000000  00000000  000297af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017662  00000000  00000000  0002db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0d3  00000000  00000000  000451da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001122ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063b0  00000000  00000000  001122f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001186a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dac 	.word	0x08008dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008dac 	.word	0x08008dac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ff04 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f844 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f98e 	bl	80008d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 f956 	bl	800086c <MX_DMA_Init>
  MX_TIM5_Init();
 80005c0:	f000 f8a8 	bl	8000714 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80005c4:	f000 f928 	bl	8000818 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_USART1_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f004 fbce 	bl	8004d6c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, SERIAL_QUEUE_ITEM_SIZE, NULL);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	200a      	movs	r0, #10
 80005d6:	f004 fcc0 	bl	8004f5a <osMessageQueueNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x6c>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <main+0x70>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	480e      	ldr	r0, [pc, #56]	@ (8000620 <main+0x74>)
 80005e6:	f004 fc0b 	bl	8004e00 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <main+0x78>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <main+0x7c>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <main+0x80>)
 80005f6:	f004 fc03 	bl	8004e00 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <main+0x84>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <main+0x88>)
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x8c>)
 8000606:	f004 fbfb 	bl	8004e00 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <main+0x90>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 fbd0 	bl	8004db4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x68>
 8000618:	200002b8 	.word	0x200002b8
 800061c:	08008e8c 	.word	0x08008e8c
 8000620:	08000bb9 	.word	0x08000bb9
 8000624:	20000220 	.word	0x20000220
 8000628:	08008eb0 	.word	0x08008eb0
 800062c:	08000bc9 	.word	0x08000bc9
 8000630:	20000224 	.word	0x20000224
 8000634:	08008ed4 	.word	0x08008ed4
 8000638:	08000c85 	.word	0x08000c85
 800063c:	20000228 	.word	0x20000228

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 fd58 	bl	8008104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	@ 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fd3b 	bl	8002140 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 fb44 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 ff9c 	bl	8002630 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 fb2d 	bl	8000d5c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_TIM5_Init+0xac>)
 800073a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 70;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800074a:	2246      	movs	r2, #70	@ 0x46
 800074c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800075a:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800075c:	f002 fa44 	bl	8002be8 <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000766:	f000 faf9 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4619      	mov	r1, r3
 8000778:	4810      	ldr	r0, [pc, #64]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800077a:	f003 f97f 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 faea 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000788:	2360      	movs	r3, #96	@ 0x60
 800078a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007a0:	f002 fd2a 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fad7 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007b0:	f000 fb62 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	@ 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000088 	.word	0x20000088
 80007c0:	40000c00 	.word	0x40000c00

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007ca:	4a11      	ldr	r2, [pc, #68]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3000000;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007d0:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_USART1_UART_Init+0x50>)
 80007d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007e8:	220c      	movs	r2, #12
 80007ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_USART1_UART_Init+0x48>)
 80007fa:	f003 f9cf 	bl	8003b9c <HAL_UART_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000804:	f000 faaa 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000130 	.word	0x20000130
 8000810:	40011000 	.word	0x40011000
 8000814:	002dc6c0 	.word	0x002dc6c0

08000818 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART6_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800083e:	2208      	movs	r2, #8
 8000840:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART6_UART_Init+0x4c>)
 8000850:	f003 f9a4 	bl	8003b9c <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 fa7f 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000178 	.word	0x20000178
 8000868:	40011400 	.word	0x40011400

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <MX_DMA_Init+0x68>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <MX_DMA_Init+0x68>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_DMA_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	200d      	movs	r0, #13
 80008b0:	f000 fe7e 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008b4:	200d      	movs	r0, #13
 80008b6:	f000 fe97 	bl	80015e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	203a      	movs	r0, #58	@ 0x3a
 80008c0:	f000 fe76 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008c4:	203a      	movs	r0, #58	@ 0x3a
 80008c6:	f000 fe8f 	bl	80015e8 <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <MX_GPIO_Init+0xb0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <MX_GPIO_Init+0xb0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_GPIO_Init+0xb0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_GPIO_Init+0xb0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_GPIO_Init+0xb0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a1a      	ldr	r2, [pc, #104]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_GPIO_Init+0xb0>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_GPIO_Init+0xb0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1_RX
 800096e:	2307      	movs	r3, #7
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_GPIO_Init+0xb4>)
 800097a:	f001 fa45 	bl	8001e08 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	@ 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <prepare_bdshot_buffer>:

/* USER CODE BEGIN 4 */
void prepare_bdshot_buffer(uint16_t frame)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

    // 1️⃣ Insert a dummy 0 at the start to absorb the DMA skip
    //dshot_buffer[buffer_index++] = 0;  // Dummy preload entry

    // 2️⃣ Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 800099e:	230f      	movs	r3, #15
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	e02a      	b.n	80009fa <prepare_bdshot_buffer+0x6a>
    {
        uint8_t bit = (frame >> i) & 0x01;
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa42 f303 	asr.w	r3, r2, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
        if (bit)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00e      	beq.n	80009d8 <prepare_bdshot_buffer+0x48>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009c2:	2169      	movs	r1, #105	@ 0x69
 80009c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	617a      	str	r2, [r7, #20]
 80009ce:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009d6:	e00d      	b.n	80009f4 <prepare_bdshot_buffer+0x64>
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	617a      	str	r2, [r7, #20]
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009e0:	2134      	movs	r1, #52	@ 0x34
 80009e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            dshot_buffer[buffer_index++] = 0;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	617a      	str	r2, [r7, #20]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	dad1      	bge.n	80009a4 <prepare_bdshot_buffer+0x14>
        }
    }

    // 3️⃣ Final low pulses (as before)
    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	617a      	str	r2, [r7, #20]
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    dshot_buffer[buffer_index++] = 0;  // Extra delay
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	617a      	str	r2, [r7, #20]
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <prepare_bdshot_buffer+0x98>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a1c:	bf00      	nop
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	2000022c 	.word	0x2000022c

08000a2c <bdshot_crc>:

// Generate CRC (same as spec)
uint16_t bdshot_crc(uint16_t value) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
    uint16_t crc = value ^ (value >> 4) ^ (value >> 8);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	4053      	eors	r3, r2
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	4053      	eors	r3, r2
 8000a4a:	81fb      	strh	r3, [r7, #14]
    crc = ~crc; // Invert bits
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	81fb      	strh	r3, [r7, #14]
    return crc & 0x0F; // Mask to 4 bits
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	b29b      	uxth	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	460a      	mov	r2, r1
 8000a70:	80fb      	strh	r3, [r7, #6]
 8000a72:	4613      	mov	r3, r2
 8000a74:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	e01b      	b.n	8000ab8 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a86:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 8000a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffc5 	bl	8000a2c <bdshot_crc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8000aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	b29b      	uxth	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460a      	mov	r2, r1
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4613      	mov	r3, r2
 8000ace:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8000ad0:	797a      	ldrb	r2, [r7, #5]
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ffc5 	bl	8000a66 <make_bdshot_frame>
 8000adc:	4603      	mov	r3, r0
 8000ade:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame);
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff54 	bl	8000990 <prepare_bdshot_buffer>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <send_bdshot>:

void send_bdshot(uint32_t channel){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000af8:	2322      	movs	r3, #34	@ 0x22
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <send_bdshot+0x34>)
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <send_bdshot+0x38>)
 8000b00:	f002 f8c2 	bl	8002c88 <HAL_TIM_PWM_Start_DMA>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <send_bdshot+0x24>
    {
        Error_Handler();
 8000b0a:	f000 f927 	bl	8000d5c <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8000b0e:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <send_bdshot+0x3c>)
 8000b10:	f007 f9e2 	bl	8007ed8 <puts>
    }
    //printf("%d\r\n",dshot_buffer);
    dshot_running = 1;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <send_bdshot+0x40>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000022c 	.word	0x2000022c
 8000b28:	20000088 	.word	0x20000088
 8000b2c:	08008de8 	.word	0x08008de8
 8000b30:	200002b4 	.word	0x200002b4

08000b34 <_write>:
    uint32_t erpm = ((uint32_t)mantissa) << exponent;
    return erpm;
}

int _write(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0a4      	sub	sp, #144	@ 0x90
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b44:	dd01      	ble.n	8000b4a <_write+0x16>
 8000b46:	237f      	movs	r3, #127	@ 0x7f
 8000b48:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f007 fbaf 	bl	80082b6 <memcpy>
    msg[len] = '\0'; // Null-terminate
 8000b58:	f107 0210 	add.w	r2, r7, #16
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <_write+0x4c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f107 0110 	add.w	r1, r7, #16
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f004 fa66 	bl	8005040 <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3790      	adds	r7, #144	@ 0x90
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002b8 	.word	0x200002b8

08000b84 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    //HAL_UART_Receive_DMA(&huart1, telemetry_buffer, 2);

    // Optionally set a flag
    dshot_running = 0;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200002b4 	.word	0x200002b4

08000ba4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
    //printf("UART error callback!\r\n");
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f004 f9af 	bl	8004f24 <osDelay>
 8000bc6:	e7fb      	b.n	8000bc0 <StartDefaultTask+0x8>

08000bc8 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8000bd0:	4827      	ldr	r0, [pc, #156]	@ (8000c70 <DShotTask+0xa8>)
 8000bd2:	f007 f981 	bl	8007ed8 <puts>



    // Step 1: Send ARM command (value 0)
	printf("Arming.\r\n");
 8000bd6:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <DShotTask+0xac>)
 8000bd8:	f007 f97e 	bl	8007ed8 <puts>
	queue_bdshot_pulse(0, false);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ff6e 	bl	8000ac0 <queue_bdshot_pulse>
	for (int i = 0; i < 5000; i++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e008      	b.n	8000bfc <DShotTask+0x34>
		send_bdshot(TIM_CHANNEL_1);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff80 	bl	8000af0 <send_bdshot>
		vTaskDelay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f005 fb41 	bl	8006278 <vTaskDelay>
	for (int i = 0; i < 5000; i++){
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c02:	4293      	cmp	r3, r2
 8000c04:	ddf1      	ble.n	8000bea <DShotTask+0x22>
	}

	printf("Done arming!\r\n");
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <DShotTask+0xb0>)
 8000c08:	f007 f966 	bl	8007ed8 <puts>
    vTaskDelay(300);  // Wait 300ms (Bluejay requires for arming)
 8000c0c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c10:	f005 fb32 	bl	8006278 <vTaskDelay>

    printf("Enabling eTelemetry.\r\n");
 8000c14:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <DShotTask+0xb4>)
 8000c16:	f007 f95f 	bl	8007ed8 <puts>
	queue_bdshot_pulse(13, true);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	200d      	movs	r0, #13
 8000c1e:	f7ff ff4f 	bl	8000ac0 <queue_bdshot_pulse>
	for (int i = 0; i < 100; i++){
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	e008      	b.n	8000c3a <DShotTask+0x72>
		send_bdshot(TIM_CHANNEL_1);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff ff61 	bl	8000af0 <send_bdshot>
		vTaskDelay(1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f005 fb22 	bl	8006278 <vTaskDelay>
	for (int i = 0; i < 100; i++){
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	3301      	adds	r3, #1
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	2b63      	cmp	r3, #99	@ 0x63
 8000c3e:	ddf3      	ble.n	8000c28 <DShotTask+0x60>
	}

    //Approximately 84 ticks in 1 microsecond (Timer Clock = 84 MHz)
    printf("Throttling.\r\n");
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <DShotTask+0xb8>)
 8000c42:	f007 f949 	bl	8007ed8 <puts>
    queue_bdshot_pulse(200, true);
 8000c46:	2101      	movs	r1, #1
 8000c48:	20c8      	movs	r0, #200	@ 0xc8
 8000c4a:	f7ff ff39 	bl	8000ac0 <queue_bdshot_pulse>
    for (int i = 0; i > -1; i++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e008      	b.n	8000c66 <DShotTask+0x9e>
      send_bdshot(TIM_CHANNEL_1);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ff4b 	bl	8000af0 <send_bdshot>
      vTaskDelay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f005 fb0c 	bl	8006278 <vTaskDelay>
    for (int i = 0; i > -1; i++){
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	daf3      	bge.n	8000c54 <DShotTask+0x8c>
    }
    while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <DShotTask+0xa4>
 8000c70:	08008e00 	.word	0x08008e00
 8000c74:	08008e14 	.word	0x08008e14
 8000c78:	08008e20 	.word	0x08008e20
 8000c7c:	08008e30 	.word	0x08008e30
 8000c80:	08008e48 	.word	0x08008e48

08000c84 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a4      	sub	sp, #144	@ 0x90
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  char msg[SERIAL_QUEUE_ITEM_SIZE];
  uint8_t telemetry_byte;
  int counter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  for (;;)
  {
      // 1️⃣ Process serial debug messages
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <StartSerialTask+0xa0>)
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	f107 010c 	add.w	r1, r7, #12
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f004 fa2f 	bl	8005100 <osMessageQueueGet>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10d      	bne.n	8000cc4 <StartSerialTask+0x40>
      {
          HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa8f 	bl	80001d0 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f107 010c 	add.w	r1, r7, #12
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	481a      	ldr	r0, [pc, #104]	@ (8000d28 <StartSerialTask+0xa4>)
 8000cc0:	f002 ffbc 	bl	8003c3c <HAL_UART_Transmit>
      }

      // 2️⃣ Read **1 byte of telemetry** per DSHOT pulse
      if (HAL_UART_Receive(&huart1, &telemetry_byte, 1, 10) == HAL_OK)
 8000cc4:	f107 010b 	add.w	r1, r7, #11
 8000cc8:	230a      	movs	r3, #10
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4817      	ldr	r0, [pc, #92]	@ (8000d2c <StartSerialTask+0xa8>)
 8000cce:	f003 f840 	bl	8003d52 <HAL_UART_Receive>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d121      	bne.n	8000d1c <StartSerialTask+0x98>
      {
    	  counter++;
 8000cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cdc:	3301      	adds	r3, #1
 8000cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  if (counter % 100 == 0){
 8000ce2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <StartSerialTask+0xac>)
 8000ce8:	fb83 1302 	smull	r1, r3, r3, r2
 8000cec:	1159      	asrs	r1, r3, #5
 8000cee:	17d3      	asrs	r3, r2, #31
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	2164      	movs	r1, #100	@ 0x64
 8000cf4:	fb01 f303 	mul.w	r3, r1, r3
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10e      	bne.n	8000d1c <StartSerialTask+0x98>
			  // ✅ If you want to log raw telemetry byte:
			  snprintf(msg, sizeof(msg), "Telemetry Byte: 0x%02X\r\n", telemetry_byte);
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	f107 000c 	add.w	r0, r7, #12
 8000d04:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <StartSerialTask+0xb0>)
 8000d06:	2180      	movs	r1, #128	@ 0x80
 8000d08:	f007 f8ee 	bl	8007ee8 <sniprintf>
			  osMessageQueuePut(serialQueueHandle, msg, 0, 0);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <StartSerialTask+0xa0>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2300      	movs	r3, #0
 8000d16:	2200      	movs	r2, #0
 8000d18:	f004 f992 	bl	8005040 <osMessageQueuePut>
			  // snprintf(msg, sizeof(msg), "Telemetry RPM: %lu\r\n", rpm);
			  // osMessageQueuePut(serialQueueHandle, msg, 0, 0);
		  }
      }

      osDelay(1); // Let other tasks run
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f004 f901 	bl	8004f24 <osDelay>
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8000d22:	e7b6      	b.n	8000c92 <StartSerialTask+0xe>
 8000d24:	200002b8 	.word	0x200002b8
 8000d28:	20000178 	.word	0x20000178
 8000d2c:	20000130 	.word	0x20000130
 8000d30:	51eb851f 	.word	0x51eb851f
 8000d34:	08008e58 	.word	0x08008e58

08000d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d4a:	f000 fb59 	bl	8001400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40001c00 	.word	0x40001c00

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <Error_Handler+0x8>

08000d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_MspInit+0x54>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	210f      	movs	r1, #15
 8000daa:	f06f 0001 	mvn.w	r0, #1
 8000dae:	f000 fbff 	bl	80015b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a26      	ldr	r2, [pc, #152]	@ (8000e68 <HAL_TIM_PWM_MspInit+0xa8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d146      	bne.n	8000e60 <HAL_TIM_PWM_MspInit+0xa0>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <HAL_TIM_PWM_MspInit+0xac>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a24      	ldr	r2, [pc, #144]	@ (8000e6c <HAL_TIM_PWM_MspInit+0xac>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de2:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <HAL_TIM_PWM_MspInit+0xac>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000df0:	4a20      	ldr	r2, [pc, #128]	@ (8000e74 <HAL_TIM_PWM_MspInit+0xb4>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000df6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000dfa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000dfe:	2240      	movs	r2, #64	@ 0x40
 8000e00:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e16:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000e34:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e36:	f000 fbe5 	bl	8001604 <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000e40:	f7ff ff8c 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e4a:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <HAL_TIM_PWM_MspInit+0xb0>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2105      	movs	r1, #5
 8000e54:	2032      	movs	r0, #50	@ 0x32
 8000e56:	f000 fbab 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e5a:	2032      	movs	r0, #50	@ 0x32
 8000e5c:	f000 fbc4 	bl	80015e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40000c00 	.word	0x40000c00
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	200000d0 	.word	0x200000d0
 8000e74:	40026040 	.word	0x40026040

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d11d      	bne.n	8000ed6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_TIM_MspPostInit+0x70>)
 8000ed2:	f000 ff99 	bl	8001e08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40000c00 	.word	0x40000c00
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a5d      	ldr	r2, [pc, #372]	@ (8001080 <HAL_UART_MspInit+0x194>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	f040 8083 	bne.w	8001016 <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	4a5a      	ldr	r2, [pc, #360]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f20:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	4b54      	ldr	r3, [pc, #336]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	4a53      	ldr	r2, [pc, #332]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3c:	4b51      	ldr	r3, [pc, #324]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a4c      	ldr	r2, [pc, #304]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f58:	4b4a      	ldr	r3, [pc, #296]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f76:	2307      	movs	r3, #7
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4841      	ldr	r0, [pc, #260]	@ (8001088 <HAL_UART_MspInit+0x19c>)
 8000f82:	f000 ff41 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f96:	2307      	movs	r3, #7
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483a      	ldr	r0, [pc, #232]	@ (800108c <HAL_UART_MspInit+0x1a0>)
 8000fa2:	f000 ff31 	bl	8001e08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fa8:	4a3a      	ldr	r2, [pc, #232]	@ (8001094 <HAL_UART_MspInit+0x1a8>)
 8000faa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000fac:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fba:	4b35      	ldr	r3, [pc, #212]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc0:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc8:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fce:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fe0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fe8:	4829      	ldr	r0, [pc, #164]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000fea:	f000 fb0b 	bl	8001604 <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000ff4:	f7ff feb2 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8000ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ffe:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_UART_MspInit+0x1a4>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2105      	movs	r1, #5
 8001008:	2025      	movs	r0, #37	@ 0x25
 800100a:	f000 fad1 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800100e:	2025      	movs	r0, #37	@ 0x25
 8001010:	f000 faea 	bl	80015e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001014:	e030      	b.n	8001078 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART6)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1f      	ldr	r2, [pc, #124]	@ (8001098 <HAL_UART_MspInit+0x1ac>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d12b      	bne.n	8001078 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <HAL_UART_MspInit+0x198>)
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001034:	f003 0320 	and.w	r3, r3, #32
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <HAL_UART_MspInit+0x198>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6313      	str	r3, [r2, #48]	@ 0x30
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <HAL_UART_MspInit+0x198>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001058:	23c0      	movs	r3, #192	@ 0xc0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001068:	2308      	movs	r3, #8
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	@ (800109c <HAL_UART_MspInit+0x1b0>)
 8001074:	f000 fec8 	bl	8001e08 <HAL_GPIO_Init>
}
 8001078:	bf00      	nop
 800107a:	3730      	adds	r7, #48	@ 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40011000 	.word	0x40011000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	200001c0 	.word	0x200001c0
 8001094:	40026440 	.word	0x40026440
 8001098:	40011400 	.word	0x40011400
 800109c:	40020800 	.word	0x40020800

080010a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	@ 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <HAL_InitTick+0xe4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	4a32      	ldr	r2, [pc, #200]	@ (8001184 <HAL_InitTick+0xe4>)
 80010ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010be:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c0:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <HAL_InitTick+0xe4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010cc:	f107 0210 	add.w	r2, r7, #16
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fc8a 	bl	80029f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010e6:	f001 fc5b 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80010ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80010ec:	e004      	b.n	80010f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ee:	f001 fc57 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80010f2:	4603      	mov	r3, r0
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010fa:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <HAL_InitTick+0xe8>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0c9b      	lsrs	r3, r3, #18
 8001102:	3b01      	subs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_InitTick+0xec>)
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <HAL_InitTick+0xf0>)
 800110a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <HAL_InitTick+0xec>)
 800110e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001112:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001114:	4a1d      	ldr	r2, [pc, #116]	@ (800118c <HAL_InitTick+0xec>)
 8001116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001118:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <HAL_InitTick+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_InitTick+0xec>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_InitTick+0xec>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 800112c:	4817      	ldr	r0, [pc, #92]	@ (800118c <HAL_InitTick+0xec>)
 800112e:	f001 fc91 	bl	8002a54 <HAL_TIM_Base_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001138:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11b      	bne.n	8001178 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8001140:	4812      	ldr	r0, [pc, #72]	@ (800118c <HAL_InitTick+0xec>)
 8001142:	f001 fce1 	bl	8002b08 <HAL_TIM_Base_Start_IT>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800114c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001150:	2b00      	cmp	r3, #0
 8001152:	d111      	bne.n	8001178 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001154:	202c      	movs	r0, #44	@ 0x2c
 8001156:	f000 fa47 	bl	80015e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d808      	bhi.n	8001172 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	202c      	movs	r0, #44	@ 0x2c
 8001166:	f000 fa23 	bl	80015b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_InitTick+0xf4>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e002      	b.n	8001178 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800117c:	4618      	mov	r0, r3
 800117e:	3738      	adds	r7, #56	@ 0x38
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	431bde83 	.word	0x431bde83
 800118c:	200002bc 	.word	0x200002bc
 8001190:	40001c00 	.word	0x40001c00
 8001194:	20000004 	.word	0x20000004

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <DMA1_Stream2_IRQHandler+0x10>)
 80011d6:	f000 fbad 	bl	8001934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000d0 	.word	0x200000d0

080011e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <USART1_IRQHandler+0x10>)
 80011ea:	f002 fe49 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000130 	.word	0x20000130

080011f8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80011fe:	f001 ff0b 	bl	8003018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002bc 	.word	0x200002bc

0800120c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM5_IRQHandler+0x10>)
 8001212:	f001 ff01 	bl	8003018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000088 	.word	0x20000088

08001220 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <DMA2_Stream2_IRQHandler+0x10>)
 8001226:	f000 fb85 	bl	8001934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001c0 	.word	0x200001c0

08001234 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
  }

  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_close>:
  }
  return len;
}

int _close(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001296:	605a      	str	r2, [r3, #4]
  return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_isatty>:

int _isatty(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f006 ffa8 	bl	800825c <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20020000 	.word	0x20020000
 8001338:	00000400 	.word	0x00000400
 800133c:	20000304 	.word	0x20000304
 8001340:	20006060 	.word	0x20006060

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800136c:	f7ff ffea 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	@ (80013a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	@ (80013b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001396:	f006 ff67 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff f907 	bl	80005ac <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013ac:	08008f5c 	.word	0x08008f5c
  ldr r2, =_sbss
 80013b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013b4:	20006060 	.word	0x20006060

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <HAL_Init+0x40>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <HAL_Init+0x40>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <HAL_Init+0x40>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f8d8 	bl	800159a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f7ff fe58 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fcba 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000308 	.word	0x20000308

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000308 	.word	0x20000308

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	@ (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	@ (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	@ (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	@ 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	@ 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff4c 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c2:	f7ff ff61 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	f7ff ffb1 	bl	8001534 <NVIC_EncodePriority>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff80 	bl	80014e0 <__NVIC_SetPriority>
}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff54 	bl	80014a4 <__NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ff0a 	bl	8001428 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e099      	b.n	8001754 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001640:	e00f      	b.n	8001662 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001642:	f7ff fef1 	bl	8001428 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b05      	cmp	r3, #5
 800164e:	d908      	bls.n	8001662 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e078      	b.n	8001754 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e8      	bne.n	8001642 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	4b38      	ldr	r3, [pc, #224]	@ (800175c <HAL_DMA_Init+0x158>)
 800167c:	4013      	ands	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d107      	bne.n	80016cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	4313      	orrs	r3, r2
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f023 0307 	bic.w	r3, r3, #7
 80016e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d117      	bne.n	8001726 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fb01 	bl	8001d10 <DMA_CheckFifoParam>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2240      	movs	r2, #64	@ 0x40
 8001718:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001722:	2301      	movs	r3, #1
 8001724:	e016      	b.n	8001754 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fab8 	bl	8001ca4 <DMA_CalcBaseAndBitshift>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173c:	223f      	movs	r2, #63	@ 0x3f
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	f010803f 	.word	0xf010803f

08001760 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_DMA_Start_IT+0x26>
 8001782:	2302      	movs	r3, #2
 8001784:	e040      	b.n	8001808 <HAL_DMA_Start_IT+0xa8>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d12f      	bne.n	80017fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2202      	movs	r2, #2
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fa4a 	bl	8001c48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	223f      	movs	r2, #63	@ 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0216 	orr.w	r2, r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0208 	orr.w	r2, r2, #8
 80017e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e005      	b.n	8001806 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001806:	7dfb      	ldrb	r3, [r7, #23]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800181e:	f7ff fe03 	bl	8001428 <HAL_GetTick>
 8001822:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d008      	beq.n	8001842 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e052      	b.n	80018e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0216 	bic.w	r2, r2, #22
 8001850:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001860:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <HAL_DMA_Abort+0x62>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0208 	bic.w	r2, r2, #8
 8001880:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0201 	bic.w	r2, r2, #1
 8001890:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001892:	e013      	b.n	80018bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001894:	f7ff fdc8 	bl	8001428 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d90c      	bls.n	80018bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e015      	b.n	80018e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1e4      	bne.n	8001894 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ce:	223f      	movs	r2, #63	@ 0x3f
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d004      	beq.n	800190e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00c      	b.n	8001928 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2205      	movs	r2, #5
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001940:	4b8e      	ldr	r3, [pc, #568]	@ (8001b7c <HAL_DMA_IRQHandler+0x248>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a8e      	ldr	r2, [pc, #568]	@ (8001b80 <HAL_DMA_IRQHandler+0x24c>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	0a9b      	lsrs	r3, r3, #10
 800194c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195e:	2208      	movs	r2, #8
 8001960:	409a      	lsls	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01a      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0204 	bic.w	r2, r2, #4
 8001986:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198c:	2208      	movs	r2, #8
 800198e:	409a      	lsls	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	2201      	movs	r2, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d012      	beq.n	80019d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c2:	2201      	movs	r2, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ce:	f043 0202 	orr.w	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019da:	2204      	movs	r2, #4
 80019dc:	409a      	lsls	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	2204      	movs	r2, #4
 80019fa:	409a      	lsls	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a04:	f043 0204 	orr.w	r2, r3, #4
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	2210      	movs	r2, #16
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d043      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d03c      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2e:	2210      	movs	r2, #16
 8001a30:	409a      	lsls	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d018      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d024      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
 8001a62:	e01f      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01b      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
 8001a74:	e016      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0208 	bic.w	r2, r2, #8
 8001a92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 808f 	beq.w	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8087 	beq.w	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aca:	2220      	movs	r2, #32
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d136      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0216 	bic.w	r2, r2, #22
 8001aec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001afc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x1da>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0208 	bic.w	r2, r2, #8
 8001b1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	223f      	movs	r2, #63	@ 0x3f
 8001b24:	409a      	lsls	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d07e      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
        }
        return;
 8001b4a:	e079      	b.n	8001c40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01d      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10d      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d031      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
 8001b78:	e02c      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d023      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
 8001b94:	e01e      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10f      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0210 	bic.w	r2, r2, #16
 8001bb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d032      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2205      	movs	r2, #5
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3301      	adds	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d307      	bcc.n	8001c1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f2      	bne.n	8001c00 <HAL_DMA_IRQHandler+0x2cc>
 8001c1a:	e000      	b.n	8001c1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
 8001c3e:	e000      	b.n	8001c42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c40:	bf00      	nop
    }
  }
}
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b40      	cmp	r3, #64	@ 0x40
 8001c74:	d108      	bne.n	8001c88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c86:	e007      	b.n	8001c98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3b10      	subs	r3, #16
 8001cb4:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <DMA_CalcBaseAndBitshift+0x64>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cbe:	4a13      	ldr	r2, [pc, #76]	@ (8001d0c <DMA_CalcBaseAndBitshift+0x68>)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d909      	bls.n	8001ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	1d1a      	adds	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ce4:	e007      	b.n	8001cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	aaaaaaab 	.word	0xaaaaaaab
 8001d0c:	08008f10 	.word	0x08008f10

08001d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11f      	bne.n	8001d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d856      	bhi.n	8001dde <DMA_CheckFifoParam+0xce>
 8001d30:	a201      	add	r2, pc, #4	@ (adr r2, 8001d38 <DMA_CheckFifoParam+0x28>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d5b 	.word	0x08001d5b
 8001d40:	08001d49 	.word	0x08001d49
 8001d44:	08001ddf 	.word	0x08001ddf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d046      	beq.n	8001de2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d58:	e043      	b.n	8001de2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d62:	d140      	bne.n	8001de6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d68:	e03d      	b.n	8001de6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d72:	d121      	bne.n	8001db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d837      	bhi.n	8001dea <DMA_CheckFifoParam+0xda>
 8001d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <DMA_CheckFifoParam+0x70>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001d97 	.word	0x08001d97
 8001d88:	08001d91 	.word	0x08001d91
 8001d8c:	08001da9 	.word	0x08001da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      break;
 8001d94:	e030      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d025      	beq.n	8001dee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da6:	e022      	b.n	8001dee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001db0:	d11f      	bne.n	8001df2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001db6:	e01c      	b.n	8001df2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d903      	bls.n	8001dc6 <DMA_CheckFifoParam+0xb6>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d003      	beq.n	8001dcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dc4:	e018      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dca:	e015      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00e      	beq.n	8001df6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      break;
 8001ddc:	e00b      	b.n	8001df6 <DMA_CheckFifoParam+0xe6>
      break;
 8001dde:	bf00      	nop
 8001de0:	e00a      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
 8001de4:	e008      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001de6:	bf00      	nop
 8001de8:	e006      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dea:	bf00      	nop
 8001dec:	e004      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dee:	bf00      	nop
 8001df0:	e002      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <DMA_CheckFifoParam+0xe8>
      break;
 8001df6:	bf00      	nop
    }
  } 
  
  return status; 
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e16b      	b.n	80020fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 815a 	bne.w	80020f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d005      	beq.n	8001e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d130      	bne.n	8001ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d017      	beq.n	8001ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d123      	bne.n	8001f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80b4 	beq.w	80020f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b60      	ldr	r3, [pc, #384]	@ (8002114 <HAL_GPIO_Init+0x30c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	4a5f      	ldr	r2, [pc, #380]	@ (8002114 <HAL_GPIO_Init+0x30c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002114 <HAL_GPIO_Init+0x30c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001faa:	4a5b      	ldr	r2, [pc, #364]	@ (8002118 <HAL_GPIO_Init+0x310>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_GPIO_Init+0x314>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <HAL_GPIO_Init+0x226>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	@ (8002120 <HAL_GPIO_Init+0x318>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d025      	beq.n	800202a <HAL_GPIO_Init+0x222>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	@ (8002124 <HAL_GPIO_Init+0x31c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01f      	beq.n	8002026 <HAL_GPIO_Init+0x21e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8002128 <HAL_GPIO_Init+0x320>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d019      	beq.n	8002022 <HAL_GPIO_Init+0x21a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800212c <HAL_GPIO_Init+0x324>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_GPIO_Init+0x216>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8002130 <HAL_GPIO_Init+0x328>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00d      	beq.n	800201a <HAL_GPIO_Init+0x212>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <HAL_GPIO_Init+0x32c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d007      	beq.n	8002016 <HAL_GPIO_Init+0x20e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4b      	ldr	r2, [pc, #300]	@ (8002138 <HAL_GPIO_Init+0x330>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_GPIO_Init+0x20a>
 800200e:	2307      	movs	r3, #7
 8002010:	e00e      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002012:	2308      	movs	r3, #8
 8002014:	e00c      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002016:	2306      	movs	r3, #6
 8002018:	e00a      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800201a:	2305      	movs	r3, #5
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800201e:	2304      	movs	r3, #4
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x228>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x228>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4935      	ldr	r1, [pc, #212]	@ (8002118 <HAL_GPIO_Init+0x310>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b3b      	ldr	r3, [pc, #236]	@ (800213c <HAL_GPIO_Init+0x334>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a32      	ldr	r2, [pc, #200]	@ (800213c <HAL_GPIO_Init+0x334>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b30      	ldr	r3, [pc, #192]	@ (800213c <HAL_GPIO_Init+0x334>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a27      	ldr	r2, [pc, #156]	@ (800213c <HAL_GPIO_Init+0x334>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a2:	4b26      	ldr	r3, [pc, #152]	@ (800213c <HAL_GPIO_Init+0x334>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c6:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_GPIO_Init+0x334>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_GPIO_Init+0x334>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f0:	4a12      	ldr	r2, [pc, #72]	@ (800213c <HAL_GPIO_Init+0x334>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f ae90 	bls.w	8001e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40021400 	.word	0x40021400
 8002134:	40021800 	.word	0x40021800
 8002138:	40021c00 	.word	0x40021c00
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e267      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d075      	beq.n	800224a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800215e:	4b88      	ldr	r3, [pc, #544]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00c      	beq.n	8002184 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4b85      	ldr	r3, [pc, #532]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002172:	2b08      	cmp	r3, #8
 8002174:	d112      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	4b82      	ldr	r3, [pc, #520]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b7e      	ldr	r3, [pc, #504]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05b      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e242      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x74>
 80021a6:	4b76      	ldr	r3, [pc, #472]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a75      	ldr	r2, [pc, #468]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b70      	ldr	r3, [pc, #448]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021d8:	4b69      	ldr	r3, [pc, #420]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a68      	ldr	r2, [pc, #416]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b66      	ldr	r3, [pc, #408]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a65      	ldr	r2, [pc, #404]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff f916 	bl	8001428 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff f912 	bl	8001428 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e207      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5b      	ldr	r3, [pc, #364]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xc0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f902 	bl	8001428 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff f8fe 	bl	8001428 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1f3      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b51      	ldr	r3, [pc, #324]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226e:	4b44      	ldr	r3, [pc, #272]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b41      	ldr	r3, [pc, #260]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1c7      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4937      	ldr	r1, [pc, #220]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_RCC_OscConfig+0x244>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7ff f8b7 	bl	8001428 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff f8b3 	bl	8001428 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1a8      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4925      	ldr	r1, [pc, #148]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <HAL_RCC_OscConfig+0x244>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff f896 	bl	8001428 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff f892 	bl	8001428 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e187      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d036      	beq.n	8002398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <HAL_RCC_OscConfig+0x248>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff f876 	bl	8001428 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff f872 	bl	8001428 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e167      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCC_OscConfig+0x240>)
 8002354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x200>
 800235e:	e01b      	b.n	8002398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_RCC_OscConfig+0x248>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff f85f 	bl	8001428 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	e00e      	b.n	800238c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236e:	f7ff f85b 	bl	8001428 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d907      	bls.n	800238c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e150      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
 8002380:	40023800 	.word	0x40023800
 8002384:	42470000 	.word	0x42470000
 8002388:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800238e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ea      	bne.n	800236e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8097 	beq.w	80024d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b81      	ldr	r3, [pc, #516]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	4b7d      	ldr	r3, [pc, #500]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4a7c      	ldr	r2, [pc, #496]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c6:	4b7a      	ldr	r3, [pc, #488]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b77      	ldr	r3, [pc, #476]	@ (80025b4 <HAL_RCC_OscConfig+0x474>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b74      	ldr	r3, [pc, #464]	@ (80025b4 <HAL_RCC_OscConfig+0x474>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a73      	ldr	r2, [pc, #460]	@ (80025b4 <HAL_RCC_OscConfig+0x474>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7ff f81b 	bl	8001428 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7ff f817 	bl	8001428 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e10c      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b6a      	ldr	r3, [pc, #424]	@ (80025b4 <HAL_RCC_OscConfig+0x474>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x2ea>
 800241c:	4b64      	ldr	r3, [pc, #400]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a63      	ldr	r2, [pc, #396]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x324>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x30c>
 8002432:	4b5f      	ldr	r3, [pc, #380]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002436:	4a5e      	ldr	r2, [pc, #376]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6713      	str	r3, [r2, #112]	@ 0x70
 800243e:	4b5c      	ldr	r3, [pc, #368]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002442:	4a5b      	ldr	r2, [pc, #364]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	@ 0x70
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x324>
 800244c:	4b58      	ldr	r3, [pc, #352]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002450:	4a57      	ldr	r2, [pc, #348]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6713      	str	r3, [r2, #112]	@ 0x70
 8002458:	4b55      	ldr	r3, [pc, #340]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245c:	4a54      	ldr	r2, [pc, #336]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800245e:	f023 0304 	bic.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d015      	beq.n	8002498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe ffdc 	bl	8001428 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	e00a      	b.n	800248a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe ffd8 	bl	8001428 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e0cb      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	4b49      	ldr	r3, [pc, #292]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0ee      	beq.n	8002474 <HAL_RCC_OscConfig+0x334>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe ffc6 	bl	8001428 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe ffc2 	bl	8001428 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0b5      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	4b3e      	ldr	r3, [pc, #248]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ee      	bne.n	80024a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b39      	ldr	r3, [pc, #228]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	4a38      	ldr	r2, [pc, #224]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a1 	beq.w	8002620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024de:	4b34      	ldr	r3, [pc, #208]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d05c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d141      	bne.n	8002576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_RCC_OscConfig+0x478>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe ff96 	bl	8001428 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe ff92 	bl	8001428 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e087      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	491b      	ldr	r1, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x478>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe ff6b 	bl	8001428 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe ff67 	bl	8001428 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e05c      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x416>
 8002574:	e054      	b.n	8002620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_RCC_OscConfig+0x478>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe ff54 	bl	8001428 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe ff50 	bl	8001428 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e045      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCC_OscConfig+0x470>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x444>
 80025a2:	e03d      	b.n	8002620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e038      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x4ec>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d028      	beq.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d121      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11a      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d111      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	3b01      	subs	r3, #1
 8002606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0cc      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b68      	ldr	r3, [pc, #416]	@ (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d90c      	bls.n	800266c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b65      	ldr	r3, [pc, #404]	@ (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b63      	ldr	r3, [pc, #396]	@ (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b8      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a58      	ldr	r2, [pc, #352]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800268e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a52      	ldr	r2, [pc, #328]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b50      	ldr	r3, [pc, #320]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494d      	ldr	r1, [pc, #308]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d044      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b47      	ldr	r3, [pc, #284]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d119      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b3f      	ldr	r3, [pc, #252]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3b      	ldr	r3, [pc, #236]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e067      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4934      	ldr	r1, [pc, #208]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fe82 	bl	8001428 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fe7e 	bl	8001428 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e04f      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2b      	ldr	r3, [pc, #172]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d20c      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b22      	ldr	r3, [pc, #136]	@ (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e032      	b.n	80027de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4916      	ldr	r1, [pc, #88]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490e      	ldr	r1, [pc, #56]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f821 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490a      	ldr	r1, [pc, #40]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a09      	ldr	r2, [pc, #36]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fc62 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08008ef8 	.word	0x08008ef8
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002800:	b090      	sub	sp, #64	@ 0x40
 8002802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002814:	4b59      	ldr	r3, [pc, #356]	@ (800297c <HAL_RCC_GetSysClockFreq+0x180>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d00d      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x40>
 8002820:	2b08      	cmp	r3, #8
 8002822:	f200 80a1 	bhi.w	8002968 <HAL_RCC_GetSysClockFreq+0x16c>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x34>
 800282a:	2b04      	cmp	r3, #4
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x3a>
 800282e:	e09b      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x184>)
 8002832:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002834:	e09b      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002836:	4b53      	ldr	r3, [pc, #332]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x188>)
 8002838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800283a:	e098      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800283c:	4b4f      	ldr	r3, [pc, #316]	@ (800297c <HAL_RCC_GetSysClockFreq+0x180>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002846:	4b4d      	ldr	r3, [pc, #308]	@ (800297c <HAL_RCC_GetSysClockFreq+0x180>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d028      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002852:	4b4a      	ldr	r3, [pc, #296]	@ (800297c <HAL_RCC_GetSysClockFreq+0x180>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	2200      	movs	r2, #0
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	627a      	str	r2, [r7, #36]	@ 0x24
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002864:	2100      	movs	r1, #0
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x188>)
 8002868:	fb03 f201 	mul.w	r2, r3, r1
 800286c:	2300      	movs	r3, #0
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	4413      	add	r3, r2
 8002874:	4a43      	ldr	r2, [pc, #268]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x188>)
 8002876:	fba0 1202 	umull	r1, r2, r0, r2
 800287a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800287c:	460a      	mov	r2, r1
 800287e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002882:	4413      	add	r3, r2
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002888:	2200      	movs	r2, #0
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	61fa      	str	r2, [r7, #28]
 800288e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002892:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002896:	f7fd fcf3 	bl	8000280 <__aeabi_uldivmod>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4613      	mov	r3, r2
 80028a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a2:	e053      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a4:	4b35      	ldr	r3, [pc, #212]	@ (800297c <HAL_RCC_GetSysClockFreq+0x180>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	2200      	movs	r2, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	617a      	str	r2, [r7, #20]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028b6:	f04f 0b00 	mov.w	fp, #0
 80028ba:	4652      	mov	r2, sl
 80028bc:	465b      	mov	r3, fp
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	ebb2 080a 	subs.w	r8, r2, sl
 80028d6:	eb63 090b 	sbc.w	r9, r3, fp
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028ee:	ebb2 0408 	subs.w	r4, r2, r8
 80028f2:	eb63 0509 	sbc.w	r5, r3, r9
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	00eb      	lsls	r3, r5, #3
 8002900:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002904:	00e2      	lsls	r2, r4, #3
 8002906:	4614      	mov	r4, r2
 8002908:	461d      	mov	r5, r3
 800290a:	eb14 030a 	adds.w	r3, r4, sl
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	eb45 030b 	adc.w	r3, r5, fp
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002922:	4629      	mov	r1, r5
 8002924:	028b      	lsls	r3, r1, #10
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800292c:	4621      	mov	r1, r4
 800292e:	028a      	lsls	r2, r1, #10
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002936:	2200      	movs	r2, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002940:	f7fd fc9e 	bl	8000280 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_RCC_GetSysClockFreq+0x180>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	3301      	adds	r3, #1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800295c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x184>)
 800296a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002970:	4618      	mov	r0, r3
 8002972:	3740      	adds	r7, #64	@ 0x40
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400
 8002984:	00b71b00 	.word	0x00b71b00

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	@ (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08008f08 	.word	0x08008f08

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffdc 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0b5b      	lsrs	r3, r3, #13
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08008f08 	.word	0x08008f08

080029f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	220f      	movs	r2, #15
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_RCC_GetClockConfig+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40023c00 	.word	0x40023c00

08002a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e041      	b.n	8002aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f839 	bl	8002af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 fd76 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e04e      	b.n	8002bbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a23      	ldr	r2, [pc, #140]	@ (8002bcc <HAL_TIM_Base_Start_IT+0xc4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d01d      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a18      	ldr	r2, [pc, #96]	@ (8002be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d111      	bne.n	8002bac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d010      	beq.n	8002bbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	e007      	b.n	8002bbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40000c00 	.word	0x40000c00
 8002bdc:	40010400 	.word	0x40010400
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40001800 	.word	0x40001800

08002be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe f8d6 	bl	8000dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fcac 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e022      	b.n	8002cfa <HAL_TIM_PWM_Start_DMA+0x72>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d109      	bne.n	8002cce <HAL_TIM_PWM_Start_DMA+0x46>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	2300      	movne	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	e015      	b.n	8002cfa <HAL_TIM_PWM_Start_DMA+0x72>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d109      	bne.n	8002ce8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e008      	b.n	8002cfa <HAL_TIM_PWM_Start_DMA+0x72>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e171      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_PWM_Start_DMA+0x94>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e022      	b.n	8002d62 <HAL_TIM_PWM_Start_DMA+0xda>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d109      	bne.n	8002d36 <HAL_TIM_PWM_Start_DMA+0xae>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e015      	b.n	8002d62 <HAL_TIM_PWM_Start_DMA+0xda>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d109      	bne.n	8002d50 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e008      	b.n	8002d62 <HAL_TIM_PWM_Start_DMA+0xda>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d024      	beq.n	8002db0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_TIM_PWM_Start_DMA+0xea>
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e137      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d84:	e016      	b.n	8002db4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d94:	e00e      	b.n	8002db4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da4:	e006      	b.n	8002db4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dae:	e001      	b.n	8002db4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e118      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	f200 80ae 	bhi.w	8002f18 <HAL_TIM_PWM_Start_DMA+0x290>
 8002dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002df9 	.word	0x08002df9
 8002dc8:	08002f19 	.word	0x08002f19
 8002dcc:	08002f19 	.word	0x08002f19
 8002dd0:	08002f19 	.word	0x08002f19
 8002dd4:	08002e41 	.word	0x08002e41
 8002dd8:	08002f19 	.word	0x08002f19
 8002ddc:	08002f19 	.word	0x08002f19
 8002de0:	08002f19 	.word	0x08002f19
 8002de4:	08002e89 	.word	0x08002e89
 8002de8:	08002f19 	.word	0x08002f19
 8002dec:	08002f19 	.word	0x08002f19
 8002df0:	08002f19 	.word	0x08002f19
 8002df4:	08002ed1 	.word	0x08002ed1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	4a7c      	ldr	r2, [pc, #496]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	4a7b      	ldr	r2, [pc, #492]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002e0e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3334      	adds	r3, #52	@ 0x34
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	f7fe fc9e 	bl	8001760 <HAL_DMA_Start_IT>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0db      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3c:	60da      	str	r2, [r3, #12]
      break;
 8002e3e:	e06e      	b.n	8002f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002e46:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	4a69      	ldr	r2, [pc, #420]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	4a68      	ldr	r2, [pc, #416]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002e56:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3338      	adds	r3, #56	@ 0x38
 8002e64:	461a      	mov	r2, r3
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	f7fe fc7a 	bl	8001760 <HAL_DMA_Start_IT>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0b7      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e84:	60da      	str	r2, [r3, #12]
      break;
 8002e86:	e04a      	b.n	8002f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	4a58      	ldr	r2, [pc, #352]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	4a57      	ldr	r2, [pc, #348]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	333c      	adds	r3, #60	@ 0x3c
 8002eac:	461a      	mov	r2, r3
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	f7fe fc56 	bl	8001760 <HAL_DMA_Start_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e093      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ecc:	60da      	str	r2, [r3, #12]
      break;
 8002ece:	e026      	b.n	8002f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	4a46      	ldr	r2, [pc, #280]	@ (8002ff0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	4a44      	ldr	r2, [pc, #272]	@ (8002ff8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002ee6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3340      	adds	r3, #64	@ 0x40
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	f7fe fc32 	bl	8001760 <HAL_DMA_Start_IT>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06f      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f14:	60da      	str	r2, [r3, #12]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d15f      	bne.n	8002fe4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fd7f 	bl	8003a30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a31      	ldr	r2, [pc, #196]	@ (8002ffc <HAL_TIM_PWM_Start_DMA+0x374>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2f      	ldr	r2, [pc, #188]	@ (8003000 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_TIM_PWM_Start_DMA+0x374>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d01d      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_TIM_PWM_Start_DMA+0x380>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_TIM_PWM_Start_DMA+0x384>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1a      	ldr	r2, [pc, #104]	@ (8003000 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIM_PWM_Start_DMA+0x328>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1a      	ldr	r2, [pc, #104]	@ (8003014 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d010      	beq.n	8002fe4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd2:	e007      	b.n	8002fe4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	08003473 	.word	0x08003473
 8002ff4:	0800351b 	.word	0x0800351b
 8002ff8:	080033e1 	.word	0x080033e1
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40010400 	.word	0x40010400
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40014000 	.word	0x40014000
 8003014:	40001800 	.word	0x40001800

08003018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0202 	mvn.w	r2, #2
 800304c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f994 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f986 	bl	800337c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fd fd87 	bl	8000b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0204 	mvn.w	r2, #4
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f96e 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f960 	bl	800337c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7fd fd61 	bl	8000b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d020      	beq.n	8003114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0208 	mvn.w	r2, #8
 80030e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2204      	movs	r2, #4
 80030ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f948 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f93a 	bl	800337c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fd3b 	bl	8000b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d020      	beq.n	8003160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f922 	bl	8003390 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f914 	bl	800337c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fd15 	bl	8000b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0201 	mvn.w	r2, #1
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fdda 	bl	8000d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fcf0 	bl	8003b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8f6 	bl	80033b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0220 	mvn.w	r2, #32
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fcc2 	bl	8003b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e0ae      	b.n	8003374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	f200 809f 	bhi.w	8003364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003261 	.word	0x08003261
 8003230:	08003365 	.word	0x08003365
 8003234:	08003365 	.word	0x08003365
 8003238:	08003365 	.word	0x08003365
 800323c:	080032a1 	.word	0x080032a1
 8003240:	08003365 	.word	0x08003365
 8003244:	08003365 	.word	0x08003365
 8003248:	08003365 	.word	0x08003365
 800324c:	080032e3 	.word	0x080032e3
 8003250:	08003365 	.word	0x08003365
 8003254:	08003365 	.word	0x08003365
 8003258:	08003365 	.word	0x08003365
 800325c:	08003323 	.word	0x08003323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa32 	bl	80036d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	619a      	str	r2, [r3, #24]
      break;
 800329e:	e064      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa82 	bl	80037b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
      break;
 80032e0:	e043      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fad7 	bl	800389c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0208 	orr.w	r2, r2, #8
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0204 	bic.w	r2, r2, #4
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	61da      	str	r2, [r3, #28]
      break;
 8003320:	e023      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb2b 	bl	8003984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
      break;
 8003362:	e002      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      break;
 8003368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003406:	e02a      	b.n	800345e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2202      	movs	r2, #2
 8003416:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003420:	e01d      	b.n	800345e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d107      	bne.n	800343c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2204      	movs	r2, #4
 8003430:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800343a:	e010      	b.n	800345e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d107      	bne.n	8003456 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2208      	movs	r2, #8
 800344a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003454:	e003      	b.n	800345e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff ffb4 	bl	80033cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	771a      	strb	r2, [r3, #28]
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d10b      	bne.n	80034a2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d136      	bne.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a0:	e031      	b.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10b      	bne.n	80034c4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2202      	movs	r2, #2
 80034b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d125      	bne.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c2:	e020      	b.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d10b      	bne.n	80034e6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2204      	movs	r2, #4
 80034d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d114      	bne.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e4:	e00f      	b.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d10a      	bne.n	8003506 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2208      	movs	r2, #8
 80034f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7fd fb3c 	bl	8000b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	771a      	strb	r2, [r3, #28]
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d103      	bne.n	800353a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	771a      	strb	r2, [r3, #28]
 8003538:	e019      	b.n	800356e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d103      	bne.n	800354c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2202      	movs	r2, #2
 8003548:	771a      	strb	r2, [r3, #28]
 800354a:	e010      	b.n	800356e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d103      	bne.n	800355e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2204      	movs	r2, #4
 800355a:	771a      	strb	r2, [r3, #28]
 800355c:	e007      	b.n	800356e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d102      	bne.n	800356e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2208      	movs	r2, #8
 800356c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff ff18 	bl	80033a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	771a      	strb	r2, [r3, #28]
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a43      	ldr	r2, [pc, #268]	@ (80036a4 <TIM_Base_SetConfig+0x120>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d00f      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a40      	ldr	r2, [pc, #256]	@ (80036a8 <TIM_Base_SetConfig+0x124>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3f      	ldr	r2, [pc, #252]	@ (80036ac <TIM_Base_SetConfig+0x128>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3e      	ldr	r2, [pc, #248]	@ (80036b0 <TIM_Base_SetConfig+0x12c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a3d      	ldr	r2, [pc, #244]	@ (80036b4 <TIM_Base_SetConfig+0x130>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a32      	ldr	r2, [pc, #200]	@ (80036a4 <TIM_Base_SetConfig+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e4:	d027      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2f      	ldr	r2, [pc, #188]	@ (80036a8 <TIM_Base_SetConfig+0x124>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d023      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2e      	ldr	r2, [pc, #184]	@ (80036ac <TIM_Base_SetConfig+0x128>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01f      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	@ (80036b0 <TIM_Base_SetConfig+0x12c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01b      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2c      	ldr	r2, [pc, #176]	@ (80036b4 <TIM_Base_SetConfig+0x130>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d017      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2b      	ldr	r2, [pc, #172]	@ (80036b8 <TIM_Base_SetConfig+0x134>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <TIM_Base_SetConfig+0x138>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00f      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a29      	ldr	r2, [pc, #164]	@ (80036c0 <TIM_Base_SetConfig+0x13c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a28      	ldr	r2, [pc, #160]	@ (80036c4 <TIM_Base_SetConfig+0x140>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a27      	ldr	r2, [pc, #156]	@ (80036c8 <TIM_Base_SetConfig+0x144>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a26      	ldr	r2, [pc, #152]	@ (80036cc <TIM_Base_SetConfig+0x148>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a0e      	ldr	r2, [pc, #56]	@ (80036a4 <TIM_Base_SetConfig+0x120>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0xf2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a10      	ldr	r2, [pc, #64]	@ (80036b4 <TIM_Base_SetConfig+0x130>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d103      	bne.n	800367e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40010400 	.word	0x40010400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800
 80036c4:	40001800 	.word	0x40001800
 80036c8:	40001c00 	.word	0x40001c00
 80036cc:	40002000 	.word	0x40002000

080036d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f023 0201 	bic.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f023 0302 	bic.w	r3, r3, #2
 8003718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <TIM_OC1_SetConfig+0xd8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_OC1_SetConfig+0x64>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1f      	ldr	r2, [pc, #124]	@ (80037ac <TIM_OC1_SetConfig+0xdc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0308 	bic.w	r3, r3, #8
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a15      	ldr	r2, [pc, #84]	@ (80037a8 <TIM_OC1_SetConfig+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC1_SetConfig+0x8e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <TIM_OC1_SetConfig+0xdc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d111      	bne.n	8003782 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 0210 	bic.w	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <TIM_OC2_SetConfig+0xe4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC2_SetConfig+0x68>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <TIM_OC2_SetConfig+0xe8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <TIM_OC2_SetConfig+0xe4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC2_SetConfig+0x94>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a16      	ldr	r2, [pc, #88]	@ (8003898 <TIM_OC2_SetConfig+0xe8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d113      	bne.n	800386c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800384a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40010400 	.word	0x40010400

0800389c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a21      	ldr	r2, [pc, #132]	@ (800397c <TIM_OC3_SetConfig+0xe0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_OC3_SetConfig+0x66>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a20      	ldr	r2, [pc, #128]	@ (8003980 <TIM_OC3_SetConfig+0xe4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10d      	bne.n	800391e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800391c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a16      	ldr	r2, [pc, #88]	@ (800397c <TIM_OC3_SetConfig+0xe0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_OC3_SetConfig+0x92>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a15      	ldr	r2, [pc, #84]	@ (8003980 <TIM_OC3_SetConfig+0xe4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800393c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40010000 	.word	0x40010000
 8003980:	40010400 	.word	0x40010400

08003984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a12      	ldr	r2, [pc, #72]	@ (8003a28 <TIM_OC4_SetConfig+0xa4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC4_SetConfig+0x68>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a11      	ldr	r2, [pc, #68]	@ (8003a2c <TIM_OC4_SetConfig+0xa8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d109      	bne.n	8003a00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40010400 	.word	0x40010400

08003a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2201      	movs	r2, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e05a      	b.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a21      	ldr	r2, [pc, #132]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae0:	d01d      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a18      	ldr	r2, [pc, #96]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a15      	ldr	r2, [pc, #84]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10c      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40010400 	.word	0x40010400
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40001800 	.word	0x40001800

08003b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e042      	b.n	8003c34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd f992 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	@ 0x24
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fe0b 	bl	80047fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d175      	bne.n	8003d48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_UART_Transmit+0x2c>
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e06e      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2221      	movs	r2, #33	@ 0x21
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fd fbd5 	bl	8001428 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c94:	d108      	bne.n	8003ca8 <HAL_UART_Transmit+0x6c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e003      	b.n	8003cb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb0:	e02e      	b.n	8003d10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2180      	movs	r1, #128	@ 0x80
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fba9 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e03a      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3302      	adds	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e007      	b.n	8003d02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1cb      	bne.n	8003cb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2140      	movs	r1, #64	@ 0x40
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fb75 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e006      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08a      	sub	sp, #40	@ 0x28
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 8081 	bne.w	8003e76 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Receive+0x2e>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e079      	b.n	8003e78 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2222      	movs	r2, #34	@ 0x22
 8003d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d98:	f7fd fb46 	bl	8001428 <HAL_GetTick>
 8003d9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db2:	d108      	bne.n	8003dc6 <HAL_UART_Receive+0x74>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e003      	b.n	8003dce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003dce:	e047      	b.n	8003e60 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2120      	movs	r1, #32
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fb1a 	bl	8004414 <UART_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e042      	b.n	8003e78 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10c      	bne.n	8003e12 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	e01f      	b.n	8003e52 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1a:	d007      	beq.n	8003e2c <HAL_UART_Receive+0xda>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_UART_Receive+0xe8>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e008      	b.n	8003e4c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1b2      	bne.n	8003dd0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ba      	sub	sp, #232	@ 0xe8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fbcd 	bl	800467e <UART_Receive_IT>
      return;
 8003ee4:	e273      	b.n	80043ce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80de 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80d1 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
 8003f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0208 	orr.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 820a 	beq.w	80043c4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fb58 	bl	800467e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_UART_IRQHandler+0x17a>
 8003ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04f      	beq.n	800409a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa63 	bl	80044c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d141      	bne.n	8004092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800403a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800403e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1d9      	bne.n	800400e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4a8a      	ldr	r2, [pc, #552]	@ (8004290 <HAL_UART_IRQHandler+0x410>)
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd fc3e 	bl	80018f0 <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00e      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fd8a 	bl	8000ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00a      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc fd86 	bl	8000ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e006      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc fd82 	bl	8000ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040a6:	e18d      	b.n	80043c4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	bf00      	nop
    return;
 80040aa:	e18b      	b.n	80043c4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 8167 	bne.w	8004384 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8160 	beq.w	8004384 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8159 	beq.w	8004384 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	f040 80ce 	bne.w	8004294 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a9 	beq.w	8004260 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004116:	429a      	cmp	r2, r3
 8004118:	f080 80a2 	bcs.w	8004260 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412e:	f000 8088 	beq.w	8004242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800415e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800416a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1d9      	bne.n	8004132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800418e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e1      	bne.n	800417e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e3      	bne.n	80041ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004224:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004226:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800422a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd fae7 	bl	8001810 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8cf 	bl	80043fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800425e:	e0b3      	b.n	80043c8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004264:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004268:	429a      	cmp	r2, r3
 800426a:	f040 80ad 	bne.w	80043c8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004278:	f040 80a6 	bne.w	80043c8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8b7 	bl	80043fc <HAL_UARTEx_RxEventCallback>
      return;
 800428e:	e09b      	b.n	80043c8 <HAL_UART_IRQHandler+0x548>
 8004290:	0800458d 	.word	0x0800458d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800429c:	b29b      	uxth	r3, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 808e 	beq.w	80043cc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80042b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8089 	beq.w	80043cc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042de:	647a      	str	r2, [r7, #68]	@ 0x44
 80042e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e3      	bne.n	80042ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3314      	adds	r3, #20
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	623b      	str	r3, [r7, #32]
   return(result);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004316:	633a      	str	r2, [r7, #48]	@ 0x30
 8004318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800431c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e3      	bne.n	80042f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	60fb      	str	r3, [r7, #12]
   return(result);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	617b      	str	r3, [r7, #20]
   return(result);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e3      	bne.n	8004338 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f83d 	bl	80043fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004382:	e023      	b.n	80043cc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <HAL_UART_IRQHandler+0x524>
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f906 	bl	80045ae <UART_Transmit_IT>
    return;
 80043a2:	e014      	b.n	80043ce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <HAL_UART_IRQHandler+0x54e>
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f946 	bl	800464e <UART_EndTransmit_IT>
    return;
 80043c2:	e004      	b.n	80043ce <HAL_UART_IRQHandler+0x54e>
    return;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <HAL_UART_IRQHandler+0x54e>
      return;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_UART_IRQHandler+0x54e>
      return;
 80043cc:	bf00      	nop
  }
}
 80043ce:	37e8      	adds	r7, #232	@ 0xe8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004424:	e03b      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d037      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fc fffb 	bl	8001428 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6a3a      	ldr	r2, [r7, #32]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <UART_WaitOnFlagUntilTimeout+0x30>
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e03a      	b.n	80044be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d023      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b80      	cmp	r3, #128	@ 0x80
 800445a:	d020      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x8a>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d01d      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d116      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f81d 	bl	80044c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2208      	movs	r2, #8
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e00f      	b.n	80044be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d0b4      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b095      	sub	sp, #84	@ 0x54
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80044f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e5      	bne.n	80044ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3314      	adds	r3, #20
 8004508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	61fb      	str	r3, [r7, #28]
   return(result);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3314      	adds	r3, #20
 8004520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e5      	bne.n	8004502 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	2b01      	cmp	r3, #1
 800453c:	d119      	bne.n	8004572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	60bb      	str	r3, [r7, #8]
   return(result);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 0310 	bic.w	r3, r3, #16
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800455e:	61ba      	str	r2, [r7, #24]
 8004560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	613b      	str	r3, [r7, #16]
   return(result);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004580:	bf00      	nop
 8004582:	3754      	adds	r7, #84	@ 0x54
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7fc faff 	bl	8000ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b21      	cmp	r3, #33	@ 0x21
 80045c0:	d13e      	bne.n	8004640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ca:	d114      	bne.n	80045f6 <UART_Transmit_IT+0x48>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d110      	bne.n	80045f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	1c9a      	adds	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	621a      	str	r2, [r3, #32]
 80045f4:	e008      	b.n	8004608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6211      	str	r1, [r2, #32]
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29b      	uxth	r3, r3
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4619      	mov	r1, r3
 8004616:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10f      	bne.n	800463c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800462a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800463a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004664:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff feb0 	bl	80043d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b08c      	sub	sp, #48	@ 0x30
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b22      	cmp	r3, #34	@ 0x22
 8004698:	f040 80aa 	bne.w	80047f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a4:	d115      	bne.n	80046d2 <UART_Receive_IT+0x54>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d111      	bne.n	80046d2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80046d0:	e024      	b.n	800471c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e0:	d007      	beq.n	80046f2 <UART_Receive_IT+0x74>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <UART_Receive_IT+0x82>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	e008      	b.n	8004712 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800470c:	b2da      	uxtb	r2, r3
 800470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004710:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29b      	uxth	r3, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4619      	mov	r1, r3
 800472a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800472c:	2b00      	cmp	r3, #0
 800472e:	d15d      	bne.n	80047ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0220 	bic.w	r2, r2, #32
 800473e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800474e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	2b01      	cmp	r3, #1
 8004774:	d135      	bne.n	80047e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	613b      	str	r3, [r7, #16]
   return(result);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479c:	623a      	str	r2, [r7, #32]
 800479e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	6a3a      	ldr	r2, [r7, #32]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d10a      	bne.n	80047d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe0e 	bl	80043fc <HAL_UARTEx_RxEventCallback>
 80047e0:	e002      	b.n	80047e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fe00 	bl	80043e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e002      	b.n	80047f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3730      	adds	r7, #48	@ 0x30
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b0c0      	sub	sp, #256	@ 0x100
 8004802:	af00      	add	r7, sp, #0
 8004804:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	68d9      	ldr	r1, [r3, #12]
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	ea40 0301 	orr.w	r3, r0, r1
 8004824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004854:	f021 010c 	bic.w	r1, r1, #12
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004862:	430b      	orrs	r3, r1
 8004864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004876:	6999      	ldr	r1, [r3, #24]
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	ea40 0301 	orr.w	r3, r0, r1
 8004882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0xa0>
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b8d      	ldr	r3, [pc, #564]	@ (8004acc <UART_SetConfig+0x2d0>)
 8004898:	429a      	cmp	r2, r3
 800489a:	d104      	bne.n	80048a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fe f894 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 80048a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048a4:	e003      	b.n	80048ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048a6:	f7fe f87b 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80048aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b8:	f040 810c 	bne.w	8004ad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ce:	4622      	mov	r2, r4
 80048d0:	462b      	mov	r3, r5
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048d6:	415b      	adcs	r3, r3
 80048d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048de:	4621      	mov	r1, r4
 80048e0:	eb12 0801 	adds.w	r8, r2, r1
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb43 0901 	adc.w	r9, r3, r1
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fe:	4690      	mov	r8, r2
 8004900:	4699      	mov	r9, r3
 8004902:	4623      	mov	r3, r4
 8004904:	eb18 0303 	adds.w	r3, r8, r3
 8004908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800490c:	462b      	mov	r3, r5
 800490e:	eb49 0303 	adc.w	r3, r9, r3
 8004912:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004922:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800492a:	460b      	mov	r3, r1
 800492c:	18db      	adds	r3, r3, r3
 800492e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004930:	4613      	mov	r3, r2
 8004932:	eb42 0303 	adc.w	r3, r2, r3
 8004936:	657b      	str	r3, [r7, #84]	@ 0x54
 8004938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800493c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004940:	f7fb fc9e 	bl	8000280 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4b61      	ldr	r3, [pc, #388]	@ (8004ad0 <UART_SetConfig+0x2d4>)
 800494a:	fba3 2302 	umull	r2, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	011c      	lsls	r4, r3, #4
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800495c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800496c:	415b      	adcs	r3, r3
 800496e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004974:	4641      	mov	r1, r8
 8004976:	eb12 0a01 	adds.w	sl, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb43 0b01 	adc.w	fp, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800498c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004994:	4692      	mov	sl, r2
 8004996:	469b      	mov	fp, r3
 8004998:	4643      	mov	r3, r8
 800499a:	eb1a 0303 	adds.w	r3, sl, r3
 800499e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049a2:	464b      	mov	r3, r9
 80049a4:	eb4b 0303 	adc.w	r3, fp, r3
 80049a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049c0:	460b      	mov	r3, r1
 80049c2:	18db      	adds	r3, r3, r3
 80049c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049c6:	4613      	mov	r3, r2
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049d6:	f7fb fc53 	bl	8000280 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad0 <UART_SetConfig+0x2d4>)
 80049e2:	fba3 2301 	umull	r2, r3, r3, r1
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2264      	movs	r2, #100	@ 0x64
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	1acb      	subs	r3, r1, r3
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049f6:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <UART_SetConfig+0x2d4>)
 80049f8:	fba3 2302 	umull	r2, r3, r3, r2
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a04:	441c      	add	r4, r3
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a20:	415b      	adcs	r3, r3
 8004a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a28:	4641      	mov	r1, r8
 8004a2a:	1851      	adds	r1, r2, r1
 8004a2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a2e:	4649      	mov	r1, r9
 8004a30:	414b      	adcs	r3, r1
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a40:	4659      	mov	r1, fp
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4642      	mov	r2, r8
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	460a      	mov	r2, r1
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a92:	f7fb fbf5 	bl	8000280 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <UART_SetConfig+0x2d4>)
 8004a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	2164      	movs	r1, #100	@ 0x64
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	3332      	adds	r3, #50	@ 0x32
 8004aae:	4a08      	ldr	r2, [pc, #32]	@ (8004ad0 <UART_SetConfig+0x2d4>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 0207 	and.w	r2, r3, #7
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4422      	add	r2, r4
 8004ac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac4:	e106      	b.n	8004cd4 <UART_SetConfig+0x4d8>
 8004ac6:	bf00      	nop
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40011400 	.word	0x40011400
 8004ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ade:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	6239      	str	r1, [r7, #32]
 8004aee:	415b      	adcs	r3, r3
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004af6:	4641      	mov	r1, r8
 8004af8:	1854      	adds	r4, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb43 0501 	adc.w	r5, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	00eb      	lsls	r3, r5, #3
 8004b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b0e:	00e2      	lsls	r2, r4, #3
 8004b10:	4614      	mov	r4, r2
 8004b12:	461d      	mov	r5, r3
 8004b14:	4643      	mov	r3, r8
 8004b16:	18e3      	adds	r3, r4, r3
 8004b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	eb45 0303 	adc.w	r3, r5, r3
 8004b22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b42:	4629      	mov	r1, r5
 8004b44:	008b      	lsls	r3, r1, #2
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	008a      	lsls	r2, r1, #2
 8004b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b54:	f7fb fb94 	bl	8000280 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4b60      	ldr	r3, [pc, #384]	@ (8004ce0 <UART_SetConfig+0x4e4>)
 8004b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	011c      	lsls	r4, r3, #4
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	61b9      	str	r1, [r7, #24]
 8004b80:	415b      	adcs	r3, r3
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6139      	str	r1, [r7, #16]
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004be0:	4649      	mov	r1, r9
 8004be2:	008b      	lsls	r3, r1, #2
 8004be4:	4641      	mov	r1, r8
 8004be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bea:	4641      	mov	r1, r8
 8004bec:	008a      	lsls	r2, r1, #2
 8004bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bf2:	f7fb fb45 	bl	8000280 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4b38      	ldr	r3, [pc, #224]	@ (8004ce0 <UART_SetConfig+0x4e4>)
 8004bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	2264      	movs	r2, #100	@ 0x64
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	1acb      	subs	r3, r1, r3
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	3332      	adds	r3, #50	@ 0x32
 8004c10:	4a33      	ldr	r2, [pc, #204]	@ (8004ce0 <UART_SetConfig+0x4e4>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c1c:	441c      	add	r4, r3
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c26:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	464b      	mov	r3, r9
 8004c30:	1891      	adds	r1, r2, r2
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	415b      	adcs	r3, r3
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	1851      	adds	r1, r2, r1
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	4649      	mov	r1, r9
 8004c44:	414b      	adcs	r3, r1
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c54:	4659      	mov	r1, fp
 8004c56:	00cb      	lsls	r3, r1, #3
 8004c58:	4651      	mov	r1, sl
 8004c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5e:	4651      	mov	r1, sl
 8004c60:	00ca      	lsls	r2, r1, #3
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	4642      	mov	r2, r8
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c6e:	464b      	mov	r3, r9
 8004c70:	460a      	mov	r2, r1
 8004c72:	eb42 0303 	adc.w	r3, r2, r3
 8004c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c82:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c90:	4649      	mov	r1, r9
 8004c92:	008b      	lsls	r3, r1, #2
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ca2:	f7fb faed 	bl	8000280 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <UART_SetConfig+0x4e4>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	@ 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	3332      	adds	r3, #50	@ 0x32
 8004cbe:	4a08      	ldr	r2, [pc, #32]	@ (8004ce0 <UART_SetConfig+0x4e4>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	f003 020f 	and.w	r2, r3, #15
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4422      	add	r2, r4
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce0:	51eb851f 	.word	0x51eb851f

08004ce4 <__NVIC_SetPriority>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	6039      	str	r1, [r7, #0]
 8004cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	db0a      	blt.n	8004d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	490c      	ldr	r1, [pc, #48]	@ (8004d30 <__NVIC_SetPriority+0x4c>)
 8004cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d02:	0112      	lsls	r2, r2, #4
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	440b      	add	r3, r1
 8004d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d0c:	e00a      	b.n	8004d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4908      	ldr	r1, [pc, #32]	@ (8004d34 <__NVIC_SetPriority+0x50>)
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	3b04      	subs	r3, #4
 8004d1c:	0112      	lsls	r2, r2, #4
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	440b      	add	r3, r1
 8004d22:	761a      	strb	r2, [r3, #24]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	e000e100 	.word	0xe000e100
 8004d34:	e000ed00 	.word	0xe000ed00

08004d38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <SysTick_Handler+0x1c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d40:	f001 ff34 	bl	8006bac <xTaskGetSchedulerState>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d4a:	f002 fd2d 	bl	80077a8 <xPortSysTickHandler>
  }
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	e000e010 	.word	0xe000e010

08004d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f06f 0004 	mvn.w	r0, #4
 8004d62:	f7ff ffbf 	bl	8004ce4 <__NVIC_SetPriority>
#endif
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d72:	f3ef 8305 	mrs	r3, IPSR
 8004d76:	603b      	str	r3, [r7, #0]
  return(result);
 8004d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d7e:	f06f 0305 	mvn.w	r3, #5
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	e00c      	b.n	8004da0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d86:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <osKernelInitialize+0x44>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d8e:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <osKernelInitialize+0x44>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	e002      	b.n	8004da0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004da0:	687b      	ldr	r3, [r7, #4]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	2000030c 	.word	0x2000030c

08004db4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dba:	f3ef 8305 	mrs	r3, IPSR
 8004dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8004dc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dc6:	f06f 0305 	mvn.w	r3, #5
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	e010      	b.n	8004df0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <osKernelStart+0x48>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d109      	bne.n	8004dea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dd6:	f7ff ffbf 	bl	8004d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dda:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <osKernelStart+0x48>)
 8004ddc:	2202      	movs	r2, #2
 8004dde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004de0:	f001 fa80 	bl	80062e4 <vTaskStartScheduler>
      stat = osOK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	e002      	b.n	8004df0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295
 8004dee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004df0:	687b      	ldr	r3, [r7, #4]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	2000030c 	.word	0x2000030c

08004e00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08e      	sub	sp, #56	@ 0x38
 8004e04:	af04      	add	r7, sp, #16
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e10:	f3ef 8305 	mrs	r3, IPSR
 8004e14:	617b      	str	r3, [r7, #20]
  return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d17e      	bne.n	8004f1a <osThreadNew+0x11a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d07b      	beq.n	8004f1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e26:	2318      	movs	r3, #24
 8004e28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d045      	beq.n	8004ec6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <osThreadNew+0x48>
        name = attr->name;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <osThreadNew+0x6e>
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b38      	cmp	r3, #56	@ 0x38
 8004e60:	d805      	bhi.n	8004e6e <osThreadNew+0x6e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <osThreadNew+0x72>
        return (NULL);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e054      	b.n	8004f1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <osThreadNew+0xa8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004e90:	d90a      	bls.n	8004ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <osThreadNew+0xa8>
        mem = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e010      	b.n	8004eca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10c      	bne.n	8004eca <osThreadNew+0xca>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d108      	bne.n	8004eca <osThreadNew+0xca>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <osThreadNew+0xca>
          mem = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	e001      	b.n	8004eca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d110      	bne.n	8004ef2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ed8:	9202      	str	r2, [sp, #8]
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f001 f808 	bl	8005efc <xTaskCreateStatic>
 8004eec:	4603      	mov	r3, r0
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e013      	b.n	8004f1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f001 f856 	bl	8005fbc <xTaskCreate>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <osThreadNew+0x11a>
            hTask = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f1a:	693b      	ldr	r3, [r7, #16]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3728      	adds	r7, #40	@ 0x28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2c:	f3ef 8305 	mrs	r3, IPSR
 8004f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <osDelay+0x1c>
    stat = osErrorISR;
 8004f38:	f06f 0305 	mvn.w	r3, #5
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e007      	b.n	8004f50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 f994 	bl	8006278 <vTaskDelay>
    }
  }

  return (stat);
 8004f50:	68fb      	ldr	r3, [r7, #12]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08a      	sub	sp, #40	@ 0x28
 8004f5e:	af02      	add	r7, sp, #8
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6a:	f3ef 8305 	mrs	r3, IPSR
 8004f6e:	613b      	str	r3, [r7, #16]
  return(result);
 8004f70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d15f      	bne.n	8005036 <osMessageQueueNew+0xdc>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d05c      	beq.n	8005036 <osMessageQueueNew+0xdc>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d059      	beq.n	8005036 <osMessageQueueNew+0xdc>
    mem = -1;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d029      	beq.n	8004fe2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d012      	beq.n	8004fbc <osMessageQueueNew+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004f9c:	d90e      	bls.n	8004fbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	fb01 f303 	mul.w	r3, r1, r3
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d302      	bcc.n	8004fbc <osMessageQueueNew+0x62>
        mem = 1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e014      	b.n	8004fe6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <osMessageQueueNew+0x8c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10c      	bne.n	8004fe6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d108      	bne.n	8004fe6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <osMessageQueueNew+0x8c>
          mem = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e001      	b.n	8004fe6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10b      	bne.n	8005004 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	9100      	str	r1, [sp, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fa30 	bl	8005460 <xQueueGenericCreateStatic>
 8005000:	61f8      	str	r0, [r7, #28]
 8005002:	e008      	b.n	8005016 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d105      	bne.n	8005016 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800500a:	2200      	movs	r2, #0
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 faa3 	bl	800555a <xQueueGenericCreate>
 8005014:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e001      	b.n	800502e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	69f8      	ldr	r0, [r7, #28]
 8005032:	f000 ff05 	bl	8005e40 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005058:	f3ef 8305 	mrs	r3, IPSR
 800505c:	617b      	str	r3, [r7, #20]
  return(result);
 800505e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005060:	2b00      	cmp	r3, #0
 8005062:	d028      	beq.n	80050b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <osMessageQueuePut+0x36>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <osMessageQueuePut+0x36>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005076:	f06f 0303 	mvn.w	r3, #3
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	e038      	b.n	80050f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005082:	f107 0210 	add.w	r2, r7, #16
 8005086:	2300      	movs	r3, #0
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	69b8      	ldr	r0, [r7, #24]
 800508c:	f000 fbc6 	bl	800581c <xQueueGenericSendFromISR>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d003      	beq.n	800509e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005096:	f06f 0302 	mvn.w	r3, #2
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	e028      	b.n	80050f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d025      	beq.n	80050f0 <osMessageQueuePut+0xb0>
 80050a4:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <osMessageQueuePut+0xbc>)
 80050a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	e01c      	b.n	80050f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <osMessageQueuePut+0x82>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80050c2:	f06f 0303 	mvn.w	r3, #3
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e012      	b.n	80050f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80050ca:	2300      	movs	r3, #0
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	69b8      	ldr	r0, [r7, #24]
 80050d2:	f000 faa1 	bl	8005618 <xQueueGenericSend>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d009      	beq.n	80050f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80050e2:	f06f 0301 	mvn.w	r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	e002      	b.n	80050f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80050ea:	f06f 0302 	mvn.w	r3, #2
 80050ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80050f0:	69fb      	ldr	r3, [r7, #28]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005116:	f3ef 8305 	mrs	r3, IPSR
 800511a:	617b      	str	r3, [r7, #20]
  return(result);
 800511c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800511e:	2b00      	cmp	r3, #0
 8005120:	d028      	beq.n	8005174 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <osMessageQueueGet+0x34>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <osMessageQueueGet+0x34>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005134:	f06f 0303 	mvn.w	r3, #3
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e037      	b.n	80051ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005140:	f107 0310 	add.w	r3, r7, #16
 8005144:	461a      	mov	r2, r3
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	69b8      	ldr	r0, [r7, #24]
 800514a:	f000 fce7 	bl	8005b1c <xQueueReceiveFromISR>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d003      	beq.n	800515c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005154:	f06f 0302 	mvn.w	r3, #2
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e027      	b.n	80051ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d024      	beq.n	80051ac <osMessageQueueGet+0xac>
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <osMessageQueueGet+0xb8>)
 8005164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	e01b      	b.n	80051ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <osMessageQueueGet+0x80>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005180:	f06f 0303 	mvn.w	r3, #3
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e011      	b.n	80051ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	69b8      	ldr	r0, [r7, #24]
 800518e:	f000 fbe3 	bl	8005958 <xQueueReceive>
 8005192:	4603      	mov	r3, r0
 8005194:	2b01      	cmp	r3, #1
 8005196:	d009      	beq.n	80051ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800519e:	f06f 0301 	mvn.w	r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e002      	b.n	80051ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80051a6:	f06f 0302 	mvn.w	r3, #2
 80051aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a07      	ldr	r2, [pc, #28]	@ (80051e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a06      	ldr	r2, [pc, #24]	@ (80051ec <vApplicationGetIdleTaskMemory+0x30>)
 80051d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2280      	movs	r2, #128	@ 0x80
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000310 	.word	0x20000310
 80051ec:	200003b8 	.word	0x200003b8

080051f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a07      	ldr	r2, [pc, #28]	@ (800521c <vApplicationGetTimerTaskMemory+0x2c>)
 8005200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a06      	ldr	r2, [pc, #24]	@ (8005220 <vApplicationGetTimerTaskMemory+0x30>)
 8005206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800520e:	601a      	str	r2, [r3, #0]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	200005b8 	.word	0x200005b8
 8005220:	20000660 	.word	0x20000660

08005224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f103 0208 	add.w	r2, r3, #8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f103 0208 	add.w	r2, r3, #8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f103 0208 	add.w	r2, r3, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d103      	bne.n	80052e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e00c      	b.n	8005300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3308      	adds	r3, #8
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e002      	b.n	80052f4 <vListInsert+0x2e>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d2f6      	bcs.n	80052ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	601a      	str	r2, [r3, #0]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6892      	ldr	r2, [r2, #8]
 800534e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6852      	ldr	r2, [r2, #4]
 8005358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d103      	bne.n	800536c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10b      	bne.n	80053b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053b8:	f002 f966 	bl	8007688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e8:	3b01      	subs	r3, #1
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	441a      	add	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	22ff      	movs	r2, #255	@ 0xff
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d114      	bne.n	8005438 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01a      	beq.n	800544c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3310      	adds	r3, #16
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fa00 	bl	8006820 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d012      	beq.n	800544c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005426:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <xQueueGenericReset+0xd0>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	e009      	b.n	800544c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3310      	adds	r3, #16
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fef1 	bl	8005224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3324      	adds	r3, #36	@ 0x24
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff feec 	bl	8005224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800544c:	f002 f94e 	bl	80076ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005450:	2301      	movs	r3, #1
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	@ 0x38
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	e7fd      	b.n	8005488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <xQueueGenericCreateStatic+0x56>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <xQueueGenericCreateStatic+0x5a>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericCreateStatic+0x5c>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	623b      	str	r3, [r7, #32]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <xQueueGenericCreateStatic+0x84>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <xQueueGenericCreateStatic+0x88>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <xQueueGenericCreateStatic+0x8a>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	61fb      	str	r3, [r7, #28]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005506:	2350      	movs	r3, #80	@ 0x50
 8005508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b50      	cmp	r3, #80	@ 0x50
 800550e:	d00b      	beq.n	8005528 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61bb      	str	r3, [r7, #24]
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005528:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800553c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f840 	bl	80055d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005552:	4618      	mov	r0, r3
 8005554:	3730      	adds	r7, #48	@ 0x30
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800555a:	b580      	push	{r7, lr}
 800555c:	b08a      	sub	sp, #40	@ 0x28
 800555e:	af02      	add	r7, sp, #8
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	4613      	mov	r3, r2
 8005566:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <xQueueGenericCreate+0x2c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	613b      	str	r3, [r7, #16]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3350      	adds	r3, #80	@ 0x50
 8005594:	4618      	mov	r0, r3
 8005596:	f002 f999 	bl	80078cc <pvPortMalloc>
 800559a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d011      	beq.n	80055c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	3350      	adds	r3, #80	@ 0x50
 80055aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b4:	79fa      	ldrb	r2, [r7, #7]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f805 	bl	80055d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055c6:	69bb      	ldr	r3, [r7, #24]
	}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055fe:	2101      	movs	r1, #1
 8005600:	69b8      	ldr	r0, [r7, #24]
 8005602:	f7ff fec3 	bl	800538c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	@ 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <xQueueGenericSend+0x34>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x42>
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueGenericSend+0x46>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericSend+0x48>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <xQueueGenericSend+0x64>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x72>
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <xQueueGenericSend+0x76>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericSend+0x78>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <xQueueGenericSend+0x94>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	623b      	str	r3, [r7, #32]
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ac:	f001 fa7e 	bl	8006bac <xTaskGetSchedulerState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xQueueGenericSend+0xa4>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSend+0xa8>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueGenericSend+0xaa>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <xQueueGenericSend+0xc6>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61fb      	str	r3, [r7, #28]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056de:	f001 ffd3 	bl	8007688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <xQueueGenericSend+0xdc>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d129      	bne.n	8005748 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fa:	f000 fa91 	bl	8005c20 <prvCopyDataToQueue>
 80056fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	3324      	adds	r3, #36	@ 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f001 f887 	bl	8006820 <xTaskRemoveFromEventList>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005718:	4b3f      	ldr	r3, [pc, #252]	@ (8005818 <xQueueGenericSend+0x200>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	e00a      	b.n	8005740 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005730:	4b39      	ldr	r3, [pc, #228]	@ (8005818 <xQueueGenericSend+0x200>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005740:	f001 ffd4 	bl	80076ec <vPortExitCritical>
				return pdPASS;
 8005744:	2301      	movs	r3, #1
 8005746:	e063      	b.n	8005810 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800574e:	f001 ffcd 	bl	80076ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005752:	2300      	movs	r3, #0
 8005754:	e05c      	b.n	8005810 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f8c1 	bl	80068e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800576a:	f001 ffbf 	bl	80076ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576e:	f000 fe29 	bl	80063c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005772:	f001 ff89 	bl	8007688 <vPortEnterCritical>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800577c:	b25b      	sxtb	r3, r3
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d103      	bne.n	800578c <xQueueGenericSend+0x174>
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d103      	bne.n	80057a2 <xQueueGenericSend+0x18a>
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a2:	f001 ffa3 	bl	80076ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a6:	1d3a      	adds	r2, r7, #4
 80057a8:	f107 0314 	add.w	r3, r7, #20
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f8b0 	bl	8006914 <xTaskCheckForTimeOut>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d124      	bne.n	8005804 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057bc:	f000 fb28 	bl	8005e10 <prvIsQueueFull>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	3310      	adds	r3, #16
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ffd4 	bl	800677c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057d6:	f000 fab3 	bl	8005d40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057da:	f000 fe01 	bl	80063e0 <xTaskResumeAll>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f af7c 	bne.w	80056de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <xQueueGenericSend+0x200>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	e772      	b.n	80056de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057fa:	f000 faa1 	bl	8005d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057fe:	f000 fdef 	bl	80063e0 <xTaskResumeAll>
 8005802:	e76c      	b.n	80056de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005806:	f000 fa9b 	bl	8005d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580a:	f000 fde9 	bl	80063e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800580e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005810:	4618      	mov	r0, r3
 8005812:	3738      	adds	r7, #56	@ 0x38
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b090      	sub	sp, #64	@ 0x40
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <xQueueGenericSendFromISR+0x3e>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <xQueueGenericSendFromISR+0x42>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueGenericSendFromISR+0x44>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <xQueueGenericSendFromISR+0x6e>
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <xQueueGenericSendFromISR+0x72>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSendFromISR+0x74>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058ac:	f001 ffcc 	bl	8007848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058b0:	f3ef 8211 	mrs	r2, BASEPRI
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61fa      	str	r2, [r7, #28]
 80058c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <xQueueGenericSendFromISR+0xc2>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d12f      	bne.n	800593e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058f4:	f000 f994 	bl	8005c20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d112      	bne.n	8005928 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	3324      	adds	r3, #36	@ 0x24
 800590e:	4618      	mov	r0, r3
 8005910:	f000 ff86 	bl	8006820 <xTaskRemoveFromEventList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800592c:	3301      	adds	r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	b25a      	sxtb	r2, r3
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005938:	2301      	movs	r3, #1
 800593a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800593c:	e001      	b.n	8005942 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800593e:	2300      	movs	r3, #0
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800594c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005950:	4618      	mov	r0, r3
 8005952:	3740      	adds	r7, #64	@ 0x40
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	@ 0x30
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005964:	2300      	movs	r3, #0
 8005966:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <xQueueReceive+0x32>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	623b      	str	r3, [r7, #32]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d103      	bne.n	8005998 <xQueueReceive+0x40>
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <xQueueReceive+0x44>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <xQueueReceive+0x46>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xQueueReceive+0x62>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	61fb      	str	r3, [r7, #28]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ba:	f001 f8f7 	bl	8006bac <xTaskGetSchedulerState>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <xQueueReceive+0x72>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xQueueReceive+0x76>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueReceive+0x78>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xQueueReceive+0x94>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61bb      	str	r3, [r7, #24]
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ec:	f001 fe4c 	bl	8007688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a00:	f000 f978 	bl	8005cf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	1e5a      	subs	r2, r3, #1
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	3310      	adds	r3, #16
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 ff01 	bl	8006820 <xTaskRemoveFromEventList>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a24:	4b3c      	ldr	r3, [pc, #240]	@ (8005b18 <xQueueReceive+0x1c0>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a34:	f001 fe5a 	bl	80076ec <vPortExitCritical>
				return pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e069      	b.n	8005b10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a42:	f001 fe53 	bl	80076ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e062      	b.n	8005b10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a50:	f107 0310 	add.w	r3, r7, #16
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 ff47 	bl	80068e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5e:	f001 fe45 	bl	80076ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a62:	f000 fcaf 	bl	80063c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a66:	f001 fe0f 	bl	8007688 <vPortEnterCritical>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <xQueueReceive+0x128>
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d103      	bne.n	8005a96 <xQueueReceive+0x13e>
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a96:	f001 fe29 	bl	80076ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9a:	1d3a      	adds	r2, r7, #4
 8005a9c:	f107 0310 	add.w	r3, r7, #16
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 ff36 	bl	8006914 <xTaskCheckForTimeOut>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d123      	bne.n	8005af6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab0:	f000 f998 	bl	8005de4 <prvIsQueueEmpty>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	3324      	adds	r3, #36	@ 0x24
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fe5a 	bl	800677c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aca:	f000 f939 	bl	8005d40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f000 fc87 	bl	80063e0 <xTaskResumeAll>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d189      	bne.n	80059ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <xQueueReceive+0x1c0>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e780      	b.n	80059ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aec:	f000 f928 	bl	8005d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af0:	f000 fc76 	bl	80063e0 <xTaskResumeAll>
 8005af4:	e77a      	b.n	80059ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af8:	f000 f922 	bl	8005d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afc:	f000 fc70 	bl	80063e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b02:	f000 f96f 	bl	8005de4 <prvIsQueueEmpty>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f43f af6f 	beq.w	80059ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3730      	adds	r7, #48	@ 0x30
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	@ 0x38
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	623b      	str	r3, [r7, #32]
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	e7fd      	b.n	8005b46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <xQueueReceiveFromISR+0x3c>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <xQueueReceiveFromISR+0x40>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <xQueueReceiveFromISR+0x42>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61fb      	str	r3, [r7, #28]
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	e7fd      	b.n	8005b76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b7a:	f001 fe65 	bl	8007848 <vPortValidateInterruptPriority>
	__asm volatile
 8005b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	61ba      	str	r2, [r7, #24]
 8005b94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02f      	beq.n	8005c06 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bb4:	f000 f89e 	bl	8005cf4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d112      	bne.n	8005bf0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d016      	beq.n	8005c00 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	3310      	adds	r3, #16
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fe22 	bl	8006820 <xTaskRemoveFromEventList>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e007      	b.n	8005c00 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	b25a      	sxtb	r2, r3
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005c00:	2301      	movs	r3, #1
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	e001      	b.n	8005c0a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f383 8811 	msr	BASEPRI, r3
}
 8005c14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3738      	adds	r7, #56	@ 0x38
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d14d      	bne.n	8005ce2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 ffcc 	bl	8006be8 <xTaskPriorityDisinherit>
 8005c50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	e043      	b.n	8005ce2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d119      	bne.n	8005c94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6858      	ldr	r0, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	f002 fb23 	bl	80082b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d32b      	bcc.n	8005ce2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	e026      	b.n	8005ce2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68d8      	ldr	r0, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	f002 fb09 	bl	80082b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	425b      	negs	r3, r3
 8005cae:	441a      	add	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d207      	bcs.n	8005cd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc8:	425b      	negs	r3, r3
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d105      	bne.n	8005ce2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005cea:	697b      	ldr	r3, [r7, #20]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	441a      	add	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d303      	bcc.n	8005d28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68d9      	ldr	r1, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	461a      	mov	r2, r3
 8005d32:	6838      	ldr	r0, [r7, #0]
 8005d34:	f002 fabf 	bl	80082b6 <memcpy>
	}
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d48:	f001 fc9e 	bl	8007688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d54:	e011      	b.n	8005d7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d012      	beq.n	8005d84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3324      	adds	r3, #36	@ 0x24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fd5c 	bl	8006820 <xTaskRemoveFromEventList>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d6e:	f000 fe35 	bl	80069dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dce9      	bgt.n	8005d56 <prvUnlockQueue+0x16>
 8005d82:	e000      	b.n	8005d86 <prvUnlockQueue+0x46>
					break;
 8005d84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	22ff      	movs	r2, #255	@ 0xff
 8005d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d8e:	f001 fcad 	bl	80076ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d92:	f001 fc79 	bl	8007688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d9e:	e011      	b.n	8005dc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d012      	beq.n	8005dce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3310      	adds	r3, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd37 	bl	8006820 <xTaskRemoveFromEventList>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005db8:	f000 fe10 	bl	80069dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dce9      	bgt.n	8005da0 <prvUnlockQueue+0x60>
 8005dcc:	e000      	b.n	8005dd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	22ff      	movs	r2, #255	@ 0xff
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005dd8:	f001 fc88 	bl	80076ec <vPortExitCritical>
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dec:	f001 fc4c 	bl	8007688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e001      	b.n	8005e02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e02:	f001 fc73 	bl	80076ec <vPortExitCritical>

	return xReturn;
 8005e06:	68fb      	ldr	r3, [r7, #12]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e18:	f001 fc36 	bl	8007688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d102      	bne.n	8005e2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e001      	b.n	8005e32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e32:	f001 fc5b 	bl	80076ec <vPortExitCritical>

	return xReturn;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e014      	b.n	8005e7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e50:	4a0f      	ldr	r2, [pc, #60]	@ (8005e90 <vQueueAddToRegistry+0x50>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e5c:	490c      	ldr	r1, [pc, #48]	@ (8005e90 <vQueueAddToRegistry+0x50>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e66:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <vQueueAddToRegistry+0x50>)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e72:	e006      	b.n	8005e82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b07      	cmp	r3, #7
 8005e7e:	d9e7      	bls.n	8005e50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000a60 	.word	0x20000a60

08005e94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ea4:	f001 fbf0 	bl	8007688 <vPortEnterCritical>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005eae:	b25b      	sxtb	r3, r3
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d103      	bne.n	8005ebe <vQueueWaitForMessageRestricted+0x2a>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eca:	d103      	bne.n	8005ed4 <vQueueWaitForMessageRestricted+0x40>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ed4:	f001 fc0a 	bl	80076ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d106      	bne.n	8005eee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	3324      	adds	r3, #36	@ 0x24
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fc6d 	bl	80067c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eee:	6978      	ldr	r0, [r7, #20]
 8005ef0:	f7ff ff26 	bl	8005d40 <prvUnlockQueue>
	}
 8005ef4:	bf00      	nop
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	@ 0x38
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10b      	bne.n	8005f28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	623b      	str	r3, [r7, #32]
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	e7fd      	b.n	8005f24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	61fb      	str	r3, [r7, #28]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f46:	23a8      	movs	r3, #168	@ 0xa8
 8005f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005f4e:	d00b      	beq.n	8005f68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	61bb      	str	r3, [r7, #24]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01e      	beq.n	8005fae <xTaskCreateStatic+0xb2>
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	9302      	str	r3, [sp, #8]
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f851 	bl	8006048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fa8:	f000 f8f6 	bl	8006198 <prvAddNewTaskToReadyList>
 8005fac:	e001      	b.n	8005fb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fb2:	697b      	ldr	r3, [r7, #20]
	}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08c      	sub	sp, #48	@ 0x30
 8005fc0:	af04      	add	r7, sp, #16
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fc7b 	bl	80078cc <pvPortMalloc>
 8005fd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fde:	20a8      	movs	r0, #168	@ 0xa8
 8005fe0:	f001 fc74 	bl	80078cc <pvPortMalloc>
 8005fe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ff2:	e005      	b.n	8006000 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ff4:	6978      	ldr	r0, [r7, #20]
 8005ff6:	f001 fd37 	bl	8007a68 <vPortFree>
 8005ffa:	e001      	b.n	8006000 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d017      	beq.n	8006036 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	2300      	movs	r3, #0
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	9302      	str	r3, [sp, #8]
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f80f 	bl	8006048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800602a:	69f8      	ldr	r0, [r7, #28]
 800602c:	f000 f8b4 	bl	8006198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006030:	2301      	movs	r3, #1
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e002      	b.n	800603c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800603c:	69bb      	ldr	r3, [r7, #24]
	}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	461a      	mov	r2, r3
 8006060:	21a5      	movs	r1, #165	@ 0xa5
 8006062:	f002 f84f 	bl	8008104 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006070:	3b01      	subs	r3, #1
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f023 0307 	bic.w	r3, r3, #7
 800607e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	617b      	str	r3, [r7, #20]
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01f      	beq.n	80060e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	e012      	b.n	80060d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	3334      	adds	r3, #52	@ 0x34
 80060be:	460a      	mov	r2, r1
 80060c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d006      	beq.n	80060dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3301      	adds	r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d9e9      	bls.n	80060ae <prvInitialiseNewTask+0x66>
 80060da:	e000      	b.n	80060de <prvInitialiseNewTask+0x96>
			{
				break;
 80060dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060e6:	e003      	b.n	80060f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	2b37      	cmp	r3, #55	@ 0x37
 80060f4:	d901      	bls.n	80060fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060f6:	2337      	movs	r3, #55	@ 0x37
 80060f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006104:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	2200      	movs	r2, #0
 800610a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	3304      	adds	r3, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff f8a7 	bl	8005264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	3318      	adds	r3, #24
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff f8a2 	bl	8005264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006124:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006134:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2200      	movs	r2, #0
 8006142:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	3354      	adds	r3, #84	@ 0x54
 800614a:	224c      	movs	r2, #76	@ 0x4c
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f001 ffd8 	bl	8008104 <memset>
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	4a0d      	ldr	r2, [pc, #52]	@ (800618c <prvInitialiseNewTask+0x144>)
 8006158:	659a      	str	r2, [r3, #88]	@ 0x58
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	4a0c      	ldr	r2, [pc, #48]	@ (8006190 <prvInitialiseNewTask+0x148>)
 800615e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	4a0c      	ldr	r2, [pc, #48]	@ (8006194 <prvInitialiseNewTask+0x14c>)
 8006164:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	68f9      	ldr	r1, [r7, #12]
 800616a:	69b8      	ldr	r0, [r7, #24]
 800616c:	f001 f95a 	bl	8007424 <pxPortInitialiseStack>
 8006170:	4602      	mov	r2, r0
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006182:	bf00      	nop
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20005f14 	.word	0x20005f14
 8006190:	20005f7c 	.word	0x20005f7c
 8006194:	20005fe4 	.word	0x20005fe4

08006198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061a0:	f001 fa72 	bl	8007688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061a4:	4b2d      	ldr	r3, [pc, #180]	@ (800625c <prvAddNewTaskToReadyList+0xc4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	4a2c      	ldr	r2, [pc, #176]	@ (800625c <prvAddNewTaskToReadyList+0xc4>)
 80061ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061bc:	4b27      	ldr	r3, [pc, #156]	@ (800625c <prvAddNewTaskToReadyList+0xc4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d110      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061c4:	f000 fc2e 	bl	8006a24 <prvInitialiseTaskLists>
 80061c8:	e00d      	b.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061ca:	4b26      	ldr	r3, [pc, #152]	@ (8006264 <prvAddNewTaskToReadyList+0xcc>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061d2:	4b23      	ldr	r3, [pc, #140]	@ (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d802      	bhi.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061e6:	4b20      	ldr	r3, [pc, #128]	@ (8006268 <prvAddNewTaskToReadyList+0xd0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006268 <prvAddNewTaskToReadyList+0xd0>)
 80061ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <prvAddNewTaskToReadyList+0xd0>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fc:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <prvAddNewTaskToReadyList+0xd4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <prvAddNewTaskToReadyList+0x74>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	4a18      	ldr	r2, [pc, #96]	@ (800626c <prvAddNewTaskToReadyList+0xd4>)
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4a15      	ldr	r2, [pc, #84]	@ (8006270 <prvAddNewTaskToReadyList+0xd8>)
 800621a:	441a      	add	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7ff f82b 	bl	800527e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006228:	f001 fa60 	bl	80076ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800622c:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <prvAddNewTaskToReadyList+0xcc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006234:	4b0a      	ldr	r3, [pc, #40]	@ (8006260 <prvAddNewTaskToReadyList+0xc8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	429a      	cmp	r2, r3
 8006240:	d207      	bcs.n	8006252 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006242:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <prvAddNewTaskToReadyList+0xdc>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000f74 	.word	0x20000f74
 8006260:	20000aa0 	.word	0x20000aa0
 8006264:	20000f80 	.word	0x20000f80
 8006268:	20000f90 	.word	0x20000f90
 800626c:	20000f7c 	.word	0x20000f7c
 8006270:	20000aa4 	.word	0x20000aa4
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d018      	beq.n	80062bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800628a:	4b14      	ldr	r3, [pc, #80]	@ (80062dc <vTaskDelay+0x64>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <vTaskDelay+0x32>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60bb      	str	r3, [r7, #8]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062aa:	f000 f88b 	bl	80063c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062ae:	2100      	movs	r1, #0
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fd09 	bl	8006cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062b6:	f000 f893 	bl	80063e0 <xTaskResumeAll>
 80062ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d107      	bne.n	80062d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80062c2:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <vTaskDelay+0x68>)
 80062c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000f9c 	.word	0x20000f9c
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	@ 0x28
 80062e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062f2:	463a      	mov	r2, r7
 80062f4:	1d39      	adds	r1, r7, #4
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe ff5e 	bl	80051bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	9202      	str	r2, [sp, #8]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	2300      	movs	r3, #0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	460a      	mov	r2, r1
 8006312:	4924      	ldr	r1, [pc, #144]	@ (80063a4 <vTaskStartScheduler+0xc0>)
 8006314:	4824      	ldr	r0, [pc, #144]	@ (80063a8 <vTaskStartScheduler+0xc4>)
 8006316:	f7ff fdf1 	bl	8005efc <xTaskCreateStatic>
 800631a:	4603      	mov	r3, r0
 800631c:	4a23      	ldr	r2, [pc, #140]	@ (80063ac <vTaskStartScheduler+0xc8>)
 800631e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006320:	4b22      	ldr	r3, [pc, #136]	@ (80063ac <vTaskStartScheduler+0xc8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e001      	b.n	8006332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d102      	bne.n	800633e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006338:	f000 fd1a 	bl	8006d70 <xTimerCreateTimerTask>
 800633c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d11b      	bne.n	800637c <vTaskStartScheduler+0x98>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	613b      	str	r3, [r7, #16]
}
 8006356:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006358:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <vTaskStartScheduler+0xcc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3354      	adds	r3, #84	@ 0x54
 800635e:	4a15      	ldr	r2, [pc, #84]	@ (80063b4 <vTaskStartScheduler+0xd0>)
 8006360:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006362:	4b15      	ldr	r3, [pc, #84]	@ (80063b8 <vTaskStartScheduler+0xd4>)
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800636a:	4b14      	ldr	r3, [pc, #80]	@ (80063bc <vTaskStartScheduler+0xd8>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006370:	4b13      	ldr	r3, [pc, #76]	@ (80063c0 <vTaskStartScheduler+0xdc>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006376:	f001 f8e3 	bl	8007540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800637a:	e00f      	b.n	800639c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d10b      	bne.n	800639c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	60fb      	str	r3, [r7, #12]
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <vTaskStartScheduler+0xb4>
}
 800639c:	bf00      	nop
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	08008e74 	.word	0x08008e74
 80063a8:	080069f5 	.word	0x080069f5
 80063ac:	20000f98 	.word	0x20000f98
 80063b0:	20000aa0 	.word	0x20000aa0
 80063b4:	2000001c 	.word	0x2000001c
 80063b8:	20000f94 	.word	0x20000f94
 80063bc:	20000f80 	.word	0x20000f80
 80063c0:	20000f78 	.word	0x20000f78

080063c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063c8:	4b04      	ldr	r3, [pc, #16]	@ (80063dc <vTaskSuspendAll+0x18>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	4a03      	ldr	r2, [pc, #12]	@ (80063dc <vTaskSuspendAll+0x18>)
 80063d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063d2:	bf00      	nop
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000f9c 	.word	0x20000f9c

080063e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063ee:	4b42      	ldr	r3, [pc, #264]	@ (80064f8 <xTaskResumeAll+0x118>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <xTaskResumeAll+0x2e>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	603b      	str	r3, [r7, #0]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800640e:	f001 f93b 	bl	8007688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006412:	4b39      	ldr	r3, [pc, #228]	@ (80064f8 <xTaskResumeAll+0x118>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3b01      	subs	r3, #1
 8006418:	4a37      	ldr	r2, [pc, #220]	@ (80064f8 <xTaskResumeAll+0x118>)
 800641a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641c:	4b36      	ldr	r3, [pc, #216]	@ (80064f8 <xTaskResumeAll+0x118>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d162      	bne.n	80064ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006424:	4b35      	ldr	r3, [pc, #212]	@ (80064fc <xTaskResumeAll+0x11c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05e      	beq.n	80064ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800642c:	e02f      	b.n	800648e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800642e:	4b34      	ldr	r3, [pc, #208]	@ (8006500 <xTaskResumeAll+0x120>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3318      	adds	r3, #24
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe ff7c 	bl	8005338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe ff77 	bl	8005338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644e:	4b2d      	ldr	r3, [pc, #180]	@ (8006504 <xTaskResumeAll+0x124>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d903      	bls.n	800645e <xTaskResumeAll+0x7e>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645a:	4a2a      	ldr	r2, [pc, #168]	@ (8006504 <xTaskResumeAll+0x124>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4a27      	ldr	r2, [pc, #156]	@ (8006508 <xTaskResumeAll+0x128>)
 800646c:	441a      	add	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3304      	adds	r3, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f7fe ff02 	bl	800527e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647e:	4b23      	ldr	r3, [pc, #140]	@ (800650c <xTaskResumeAll+0x12c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006488:	4b21      	ldr	r3, [pc, #132]	@ (8006510 <xTaskResumeAll+0x130>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800648e:	4b1c      	ldr	r3, [pc, #112]	@ (8006500 <xTaskResumeAll+0x120>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1cb      	bne.n	800642e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800649c:	f000 fb66 	bl	8006b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006514 <xTaskResumeAll+0x134>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d010      	beq.n	80064ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064ac:	f000 f846 	bl	800653c <xTaskIncrementTick>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80064b6:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <xTaskResumeAll+0x130>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3b01      	subs	r3, #1
 80064c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f1      	bne.n	80064ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80064c8:	4b12      	ldr	r3, [pc, #72]	@ (8006514 <xTaskResumeAll+0x134>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064ce:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <xTaskResumeAll+0x130>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064d6:	2301      	movs	r3, #1
 80064d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064da:	4b0f      	ldr	r3, [pc, #60]	@ (8006518 <xTaskResumeAll+0x138>)
 80064dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064ea:	f001 f8ff 	bl	80076ec <vPortExitCritical>

	return xAlreadyYielded;
 80064ee:	68bb      	ldr	r3, [r7, #8]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000f9c 	.word	0x20000f9c
 80064fc:	20000f74 	.word	0x20000f74
 8006500:	20000f34 	.word	0x20000f34
 8006504:	20000f7c 	.word	0x20000f7c
 8006508:	20000aa4 	.word	0x20000aa4
 800650c:	20000aa0 	.word	0x20000aa0
 8006510:	20000f88 	.word	0x20000f88
 8006514:	20000f84 	.word	0x20000f84
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006522:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <xTaskGetTickCount+0x1c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006528:	687b      	ldr	r3, [r7, #4]
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20000f78 	.word	0x20000f78

0800653c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006546:	4b4f      	ldr	r3, [pc, #316]	@ (8006684 <xTaskIncrementTick+0x148>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 8090 	bne.w	8006670 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006550:	4b4d      	ldr	r3, [pc, #308]	@ (8006688 <xTaskIncrementTick+0x14c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006558:	4a4b      	ldr	r2, [pc, #300]	@ (8006688 <xTaskIncrementTick+0x14c>)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d121      	bne.n	80065a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006564:	4b49      	ldr	r3, [pc, #292]	@ (800668c <xTaskIncrementTick+0x150>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <xTaskIncrementTick+0x4a>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	603b      	str	r3, [r7, #0]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <xTaskIncrementTick+0x46>
 8006586:	4b41      	ldr	r3, [pc, #260]	@ (800668c <xTaskIncrementTick+0x150>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	4b40      	ldr	r3, [pc, #256]	@ (8006690 <xTaskIncrementTick+0x154>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3e      	ldr	r2, [pc, #248]	@ (800668c <xTaskIncrementTick+0x150>)
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	4a3e      	ldr	r2, [pc, #248]	@ (8006690 <xTaskIncrementTick+0x154>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b3e      	ldr	r3, [pc, #248]	@ (8006694 <xTaskIncrementTick+0x158>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3301      	adds	r3, #1
 80065a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006694 <xTaskIncrementTick+0x158>)
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	f000 fae2 	bl	8006b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006698 <xTaskIncrementTick+0x15c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d349      	bcc.n	8006646 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065b2:	4b36      	ldr	r3, [pc, #216]	@ (800668c <xTaskIncrementTick+0x150>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065bc:	4b36      	ldr	r3, [pc, #216]	@ (8006698 <xTaskIncrementTick+0x15c>)
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	601a      	str	r2, [r3, #0]
					break;
 80065c4:	e03f      	b.n	8006646 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c6:	4b31      	ldr	r3, [pc, #196]	@ (800668c <xTaskIncrementTick+0x150>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d203      	bcs.n	80065e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065de:	4a2e      	ldr	r2, [pc, #184]	@ (8006698 <xTaskIncrementTick+0x15c>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065e4:	e02f      	b.n	8006646 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fea4 	bl	8005338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	3318      	adds	r3, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fe9b 	bl	8005338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006606:	4b25      	ldr	r3, [pc, #148]	@ (800669c <xTaskIncrementTick+0x160>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d903      	bls.n	8006616 <xTaskIncrementTick+0xda>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	4a22      	ldr	r2, [pc, #136]	@ (800669c <xTaskIncrementTick+0x160>)
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4a1f      	ldr	r2, [pc, #124]	@ (80066a0 <xTaskIncrementTick+0x164>)
 8006624:	441a      	add	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fe fe26 	bl	800527e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006636:	4b1b      	ldr	r3, [pc, #108]	@ (80066a4 <xTaskIncrementTick+0x168>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663c:	429a      	cmp	r2, r3
 800663e:	d3b8      	bcc.n	80065b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006644:	e7b5      	b.n	80065b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006646:	4b17      	ldr	r3, [pc, #92]	@ (80066a4 <xTaskIncrementTick+0x168>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664c:	4914      	ldr	r1, [pc, #80]	@ (80066a0 <xTaskIncrementTick+0x164>)
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d901      	bls.n	8006662 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006662:	4b11      	ldr	r3, [pc, #68]	@ (80066a8 <xTaskIncrementTick+0x16c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800666a:	2301      	movs	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e004      	b.n	800667a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006670:	4b0e      	ldr	r3, [pc, #56]	@ (80066ac <xTaskIncrementTick+0x170>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a0d      	ldr	r2, [pc, #52]	@ (80066ac <xTaskIncrementTick+0x170>)
 8006678:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800667a:	697b      	ldr	r3, [r7, #20]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000f9c 	.word	0x20000f9c
 8006688:	20000f78 	.word	0x20000f78
 800668c:	20000f2c 	.word	0x20000f2c
 8006690:	20000f30 	.word	0x20000f30
 8006694:	20000f8c 	.word	0x20000f8c
 8006698:	20000f94 	.word	0x20000f94
 800669c:	20000f7c 	.word	0x20000f7c
 80066a0:	20000aa4 	.word	0x20000aa4
 80066a4:	20000aa0 	.word	0x20000aa0
 80066a8:	20000f88 	.word	0x20000f88
 80066ac:	20000f84 	.word	0x20000f84

080066b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006764 <vTaskSwitchContext+0xb4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066be:	4b2a      	ldr	r3, [pc, #168]	@ (8006768 <vTaskSwitchContext+0xb8>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066c4:	e047      	b.n	8006756 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80066c6:	4b28      	ldr	r3, [pc, #160]	@ (8006768 <vTaskSwitchContext+0xb8>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066cc:	4b27      	ldr	r3, [pc, #156]	@ (800676c <vTaskSwitchContext+0xbc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	e011      	b.n	80066f8 <vTaskSwitchContext+0x48>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	607b      	str	r3, [r7, #4]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <vTaskSwitchContext+0x3e>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	491d      	ldr	r1, [pc, #116]	@ (8006770 <vTaskSwitchContext+0xc0>)
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0e3      	beq.n	80066d4 <vTaskSwitchContext+0x24>
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a16      	ldr	r2, [pc, #88]	@ (8006770 <vTaskSwitchContext+0xc0>)
 8006718:	4413      	add	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	605a      	str	r2, [r3, #4]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	3308      	adds	r3, #8
 800672e:	429a      	cmp	r2, r3
 8006730:	d104      	bne.n	800673c <vTaskSwitchContext+0x8c>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	605a      	str	r2, [r3, #4]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4a0c      	ldr	r2, [pc, #48]	@ (8006774 <vTaskSwitchContext+0xc4>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	4a09      	ldr	r2, [pc, #36]	@ (800676c <vTaskSwitchContext+0xbc>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800674c:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <vTaskSwitchContext+0xc4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3354      	adds	r3, #84	@ 0x54
 8006752:	4a09      	ldr	r2, [pc, #36]	@ (8006778 <vTaskSwitchContext+0xc8>)
 8006754:	6013      	str	r3, [r2, #0]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000f9c 	.word	0x20000f9c
 8006768:	20000f88 	.word	0x20000f88
 800676c:	20000f7c 	.word	0x20000f7c
 8006770:	20000aa4 	.word	0x20000aa4
 8006774:	20000aa0 	.word	0x20000aa0
 8006778:	2000001c 	.word	0x2000001c

0800677c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	60fb      	str	r3, [r7, #12]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067a4:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <vTaskPlaceOnEventList+0x48>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3318      	adds	r3, #24
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fe fd8a 	bl	80052c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067b2:	2101      	movs	r1, #1
 80067b4:	6838      	ldr	r0, [r7, #0]
 80067b6:	f000 fa87 	bl	8006cc8 <prvAddCurrentTaskToDelayedList>
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000aa0 	.word	0x20000aa0

080067c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	617b      	str	r3, [r7, #20]
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	e7fd      	b.n	80067ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <vTaskPlaceOnEventListRestricted+0x54>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3318      	adds	r3, #24
 80067f8:	4619      	mov	r1, r3
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7fe fd3f 	bl	800527e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	68b8      	ldr	r0, [r7, #8]
 8006810:	f000 fa5a 	bl	8006cc8 <prvAddCurrentTaskToDelayedList>
	}
 8006814:	bf00      	nop
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000aa0 	.word	0x20000aa0

08006820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3318      	adds	r3, #24
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fd70 	bl	8005338 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006858:	4b1d      	ldr	r3, [pc, #116]	@ (80068d0 <xTaskRemoveFromEventList+0xb0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11d      	bne.n	800689c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fd67 	bl	8005338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686e:	4b19      	ldr	r3, [pc, #100]	@ (80068d4 <xTaskRemoveFromEventList+0xb4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d903      	bls.n	800687e <xTaskRemoveFromEventList+0x5e>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <xTaskRemoveFromEventList+0xb4>)
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4a13      	ldr	r2, [pc, #76]	@ (80068d8 <xTaskRemoveFromEventList+0xb8>)
 800688c:	441a      	add	r2, r3
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe fcf2 	bl	800527e <vListInsertEnd>
 800689a:	e005      	b.n	80068a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	3318      	adds	r3, #24
 80068a0:	4619      	mov	r1, r3
 80068a2:	480e      	ldr	r0, [pc, #56]	@ (80068dc <xTaskRemoveFromEventList+0xbc>)
 80068a4:	f7fe fceb 	bl	800527e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ac:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <xTaskRemoveFromEventList+0xc0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d905      	bls.n	80068c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068ba:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <xTaskRemoveFromEventList+0xc4>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e001      	b.n	80068c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068c6:	697b      	ldr	r3, [r7, #20]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000f9c 	.word	0x20000f9c
 80068d4:	20000f7c 	.word	0x20000f7c
 80068d8:	20000aa4 	.word	0x20000aa4
 80068dc:	20000f34 	.word	0x20000f34
 80068e0:	20000aa0 	.word	0x20000aa0
 80068e4:	20000f88 	.word	0x20000f88

080068e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <vTaskInternalSetTimeOutState+0x24>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <vTaskInternalSetTimeOutState+0x28>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	605a      	str	r2, [r3, #4]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000f8c 	.word	0x20000f8c
 8006910:	20000f78 	.word	0x20000f78

08006914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	613b      	str	r3, [r7, #16]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60fb      	str	r3, [r7, #12]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800695a:	f000 fe95 	bl	8007688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800695e:	4b1d      	ldr	r3, [pc, #116]	@ (80069d4 <xTaskCheckForTimeOut+0xc0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d102      	bne.n	800697e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	e023      	b.n	80069c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <xTaskCheckForTimeOut+0xc4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d007      	beq.n	800699a <xTaskCheckForTimeOut+0x86>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	429a      	cmp	r2, r3
 8006992:	d302      	bcc.n	800699a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e015      	b.n	80069c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d20b      	bcs.n	80069bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff99 	bl	80068e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	e004      	b.n	80069c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069c2:	2301      	movs	r3, #1
 80069c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069c6:	f000 fe91 	bl	80076ec <vPortExitCritical>

	return xReturn;
 80069ca:	69fb      	ldr	r3, [r7, #28]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000f78 	.word	0x20000f78
 80069d8:	20000f8c 	.word	0x20000f8c

080069dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069e0:	4b03      	ldr	r3, [pc, #12]	@ (80069f0 <vTaskMissedYield+0x14>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	20000f88 	.word	0x20000f88

080069f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069fc:	f000 f852 	bl	8006aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a00:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <prvIdleTask+0x28>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d9f9      	bls.n	80069fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <prvIdleTask+0x2c>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a18:	e7f0      	b.n	80069fc <prvIdleTask+0x8>
 8006a1a:	bf00      	nop
 8006a1c:	20000aa4 	.word	0x20000aa4
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e00c      	b.n	8006a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4a12      	ldr	r2, [pc, #72]	@ (8006a84 <prvInitialiseTaskLists+0x60>)
 8006a3c:	4413      	add	r3, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fbf0 	bl	8005224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3301      	adds	r3, #1
 8006a48:	607b      	str	r3, [r7, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b37      	cmp	r3, #55	@ 0x37
 8006a4e:	d9ef      	bls.n	8006a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a50:	480d      	ldr	r0, [pc, #52]	@ (8006a88 <prvInitialiseTaskLists+0x64>)
 8006a52:	f7fe fbe7 	bl	8005224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a56:	480d      	ldr	r0, [pc, #52]	@ (8006a8c <prvInitialiseTaskLists+0x68>)
 8006a58:	f7fe fbe4 	bl	8005224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a5c:	480c      	ldr	r0, [pc, #48]	@ (8006a90 <prvInitialiseTaskLists+0x6c>)
 8006a5e:	f7fe fbe1 	bl	8005224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a62:	480c      	ldr	r0, [pc, #48]	@ (8006a94 <prvInitialiseTaskLists+0x70>)
 8006a64:	f7fe fbde 	bl	8005224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a68:	480b      	ldr	r0, [pc, #44]	@ (8006a98 <prvInitialiseTaskLists+0x74>)
 8006a6a:	f7fe fbdb 	bl	8005224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <prvInitialiseTaskLists+0x78>)
 8006a70:	4a05      	ldr	r2, [pc, #20]	@ (8006a88 <prvInitialiseTaskLists+0x64>)
 8006a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a74:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <prvInitialiseTaskLists+0x7c>)
 8006a76:	4a05      	ldr	r2, [pc, #20]	@ (8006a8c <prvInitialiseTaskLists+0x68>)
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000aa4 	.word	0x20000aa4
 8006a88:	20000f04 	.word	0x20000f04
 8006a8c:	20000f18 	.word	0x20000f18
 8006a90:	20000f34 	.word	0x20000f34
 8006a94:	20000f48 	.word	0x20000f48
 8006a98:	20000f60 	.word	0x20000f60
 8006a9c:	20000f2c 	.word	0x20000f2c
 8006aa0:	20000f30 	.word	0x20000f30

08006aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aaa:	e019      	b.n	8006ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aac:	f000 fdec 	bl	8007688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab0:	4b10      	ldr	r3, [pc, #64]	@ (8006af4 <prvCheckTasksWaitingTermination+0x50>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fc3b 	bl	8005338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <prvCheckTasksWaitingTermination+0x54>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8006af8 <prvCheckTasksWaitingTermination+0x54>)
 8006aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006acc:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <prvCheckTasksWaitingTermination+0x58>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <prvCheckTasksWaitingTermination+0x58>)
 8006ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ad6:	f000 fe09 	bl	80076ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f810 	bl	8006b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ae0:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <prvCheckTasksWaitingTermination+0x58>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e1      	bne.n	8006aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000f48 	.word	0x20000f48
 8006af8:	20000f74 	.word	0x20000f74
 8006afc:	20000f5c 	.word	0x20000f5c

08006b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3354      	adds	r3, #84	@ 0x54
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fb11 	bl	8008134 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 ffa1 	bl	8007a68 <vPortFree>
				vPortFree( pxTCB );
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 ff9e 	bl	8007a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b2c:	e019      	b.n	8006b62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d103      	bne.n	8006b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 ff95 	bl	8007a68 <vPortFree>
	}
 8006b3e:	e010      	b.n	8006b62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d00b      	beq.n	8006b62 <prvDeleteTCB+0x62>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60fb      	str	r3, [r7, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <prvDeleteTCB+0x5e>
	}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <prvResetNextTaskUnblockTime+0x38>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8006b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b84:	e008      	b.n	8006b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b86:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <prvResetNextTaskUnblockTime+0x38>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	4a04      	ldr	r2, [pc, #16]	@ (8006ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	20000f2c 	.word	0x20000f2c
 8006ba8:	20000f94 	.word	0x20000f94

08006bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <xTaskGetSchedulerState+0x34>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	607b      	str	r3, [r7, #4]
 8006bbe:	e008      	b.n	8006bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc0:	4b08      	ldr	r3, [pc, #32]	@ (8006be4 <xTaskGetSchedulerState+0x38>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	e001      	b.n	8006bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bd2:	687b      	ldr	r3, [r7, #4]
	}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000f80 	.word	0x20000f80
 8006be4:	20000f9c 	.word	0x20000f9c

08006be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d058      	beq.n	8006cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8006cbc <xTaskPriorityDisinherit+0xd4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d00b      	beq.n	8006c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	60fb      	str	r3, [r7, #12]
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	e7fd      	b.n	8006c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60bb      	str	r3, [r7, #8]
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c44:	1e5a      	subs	r2, r3, #1
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d02c      	beq.n	8006cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d128      	bne.n	8006cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	3304      	adds	r3, #4
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fb68 	bl	8005338 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c80:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <xTaskPriorityDisinherit+0xd8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d903      	bls.n	8006c90 <xTaskPriorityDisinherit+0xa8>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc0 <xTaskPriorityDisinherit+0xd8>)
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4a09      	ldr	r2, [pc, #36]	@ (8006cc4 <xTaskPriorityDisinherit+0xdc>)
 8006c9e:	441a      	add	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7fe fae9 	bl	800527e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb0:	697b      	ldr	r3, [r7, #20]
	}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000aa0 	.word	0x20000aa0
 8006cc0:	20000f7c 	.word	0x20000f7c
 8006cc4:	20000aa4 	.word	0x20000aa4

08006cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cd2:	4b21      	ldr	r3, [pc, #132]	@ (8006d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd8:	4b20      	ldr	r3, [pc, #128]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe fb2a 	bl	8005338 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d10a      	bne.n	8006d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4819      	ldr	r0, [pc, #100]	@ (8006d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cfc:	f7fe fabf 	bl	800527e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d00:	e026      	b.n	8006d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4413      	add	r3, r2
 8006d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d0a:	4b14      	ldr	r3, [pc, #80]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d209      	bcs.n	8006d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7fe facd 	bl	80052c6 <vListInsert>
}
 8006d2c:	e010      	b.n	8006d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fac3 	bl	80052c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d40:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d202      	bcs.n	8006d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d4a:	4a08      	ldr	r2, [pc, #32]	@ (8006d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6013      	str	r3, [r2, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000f78 	.word	0x20000f78
 8006d5c:	20000aa0 	.word	0x20000aa0
 8006d60:	20000f60 	.word	0x20000f60
 8006d64:	20000f30 	.word	0x20000f30
 8006d68:	20000f2c 	.word	0x20000f2c
 8006d6c:	20000f94 	.word	0x20000f94

08006d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	@ 0x28
 8006d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d7a:	f000 fb13 	bl	80073a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006df4 <xTimerCreateTimerTask+0x84>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d021      	beq.n	8006dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d8e:	1d3a      	adds	r2, r7, #4
 8006d90:	f107 0108 	add.w	r1, r7, #8
 8006d94:	f107 030c 	add.w	r3, r7, #12
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fa29 	bl	80051f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	9202      	str	r2, [sp, #8]
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	2302      	movs	r3, #2
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	2300      	movs	r3, #0
 8006dae:	460a      	mov	r2, r1
 8006db0:	4911      	ldr	r1, [pc, #68]	@ (8006df8 <xTimerCreateTimerTask+0x88>)
 8006db2:	4812      	ldr	r0, [pc, #72]	@ (8006dfc <xTimerCreateTimerTask+0x8c>)
 8006db4:	f7ff f8a2 	bl	8005efc <xTaskCreateStatic>
 8006db8:	4603      	mov	r3, r0
 8006dba:	4a11      	ldr	r2, [pc, #68]	@ (8006e00 <xTimerCreateTimerTask+0x90>)
 8006dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dbe:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <xTimerCreateTimerTask+0x90>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006de8:	697b      	ldr	r3, [r7, #20]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20000fd0 	.word	0x20000fd0
 8006df8:	08008e7c 	.word	0x08008e7c
 8006dfc:	08006f3d 	.word	0x08006f3d
 8006e00:	20000fd4 	.word	0x20000fd4

08006e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	@ 0x28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xTimerGenericCommand+0x30>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	623b      	str	r3, [r7, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e34:	4b19      	ldr	r3, [pc, #100]	@ (8006e9c <xTimerGenericCommand+0x98>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02a      	beq.n	8006e92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	dc18      	bgt.n	8006e80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e4e:	f7ff fead 	bl	8006bac <xTaskGetSchedulerState>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d109      	bne.n	8006e6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e58:	4b10      	ldr	r3, [pc, #64]	@ (8006e9c <xTimerGenericCommand+0x98>)
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	f107 0110 	add.w	r1, r7, #16
 8006e60:	2300      	movs	r3, #0
 8006e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e64:	f7fe fbd8 	bl	8005618 <xQueueGenericSend>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e6a:	e012      	b.n	8006e92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <xTimerGenericCommand+0x98>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	f107 0110 	add.w	r1, r7, #16
 8006e74:	2300      	movs	r3, #0
 8006e76:	2200      	movs	r2, #0
 8006e78:	f7fe fbce 	bl	8005618 <xQueueGenericSend>
 8006e7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e7e:	e008      	b.n	8006e92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <xTimerGenericCommand+0x98>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	f107 0110 	add.w	r1, r7, #16
 8006e88:	2300      	movs	r3, #0
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	f7fe fcc6 	bl	800581c <xQueueGenericSendFromISR>
 8006e90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	@ 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000fd0 	.word	0x20000fd0

08006ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eaa:	4b23      	ldr	r3, [pc, #140]	@ (8006f38 <prvProcessExpiredTimer+0x98>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fa3d 	bl	8005338 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d023      	beq.n	8006f14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	18d1      	adds	r1, r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	6978      	ldr	r0, [r7, #20]
 8006eda:	f000 f8d5 	bl	8007088 <prvInsertTimerInActiveList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d020      	beq.n	8006f26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	2100      	movs	r1, #0
 8006eee:	6978      	ldr	r0, [r7, #20]
 8006ef0:	f7ff ff88 	bl	8006e04 <xTimerGenericCommand>
 8006ef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d114      	bne.n	8006f26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60fb      	str	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	4798      	blx	r3
}
 8006f2e:	bf00      	nop
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000fc8 	.word	0x20000fc8

08006f3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f859 	bl	8007000 <prvGetNextExpireTime>
 8006f4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4619      	mov	r1, r3
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f805 	bl	8006f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f5a:	f000 f8d7 	bl	800710c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f5e:	bf00      	nop
 8006f60:	e7f0      	b.n	8006f44 <prvTimerTask+0x8>
	...

08006f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f6e:	f7ff fa29 	bl	80063c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f866 	bl	8007048 <prvSampleTimeNow>
 8006f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d130      	bne.n	8006fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <prvProcessTimerOrBlockTask+0x3c>
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d806      	bhi.n	8006fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f92:	f7ff fa25 	bl	80063e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ff81 	bl	8006ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f9e:	e024      	b.n	8006fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fa6:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <prvProcessTimerOrBlockTask+0x90>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <prvProcessTimerOrBlockTask+0x50>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <prvProcessTimerOrBlockTask+0x52>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff8 <prvProcessTimerOrBlockTask+0x94>)
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f7fe ff65 	bl	8005e94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fca:	f7ff fa09 	bl	80063e0 <xTaskResumeAll>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <prvProcessTimerOrBlockTask+0x98>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
}
 8006fe4:	e001      	b.n	8006fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fe6:	f7ff f9fb 	bl	80063e0 <xTaskResumeAll>
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000fcc 	.word	0x20000fcc
 8006ff8:	20000fd0 	.word	0x20000fd0
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <prvGetNextExpireTime+0x44>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <prvGetNextExpireTime+0x16>
 8007012:	2201      	movs	r2, #1
 8007014:	e000      	b.n	8007018 <prvGetNextExpireTime+0x18>
 8007016:	2200      	movs	r2, #0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007024:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <prvGetNextExpireTime+0x44>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e001      	b.n	8007034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000fc8 	.word	0x20000fc8

08007048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007050:	f7ff fa64 	bl	800651c <xTaskGetTickCount>
 8007054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007056:	4b0b      	ldr	r3, [pc, #44]	@ (8007084 <prvSampleTimeNow+0x3c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d205      	bcs.n	800706c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007060:	f000 f93a 	bl	80072d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e002      	b.n	8007072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007072:	4a04      	ldr	r2, [pc, #16]	@ (8007084 <prvSampleTimeNow+0x3c>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000fd8 	.word	0x20000fd8

08007088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d812      	bhi.n	80070d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e01b      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <prvInsertTimerInActiveList+0x7c>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fe f8fa 	bl	80052c6 <vListInsert>
 80070d2:	e012      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d206      	bcs.n	80070ea <prvInsertTimerInActiveList+0x62>
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e007      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <prvInsertTimerInActiveList+0x80>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fe f8e6 	bl	80052c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000fcc 	.word	0x20000fcc
 8007108:	20000fc8 	.word	0x20000fc8

0800710c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08e      	sub	sp, #56	@ 0x38
 8007110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007112:	e0ce      	b.n	80072b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da19      	bge.n	800714e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800711a:	1d3b      	adds	r3, r7, #4
 800711c:	3304      	adds	r3, #4
 800711e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	61fb      	str	r3, [r7, #28]
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	e7fd      	b.n	800713a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007144:	6850      	ldr	r0, [r2, #4]
 8007146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007148:	6892      	ldr	r2, [r2, #8]
 800714a:	4611      	mov	r1, r2
 800714c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f2c0 80ae 	blt.w	80072b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe f8e6 	bl	8005338 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800716c:	463b      	mov	r3, r7
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff ff6a 	bl	8007048 <prvSampleTimeNow>
 8007174:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b09      	cmp	r3, #9
 800717a:	f200 8097 	bhi.w	80072ac <prvProcessReceivedCommands+0x1a0>
 800717e:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <prvProcessReceivedCommands+0x78>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071ad 	.word	0x080071ad
 8007190:	08007223 	.word	0x08007223
 8007194:	08007237 	.word	0x08007237
 8007198:	08007283 	.word	0x08007283
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071ad 	.word	0x080071ad
 80071a4:	08007223 	.word	0x08007223
 80071a8:	08007237 	.word	0x08007237
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	18d1      	adds	r1, r2, r3
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071cc:	f7ff ff5c 	bl	8007088 <prvInsertTimerInActiveList>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d06c      	beq.n	80072b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d061      	beq.n	80072b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	441a      	add	r2, r3
 80071f4:	2300      	movs	r3, #0
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2300      	movs	r3, #0
 80071fa:	2100      	movs	r1, #0
 80071fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071fe:	f7ff fe01 	bl	8006e04 <xTimerGenericCommand>
 8007202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d152      	bne.n	80072b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	61bb      	str	r3, [r7, #24]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	b2da      	uxtb	r2, r3
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007234:	e03d      	b.n	80072b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007244:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800724e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	18d1      	adds	r1, r2, r3
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800727a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800727c:	f7ff ff04 	bl	8007088 <prvInsertTimerInActiveList>
					break;
 8007280:	e017      	b.n	80072b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007292:	f000 fbe9 	bl	8007a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007296:	e00c      	b.n	80072b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800729e:	f023 0301 	bic.w	r3, r3, #1
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80072aa:	e002      	b.n	80072b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80072ac:	bf00      	nop
 80072ae:	e000      	b.n	80072b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80072b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072b2:	4b08      	ldr	r3, [pc, #32]	@ (80072d4 <prvProcessReceivedCommands+0x1c8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	1d39      	adds	r1, r7, #4
 80072b8:	2200      	movs	r2, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fb4c 	bl	8005958 <xQueueReceive>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f47f af26 	bne.w	8007114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	3730      	adds	r7, #48	@ 0x30
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000fd0 	.word	0x20000fd0

080072d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072de:	e049      	b.n	8007374 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072e0:	4b2e      	ldr	r3, [pc, #184]	@ (800739c <prvSwitchTimerLists+0xc4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ea:	4b2c      	ldr	r3, [pc, #176]	@ (800739c <prvSwitchTimerLists+0xc4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3304      	adds	r3, #4
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe f81d 	bl	8005338 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d02f      	beq.n	8007374 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4413      	add	r3, r2
 800731c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90e      	bls.n	8007344 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007332:	4b1a      	ldr	r3, [pc, #104]	@ (800739c <prvSwitchTimerLists+0xc4>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3304      	adds	r3, #4
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f7fd ffc2 	bl	80052c6 <vListInsert>
 8007342:	e017      	b.n	8007374 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007344:	2300      	movs	r3, #0
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	2300      	movs	r3, #0
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	2100      	movs	r1, #0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fd58 	bl	8006e04 <xTimerGenericCommand>
 8007354:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	603b      	str	r3, [r7, #0]
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	e7fd      	b.n	8007370 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007374:	4b09      	ldr	r3, [pc, #36]	@ (800739c <prvSwitchTimerLists+0xc4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1b0      	bne.n	80072e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800737e:	4b07      	ldr	r3, [pc, #28]	@ (800739c <prvSwitchTimerLists+0xc4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007384:	4b06      	ldr	r3, [pc, #24]	@ (80073a0 <prvSwitchTimerLists+0xc8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a04      	ldr	r2, [pc, #16]	@ (800739c <prvSwitchTimerLists+0xc4>)
 800738a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800738c:	4a04      	ldr	r2, [pc, #16]	@ (80073a0 <prvSwitchTimerLists+0xc8>)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	6013      	str	r3, [r2, #0]
}
 8007392:	bf00      	nop
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000fc8 	.word	0x20000fc8
 80073a0:	20000fcc 	.word	0x20000fcc

080073a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073aa:	f000 f96d 	bl	8007688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073ae:	4b15      	ldr	r3, [pc, #84]	@ (8007404 <prvCheckForValidListAndQueue+0x60>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d120      	bne.n	80073f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073b6:	4814      	ldr	r0, [pc, #80]	@ (8007408 <prvCheckForValidListAndQueue+0x64>)
 80073b8:	f7fd ff34 	bl	8005224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073bc:	4813      	ldr	r0, [pc, #76]	@ (800740c <prvCheckForValidListAndQueue+0x68>)
 80073be:	f7fd ff31 	bl	8005224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073c2:	4b13      	ldr	r3, [pc, #76]	@ (8007410 <prvCheckForValidListAndQueue+0x6c>)
 80073c4:	4a10      	ldr	r2, [pc, #64]	@ (8007408 <prvCheckForValidListAndQueue+0x64>)
 80073c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073c8:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <prvCheckForValidListAndQueue+0x70>)
 80073ca:	4a10      	ldr	r2, [pc, #64]	@ (800740c <prvCheckForValidListAndQueue+0x68>)
 80073cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073ce:	2300      	movs	r3, #0
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4b11      	ldr	r3, [pc, #68]	@ (8007418 <prvCheckForValidListAndQueue+0x74>)
 80073d4:	4a11      	ldr	r2, [pc, #68]	@ (800741c <prvCheckForValidListAndQueue+0x78>)
 80073d6:	2110      	movs	r1, #16
 80073d8:	200a      	movs	r0, #10
 80073da:	f7fe f841 	bl	8005460 <xQueueGenericCreateStatic>
 80073de:	4603      	mov	r3, r0
 80073e0:	4a08      	ldr	r2, [pc, #32]	@ (8007404 <prvCheckForValidListAndQueue+0x60>)
 80073e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073e4:	4b07      	ldr	r3, [pc, #28]	@ (8007404 <prvCheckForValidListAndQueue+0x60>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073ec:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <prvCheckForValidListAndQueue+0x60>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	490b      	ldr	r1, [pc, #44]	@ (8007420 <prvCheckForValidListAndQueue+0x7c>)
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fd24 	bl	8005e40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073f8:	f000 f978 	bl	80076ec <vPortExitCritical>
}
 80073fc:	bf00      	nop
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000fd0 	.word	0x20000fd0
 8007408:	20000fa0 	.word	0x20000fa0
 800740c:	20000fb4 	.word	0x20000fb4
 8007410:	20000fc8 	.word	0x20000fc8
 8007414:	20000fcc 	.word	0x20000fcc
 8007418:	2000107c 	.word	0x2000107c
 800741c:	20000fdc 	.word	0x20000fdc
 8007420:	08008e84 	.word	0x08008e84

08007424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3b04      	subs	r3, #4
 8007434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800743c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b04      	subs	r3, #4
 8007442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0201 	bic.w	r2, r3, #1
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b04      	subs	r3, #4
 8007452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007454:	4a0c      	ldr	r2, [pc, #48]	@ (8007488 <pxPortInitialiseStack+0x64>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b14      	subs	r3, #20
 800745e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3b04      	subs	r3, #4
 800746a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f06f 0202 	mvn.w	r2, #2
 8007472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3b20      	subs	r3, #32
 8007478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	0800748d 	.word	0x0800748d

0800748c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <prvTaskExitError+0x58>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d00b      	beq.n	80074b8 <prvTaskExitError+0x2c>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	60fb      	str	r3, [r7, #12]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <prvTaskExitError+0x28>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60bb      	str	r3, [r7, #8]
}
 80074ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074cc:	bf00      	nop
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0fc      	beq.n	80074ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	2000000c 	.word	0x2000000c
	...

080074f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074f0:	4b07      	ldr	r3, [pc, #28]	@ (8007510 <pxCurrentTCBConst2>)
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	6808      	ldr	r0, [r1, #0]
 80074f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	f380 8809 	msr	PSP, r0
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8811 	msr	BASEPRI, r0
 800750a:	4770      	bx	lr
 800750c:	f3af 8000 	nop.w

08007510 <pxCurrentTCBConst2>:
 8007510:	20000aa0 	.word	0x20000aa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop

08007518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007518:	4808      	ldr	r0, [pc, #32]	@ (800753c <prvPortStartFirstTask+0x24>)
 800751a:	6800      	ldr	r0, [r0, #0]
 800751c:	6800      	ldr	r0, [r0, #0]
 800751e:	f380 8808 	msr	MSP, r0
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8814 	msr	CONTROL, r0
 800752a:	b662      	cpsie	i
 800752c:	b661      	cpsie	f
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	df00      	svc	0
 8007538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800753a:	bf00      	nop
 800753c:	e000ed08 	.word	0xe000ed08

08007540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007546:	4b47      	ldr	r3, [pc, #284]	@ (8007664 <xPortStartScheduler+0x124>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a47      	ldr	r2, [pc, #284]	@ (8007668 <xPortStartScheduler+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10b      	bne.n	8007568 <xPortStartScheduler+0x28>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007568:	4b3e      	ldr	r3, [pc, #248]	@ (8007664 <xPortStartScheduler+0x124>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a3f      	ldr	r2, [pc, #252]	@ (800766c <xPortStartScheduler+0x12c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d10b      	bne.n	800758a <xPortStartScheduler+0x4a>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	613b      	str	r3, [r7, #16]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800758a:	4b39      	ldr	r3, [pc, #228]	@ (8007670 <xPortStartScheduler+0x130>)
 800758c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	22ff      	movs	r2, #255	@ 0xff
 800759a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	4b31      	ldr	r3, [pc, #196]	@ (8007674 <xPortStartScheduler+0x134>)
 80075b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075b2:	4b31      	ldr	r3, [pc, #196]	@ (8007678 <xPortStartScheduler+0x138>)
 80075b4:	2207      	movs	r2, #7
 80075b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075b8:	e009      	b.n	80075ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80075ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007678 <xPortStartScheduler+0x138>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3b01      	subs	r3, #1
 80075c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007678 <xPortStartScheduler+0x138>)
 80075c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d6:	2b80      	cmp	r3, #128	@ 0x80
 80075d8:	d0ef      	beq.n	80075ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075da:	4b27      	ldr	r3, [pc, #156]	@ (8007678 <xPortStartScheduler+0x138>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1c3 0307 	rsb	r3, r3, #7
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d00b      	beq.n	80075fe <xPortStartScheduler+0xbe>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60bb      	str	r3, [r7, #8]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007678 <xPortStartScheduler+0x138>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	4a1c      	ldr	r2, [pc, #112]	@ (8007678 <xPortStartScheduler+0x138>)
 8007606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007608:	4b1b      	ldr	r3, [pc, #108]	@ (8007678 <xPortStartScheduler+0x138>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007610:	4a19      	ldr	r2, [pc, #100]	@ (8007678 <xPortStartScheduler+0x138>)
 8007612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	b2da      	uxtb	r2, r3
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800761c:	4b17      	ldr	r3, [pc, #92]	@ (800767c <xPortStartScheduler+0x13c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a16      	ldr	r2, [pc, #88]	@ (800767c <xPortStartScheduler+0x13c>)
 8007622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007628:	4b14      	ldr	r3, [pc, #80]	@ (800767c <xPortStartScheduler+0x13c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a13      	ldr	r2, [pc, #76]	@ (800767c <xPortStartScheduler+0x13c>)
 800762e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007634:	f000 f8da 	bl	80077ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007638:	4b11      	ldr	r3, [pc, #68]	@ (8007680 <xPortStartScheduler+0x140>)
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800763e:	f000 f8f9 	bl	8007834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007642:	4b10      	ldr	r3, [pc, #64]	@ (8007684 <xPortStartScheduler+0x144>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a0f      	ldr	r2, [pc, #60]	@ (8007684 <xPortStartScheduler+0x144>)
 8007648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800764c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800764e:	f7ff ff63 	bl	8007518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007652:	f7ff f82d 	bl	80066b0 <vTaskSwitchContext>
	prvTaskExitError();
 8007656:	f7ff ff19 	bl	800748c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed00 	.word	0xe000ed00
 8007668:	410fc271 	.word	0x410fc271
 800766c:	410fc270 	.word	0x410fc270
 8007670:	e000e400 	.word	0xe000e400
 8007674:	200010cc 	.word	0x200010cc
 8007678:	200010d0 	.word	0x200010d0
 800767c:	e000ed20 	.word	0xe000ed20
 8007680:	2000000c 	.word	0x2000000c
 8007684:	e000ef34 	.word	0xe000ef34

08007688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076a2:	4b10      	ldr	r3, [pc, #64]	@ (80076e4 <vPortEnterCritical+0x5c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4a0e      	ldr	r2, [pc, #56]	@ (80076e4 <vPortEnterCritical+0x5c>)
 80076aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076ac:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <vPortEnterCritical+0x5c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d110      	bne.n	80076d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076b4:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <vPortEnterCritical+0x60>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	603b      	str	r3, [r7, #0]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <vPortEnterCritical+0x4a>
	}
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2000000c 	.word	0x2000000c
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076f2:	4b12      	ldr	r3, [pc, #72]	@ (800773c <vPortExitCritical+0x50>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10b      	bne.n	8007712 <vPortExitCritical+0x26>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	607b      	str	r3, [r7, #4]
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	e7fd      	b.n	800770e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007712:	4b0a      	ldr	r3, [pc, #40]	@ (800773c <vPortExitCritical+0x50>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3b01      	subs	r3, #1
 8007718:	4a08      	ldr	r2, [pc, #32]	@ (800773c <vPortExitCritical+0x50>)
 800771a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800771c:	4b07      	ldr	r3, [pc, #28]	@ (800773c <vPortExitCritical+0x50>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <vPortExitCritical+0x44>
 8007724:	2300      	movs	r3, #0
 8007726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f383 8811 	msr	BASEPRI, r3
}
 800772e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	2000000c 	.word	0x2000000c

08007740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007740:	f3ef 8009 	mrs	r0, PSP
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <pxCurrentTCBConst>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	f01e 0f10 	tst.w	lr, #16
 8007750:	bf08      	it	eq
 8007752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	6010      	str	r0, [r2, #0]
 800775c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007764:	f380 8811 	msr	BASEPRI, r0
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f7fe ff9e 	bl	80066b0 <vTaskSwitchContext>
 8007774:	f04f 0000 	mov.w	r0, #0
 8007778:	f380 8811 	msr	BASEPRI, r0
 800777c:	bc09      	pop	{r0, r3}
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	6808      	ldr	r0, [r1, #0]
 8007782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007786:	f01e 0f10 	tst.w	lr, #16
 800778a:	bf08      	it	eq
 800778c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007790:	f380 8809 	msr	PSP, r0
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst>:
 80077a0:	20000aa0 	.word	0x20000aa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077c2:	f7fe febb 	bl	800653c <xTaskIncrementTick>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077cc:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <xPortSysTickHandler+0x40>)
 80077ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	2300      	movs	r3, #0
 80077d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f383 8811 	msr	BASEPRI, r3
}
 80077de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <vPortSetupTimerInterrupt+0x34>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <vPortSetupTimerInterrupt+0x38>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <vPortSetupTimerInterrupt+0x3c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a0a      	ldr	r2, [pc, #40]	@ (800782c <vPortSetupTimerInterrupt+0x40>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	099b      	lsrs	r3, r3, #6
 8007808:	4a09      	ldr	r2, [pc, #36]	@ (8007830 <vPortSetupTimerInterrupt+0x44>)
 800780a:	3b01      	subs	r3, #1
 800780c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800780e:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <vPortSetupTimerInterrupt+0x34>)
 8007810:	2207      	movs	r2, #7
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	e000e010 	.word	0xe000e010
 8007824:	e000e018 	.word	0xe000e018
 8007828:	20000000 	.word	0x20000000
 800782c:	10624dd3 	.word	0x10624dd3
 8007830:	e000e014 	.word	0xe000e014

08007834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007844 <vPortEnableVFP+0x10>
 8007838:	6801      	ldr	r1, [r0, #0]
 800783a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800783e:	6001      	str	r1, [r0, #0]
 8007840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007842:	bf00      	nop
 8007844:	e000ed88 	.word	0xe000ed88

08007848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800784e:	f3ef 8305 	mrs	r3, IPSR
 8007852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b0f      	cmp	r3, #15
 8007858:	d915      	bls.n	8007886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800785a:	4a18      	ldr	r2, [pc, #96]	@ (80078bc <vPortValidateInterruptPriority+0x74>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007864:	4b16      	ldr	r3, [pc, #88]	@ (80078c0 <vPortValidateInterruptPriority+0x78>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	7afa      	ldrb	r2, [r7, #11]
 800786a:	429a      	cmp	r2, r3
 800786c:	d20b      	bcs.n	8007886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	e7fd      	b.n	8007882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007886:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <vPortValidateInterruptPriority+0x7c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800788e:	4b0e      	ldr	r3, [pc, #56]	@ (80078c8 <vPortValidateInterruptPriority+0x80>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d90b      	bls.n	80078ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	603b      	str	r3, [r7, #0]
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	e7fd      	b.n	80078aa <vPortValidateInterruptPriority+0x62>
	}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	e000e3f0 	.word	0xe000e3f0
 80078c0:	200010cc 	.word	0x200010cc
 80078c4:	e000ed0c 	.word	0xe000ed0c
 80078c8:	200010d0 	.word	0x200010d0

080078cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08a      	sub	sp, #40	@ 0x28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078d8:	f7fe fd74 	bl	80063c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007a50 <pvPortMalloc+0x184>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078e4:	f000 f924 	bl	8007b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a54 <pvPortMalloc+0x188>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f040 8095 	bne.w	8007a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01e      	beq.n	800793a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078fc:	2208      	movs	r2, #8
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d015      	beq.n	800793a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	3308      	adds	r3, #8
 8007916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <pvPortMalloc+0x6e>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	617b      	str	r3, [r7, #20]
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d06f      	beq.n	8007a20 <pvPortMalloc+0x154>
 8007940:	4b45      	ldr	r3, [pc, #276]	@ (8007a58 <pvPortMalloc+0x18c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	429a      	cmp	r2, r3
 8007948:	d86a      	bhi.n	8007a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800794a:	4b44      	ldr	r3, [pc, #272]	@ (8007a5c <pvPortMalloc+0x190>)
 800794c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800794e:	4b43      	ldr	r3, [pc, #268]	@ (8007a5c <pvPortMalloc+0x190>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007954:	e004      	b.n	8007960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	429a      	cmp	r2, r3
 8007968:	d903      	bls.n	8007972 <pvPortMalloc+0xa6>
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f1      	bne.n	8007956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007972:	4b37      	ldr	r3, [pc, #220]	@ (8007a50 <pvPortMalloc+0x184>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007978:	429a      	cmp	r2, r3
 800797a:	d051      	beq.n	8007a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2208      	movs	r2, #8
 8007982:	4413      	add	r3, r2
 8007984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	1ad2      	subs	r2, r2, r3
 8007996:	2308      	movs	r3, #8
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	429a      	cmp	r2, r3
 800799c:	d920      	bls.n	80079e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800799e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <pvPortMalloc+0xfc>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	e7fd      	b.n	80079c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079da:	69b8      	ldr	r0, [r7, #24]
 80079dc:	f000 f90a 	bl	8007bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a58 <pvPortMalloc+0x18c>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007a58 <pvPortMalloc+0x18c>)
 80079ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <pvPortMalloc+0x18c>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a60 <pvPortMalloc+0x194>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d203      	bcs.n	8007a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079fa:	4b17      	ldr	r3, [pc, #92]	@ (8007a58 <pvPortMalloc+0x18c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a18      	ldr	r2, [pc, #96]	@ (8007a60 <pvPortMalloc+0x194>)
 8007a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b13      	ldr	r3, [pc, #76]	@ (8007a54 <pvPortMalloc+0x188>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a16:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <pvPortMalloc+0x198>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	4a11      	ldr	r2, [pc, #68]	@ (8007a64 <pvPortMalloc+0x198>)
 8007a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a20:	f7fe fcde 	bl	80063e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <pvPortMalloc+0x17a>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	60fb      	str	r3, [r7, #12]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <pvPortMalloc+0x176>
	return pvReturn;
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3728      	adds	r7, #40	@ 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20005efc 	.word	0x20005efc
 8007a54:	20005f10 	.word	0x20005f10
 8007a58:	20005f00 	.word	0x20005f00
 8007a5c:	20005ef4 	.word	0x20005ef4
 8007a60:	20005f04 	.word	0x20005f04
 8007a64:	20005f08 	.word	0x20005f08

08007a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04f      	beq.n	8007b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	425b      	negs	r3, r3
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4413      	add	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b25      	ldr	r3, [pc, #148]	@ (8007b24 <vPortFree+0xbc>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <vPortFree+0x46>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60fb      	str	r3, [r7, #12]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <vPortFree+0x66>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60bb      	str	r3, [r7, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	4b14      	ldr	r3, [pc, #80]	@ (8007b24 <vPortFree+0xbc>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01e      	beq.n	8007b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d11a      	bne.n	8007b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b24 <vPortFree+0xbc>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	43db      	mvns	r3, r3
 8007aee:	401a      	ands	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007af4:	f7fe fc66 	bl	80063c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	4b0a      	ldr	r3, [pc, #40]	@ (8007b28 <vPortFree+0xc0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4413      	add	r3, r2
 8007b02:	4a09      	ldr	r2, [pc, #36]	@ (8007b28 <vPortFree+0xc0>)
 8007b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b06:	6938      	ldr	r0, [r7, #16]
 8007b08:	f000 f874 	bl	8007bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b0c:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <vPortFree+0xc4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	4a06      	ldr	r2, [pc, #24]	@ (8007b2c <vPortFree+0xc4>)
 8007b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b16:	f7fe fc63 	bl	80063e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b1a:	bf00      	nop
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20005f10 	.word	0x20005f10
 8007b28:	20005f00 	.word	0x20005f00
 8007b2c:	20005f0c 	.word	0x20005f0c

08007b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b36:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b3c:	4b27      	ldr	r3, [pc, #156]	@ (8007bdc <prvHeapInit+0xac>)
 8007b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00c      	beq.n	8007b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3307      	adds	r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0307 	bic.w	r3, r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007bdc <prvHeapInit+0xac>)
 8007b60:	4413      	add	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b68:	4a1d      	ldr	r2, [pc, #116]	@ (8007be0 <prvHeapInit+0xb0>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007be0 <prvHeapInit+0xb0>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4a15      	ldr	r2, [pc, #84]	@ (8007be4 <prvHeapInit+0xb4>)
 8007b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b92:	4b14      	ldr	r3, [pc, #80]	@ (8007be4 <prvHeapInit+0xb4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2200      	movs	r2, #0
 8007b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b9a:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <prvHeapInit+0xb4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	1ad2      	subs	r2, r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007be4 <prvHeapInit+0xb4>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007be8 <prvHeapInit+0xb8>)
 8007bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4a09      	ldr	r2, [pc, #36]	@ (8007bec <prvHeapInit+0xbc>)
 8007bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bc8:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <prvHeapInit+0xc0>)
 8007bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007bce:	601a      	str	r2, [r3, #0]
}
 8007bd0:	bf00      	nop
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	200010d4 	.word	0x200010d4
 8007be0:	20005ef4 	.word	0x20005ef4
 8007be4:	20005efc 	.word	0x20005efc
 8007be8:	20005f04 	.word	0x20005f04
 8007bec:	20005f00 	.word	0x20005f00
 8007bf0:	20005f10 	.word	0x20005f10

08007bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bfc:	4b28      	ldr	r3, [pc, #160]	@ (8007ca0 <prvInsertBlockIntoFreeList+0xac>)
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e002      	b.n	8007c08 <prvInsertBlockIntoFreeList+0x14>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d8f7      	bhi.n	8007c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d108      	bne.n	8007c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d118      	bne.n	8007c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d00d      	beq.n	8007c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e008      	b.n	8007c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e003      	b.n	8007c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d002      	beq.n	8007c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20005ef4 	.word	0x20005ef4
 8007ca4:	20005efc 	.word	0x20005efc

08007ca8 <std>:
 8007ca8:	2300      	movs	r3, #0
 8007caa:	b510      	push	{r4, lr}
 8007cac:	4604      	mov	r4, r0
 8007cae:	e9c0 3300 	strd	r3, r3, [r0]
 8007cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cb6:	6083      	str	r3, [r0, #8]
 8007cb8:	8181      	strh	r1, [r0, #12]
 8007cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cbc:	81c2      	strh	r2, [r0, #14]
 8007cbe:	6183      	str	r3, [r0, #24]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	305c      	adds	r0, #92	@ 0x5c
 8007cc6:	f000 fa1d 	bl	8008104 <memset>
 8007cca:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <std+0x58>)
 8007ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cce:	4b0d      	ldr	r3, [pc, #52]	@ (8007d04 <std+0x5c>)
 8007cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <std+0x60>)
 8007cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x64>)
 8007cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x68>)
 8007cdc:	6224      	str	r4, [r4, #32]
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d006      	beq.n	8007cf0 <std+0x48>
 8007ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ce6:	4294      	cmp	r4, r2
 8007ce8:	d002      	beq.n	8007cf0 <std+0x48>
 8007cea:	33d0      	adds	r3, #208	@ 0xd0
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d105      	bne.n	8007cfc <std+0x54>
 8007cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf8:	f000 bada 	b.w	80082b0 <__retarget_lock_init_recursive>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	08007f55 	.word	0x08007f55
 8007d04:	08007f77 	.word	0x08007f77
 8007d08:	08007faf 	.word	0x08007faf
 8007d0c:	08007fd3 	.word	0x08007fd3
 8007d10:	20005f14 	.word	0x20005f14

08007d14 <stdio_exit_handler>:
 8007d14:	4a02      	ldr	r2, [pc, #8]	@ (8007d20 <stdio_exit_handler+0xc>)
 8007d16:	4903      	ldr	r1, [pc, #12]	@ (8007d24 <stdio_exit_handler+0x10>)
 8007d18:	4803      	ldr	r0, [pc, #12]	@ (8007d28 <stdio_exit_handler+0x14>)
 8007d1a:	f000 b869 	b.w	8007df0 <_fwalk_sglue>
 8007d1e:	bf00      	nop
 8007d20:	20000010 	.word	0x20000010
 8007d24:	08008b95 	.word	0x08008b95
 8007d28:	20000020 	.word	0x20000020

08007d2c <cleanup_stdio>:
 8007d2c:	6841      	ldr	r1, [r0, #4]
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d60 <cleanup_stdio+0x34>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	b510      	push	{r4, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	d001      	beq.n	8007d3c <cleanup_stdio+0x10>
 8007d38:	f000 ff2c 	bl	8008b94 <_fflush_r>
 8007d3c:	68a1      	ldr	r1, [r4, #8]
 8007d3e:	4b09      	ldr	r3, [pc, #36]	@ (8007d64 <cleanup_stdio+0x38>)
 8007d40:	4299      	cmp	r1, r3
 8007d42:	d002      	beq.n	8007d4a <cleanup_stdio+0x1e>
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 ff25 	bl	8008b94 <_fflush_r>
 8007d4a:	68e1      	ldr	r1, [r4, #12]
 8007d4c:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <cleanup_stdio+0x3c>)
 8007d4e:	4299      	cmp	r1, r3
 8007d50:	d004      	beq.n	8007d5c <cleanup_stdio+0x30>
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f000 bf1c 	b.w	8008b94 <_fflush_r>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	20005f14 	.word	0x20005f14
 8007d64:	20005f7c 	.word	0x20005f7c
 8007d68:	20005fe4 	.word	0x20005fe4

08007d6c <global_stdio_init.part.0>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <global_stdio_init.part.0+0x30>)
 8007d70:	4c0b      	ldr	r4, [pc, #44]	@ (8007da0 <global_stdio_init.part.0+0x34>)
 8007d72:	4a0c      	ldr	r2, [pc, #48]	@ (8007da4 <global_stdio_init.part.0+0x38>)
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	4620      	mov	r0, r4
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	f7ff ff94 	bl	8007ca8 <std>
 8007d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d84:	2201      	movs	r2, #1
 8007d86:	2109      	movs	r1, #9
 8007d88:	f7ff ff8e 	bl	8007ca8 <std>
 8007d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d90:	2202      	movs	r2, #2
 8007d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d96:	2112      	movs	r1, #18
 8007d98:	f7ff bf86 	b.w	8007ca8 <std>
 8007d9c:	2000604c 	.word	0x2000604c
 8007da0:	20005f14 	.word	0x20005f14
 8007da4:	08007d15 	.word	0x08007d15

08007da8 <__sfp_lock_acquire>:
 8007da8:	4801      	ldr	r0, [pc, #4]	@ (8007db0 <__sfp_lock_acquire+0x8>)
 8007daa:	f000 ba82 	b.w	80082b2 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	20006055 	.word	0x20006055

08007db4 <__sfp_lock_release>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__sfp_lock_release+0x8>)
 8007db6:	f000 ba7d 	b.w	80082b4 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20006055 	.word	0x20006055

08007dc0 <__sinit>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f7ff fff0 	bl	8007da8 <__sfp_lock_acquire>
 8007dc8:	6a23      	ldr	r3, [r4, #32]
 8007dca:	b11b      	cbz	r3, 8007dd4 <__sinit+0x14>
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f7ff bff0 	b.w	8007db4 <__sfp_lock_release>
 8007dd4:	4b04      	ldr	r3, [pc, #16]	@ (8007de8 <__sinit+0x28>)
 8007dd6:	6223      	str	r3, [r4, #32]
 8007dd8:	4b04      	ldr	r3, [pc, #16]	@ (8007dec <__sinit+0x2c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <__sinit+0xc>
 8007de0:	f7ff ffc4 	bl	8007d6c <global_stdio_init.part.0>
 8007de4:	e7f2      	b.n	8007dcc <__sinit+0xc>
 8007de6:	bf00      	nop
 8007de8:	08007d2d 	.word	0x08007d2d
 8007dec:	2000604c 	.word	0x2000604c

08007df0 <_fwalk_sglue>:
 8007df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4607      	mov	r7, r0
 8007df6:	4688      	mov	r8, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e00:	f1b9 0901 	subs.w	r9, r9, #1
 8007e04:	d505      	bpl.n	8007e12 <_fwalk_sglue+0x22>
 8007e06:	6824      	ldr	r4, [r4, #0]
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	d1f7      	bne.n	8007dfc <_fwalk_sglue+0xc>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d907      	bls.n	8007e28 <_fwalk_sglue+0x38>
 8007e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	d003      	beq.n	8007e28 <_fwalk_sglue+0x38>
 8007e20:	4629      	mov	r1, r5
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	4306      	orrs	r6, r0
 8007e28:	3568      	adds	r5, #104	@ 0x68
 8007e2a:	e7e9      	b.n	8007e00 <_fwalk_sglue+0x10>

08007e2c <_puts_r>:
 8007e2c:	6a03      	ldr	r3, [r0, #32]
 8007e2e:	b570      	push	{r4, r5, r6, lr}
 8007e30:	6884      	ldr	r4, [r0, #8]
 8007e32:	4605      	mov	r5, r0
 8007e34:	460e      	mov	r6, r1
 8007e36:	b90b      	cbnz	r3, 8007e3c <_puts_r+0x10>
 8007e38:	f7ff ffc2 	bl	8007dc0 <__sinit>
 8007e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e3e:	07db      	lsls	r3, r3, #31
 8007e40:	d405      	bmi.n	8007e4e <_puts_r+0x22>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	0598      	lsls	r0, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_puts_r+0x22>
 8007e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e4a:	f000 fa32 	bl	80082b2 <__retarget_lock_acquire_recursive>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	0719      	lsls	r1, r3, #28
 8007e52:	d502      	bpl.n	8007e5a <_puts_r+0x2e>
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d135      	bne.n	8007ec6 <_puts_r+0x9a>
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 f8fb 	bl	8008058 <__swsetup_r>
 8007e62:	b380      	cbz	r0, 8007ec6 <_puts_r+0x9a>
 8007e64:	f04f 35ff 	mov.w	r5, #4294967295
 8007e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e6a:	07da      	lsls	r2, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_puts_r+0x4e>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	059b      	lsls	r3, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_puts_r+0x4e>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f000 fa1d 	bl	80082b4 <__retarget_lock_release_recursive>
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da04      	bge.n	8007e8c <_puts_r+0x60>
 8007e82:	69a2      	ldr	r2, [r4, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	dc17      	bgt.n	8007eb8 <_puts_r+0x8c>
 8007e88:	290a      	cmp	r1, #10
 8007e8a:	d015      	beq.n	8007eb8 <_puts_r+0x8c>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	6022      	str	r2, [r4, #0]
 8007e92:	7019      	strb	r1, [r3, #0]
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	60a3      	str	r3, [r4, #8]
 8007e9e:	2900      	cmp	r1, #0
 8007ea0:	d1ed      	bne.n	8007e7e <_puts_r+0x52>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da11      	bge.n	8007eca <_puts_r+0x9e>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	210a      	movs	r1, #10
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f000 f895 	bl	8007fda <__swbuf_r>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d0d7      	beq.n	8007e64 <_puts_r+0x38>
 8007eb4:	250a      	movs	r5, #10
 8007eb6:	e7d7      	b.n	8007e68 <_puts_r+0x3c>
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 f88d 	bl	8007fda <__swbuf_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d1e7      	bne.n	8007e94 <_puts_r+0x68>
 8007ec4:	e7ce      	b.n	8007e64 <_puts_r+0x38>
 8007ec6:	3e01      	subs	r6, #1
 8007ec8:	e7e4      	b.n	8007e94 <_puts_r+0x68>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	6022      	str	r2, [r4, #0]
 8007ed0:	220a      	movs	r2, #10
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e7ee      	b.n	8007eb4 <_puts_r+0x88>
	...

08007ed8 <puts>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	@ (8007ee4 <puts+0xc>)
 8007eda:	4601      	mov	r1, r0
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f7ff bfa5 	b.w	8007e2c <_puts_r>
 8007ee2:	bf00      	nop
 8007ee4:	2000001c 	.word	0x2000001c

08007ee8 <sniprintf>:
 8007ee8:	b40c      	push	{r2, r3}
 8007eea:	b530      	push	{r4, r5, lr}
 8007eec:	4b18      	ldr	r3, [pc, #96]	@ (8007f50 <sniprintf+0x68>)
 8007eee:	1e0c      	subs	r4, r1, #0
 8007ef0:	681d      	ldr	r5, [r3, #0]
 8007ef2:	b09d      	sub	sp, #116	@ 0x74
 8007ef4:	da08      	bge.n	8007f08 <sniprintf+0x20>
 8007ef6:	238b      	movs	r3, #139	@ 0x8b
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	b01d      	add	sp, #116	@ 0x74
 8007f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f04:	b002      	add	sp, #8
 8007f06:	4770      	bx	lr
 8007f08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007f16:	bf14      	ite	ne
 8007f18:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f1c:	4623      	moveq	r3, r4
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f26:	9002      	str	r0, [sp, #8]
 8007f28:	9006      	str	r0, [sp, #24]
 8007f2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f30:	ab21      	add	r3, sp, #132	@ 0x84
 8007f32:	a902      	add	r1, sp, #8
 8007f34:	4628      	mov	r0, r5
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	f000 fb20 	bl	800857c <_svfiprintf_r>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	bfbc      	itt	lt
 8007f40:	238b      	movlt	r3, #139	@ 0x8b
 8007f42:	602b      	strlt	r3, [r5, #0]
 8007f44:	2c00      	cmp	r4, #0
 8007f46:	d0da      	beq.n	8007efe <sniprintf+0x16>
 8007f48:	9b02      	ldr	r3, [sp, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e7d6      	b.n	8007efe <sniprintf+0x16>
 8007f50:	2000001c 	.word	0x2000001c

08007f54 <__sread>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	460c      	mov	r4, r1
 8007f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5c:	f000 f95a 	bl	8008214 <_read_r>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	bfab      	itete	ge
 8007f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f66:	89a3      	ldrhlt	r3, [r4, #12]
 8007f68:	181b      	addge	r3, r3, r0
 8007f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f6e:	bfac      	ite	ge
 8007f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f72:	81a3      	strhlt	r3, [r4, #12]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__swrite>:
 8007f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7a:	461f      	mov	r7, r3
 8007f7c:	898b      	ldrh	r3, [r1, #12]
 8007f7e:	05db      	lsls	r3, r3, #23
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4616      	mov	r6, r2
 8007f86:	d505      	bpl.n	8007f94 <__swrite+0x1e>
 8007f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f000 f92e 	bl	80081f0 <_lseek_r>
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f9e:	81a3      	strh	r3, [r4, #12]
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	463b      	mov	r3, r7
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	f000 b945 	b.w	8008238 <_write_r>

08007fae <__sseek>:
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb6:	f000 f91b 	bl	80081f0 <_lseek_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	bf15      	itete	ne
 8007fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fca:	81a3      	strheq	r3, [r4, #12]
 8007fcc:	bf18      	it	ne
 8007fce:	81a3      	strhne	r3, [r4, #12]
 8007fd0:	bd10      	pop	{r4, pc}

08007fd2 <__sclose>:
 8007fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd6:	f000 b89d 	b.w	8008114 <_close_r>

08007fda <__swbuf_r>:
 8007fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fdc:	460e      	mov	r6, r1
 8007fde:	4614      	mov	r4, r2
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	b118      	cbz	r0, 8007fec <__swbuf_r+0x12>
 8007fe4:	6a03      	ldr	r3, [r0, #32]
 8007fe6:	b90b      	cbnz	r3, 8007fec <__swbuf_r+0x12>
 8007fe8:	f7ff feea 	bl	8007dc0 <__sinit>
 8007fec:	69a3      	ldr	r3, [r4, #24]
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	071a      	lsls	r2, r3, #28
 8007ff4:	d501      	bpl.n	8007ffa <__swbuf_r+0x20>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b943      	cbnz	r3, 800800c <__swbuf_r+0x32>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f82b 	bl	8008058 <__swsetup_r>
 8008002:	b118      	cbz	r0, 800800c <__swbuf_r+0x32>
 8008004:	f04f 37ff 	mov.w	r7, #4294967295
 8008008:	4638      	mov	r0, r7
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	1a98      	subs	r0, r3, r2
 8008012:	6963      	ldr	r3, [r4, #20]
 8008014:	b2f6      	uxtb	r6, r6
 8008016:	4283      	cmp	r3, r0
 8008018:	4637      	mov	r7, r6
 800801a:	dc05      	bgt.n	8008028 <__swbuf_r+0x4e>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 fdb8 	bl	8008b94 <_fflush_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d1ed      	bne.n	8008004 <__swbuf_r+0x2a>
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	3b01      	subs	r3, #1
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	701e      	strb	r6, [r3, #0]
 8008036:	6962      	ldr	r2, [r4, #20]
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	429a      	cmp	r2, r3
 800803c:	d004      	beq.n	8008048 <__swbuf_r+0x6e>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d5e1      	bpl.n	8008008 <__swbuf_r+0x2e>
 8008044:	2e0a      	cmp	r6, #10
 8008046:	d1df      	bne.n	8008008 <__swbuf_r+0x2e>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f000 fda2 	bl	8008b94 <_fflush_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	d0d9      	beq.n	8008008 <__swbuf_r+0x2e>
 8008054:	e7d6      	b.n	8008004 <__swbuf_r+0x2a>
	...

08008058 <__swsetup_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4b29      	ldr	r3, [pc, #164]	@ (8008100 <__swsetup_r+0xa8>)
 800805c:	4605      	mov	r5, r0
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	460c      	mov	r4, r1
 8008062:	b118      	cbz	r0, 800806c <__swsetup_r+0x14>
 8008064:	6a03      	ldr	r3, [r0, #32]
 8008066:	b90b      	cbnz	r3, 800806c <__swsetup_r+0x14>
 8008068:	f7ff feaa 	bl	8007dc0 <__sinit>
 800806c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008070:	0719      	lsls	r1, r3, #28
 8008072:	d422      	bmi.n	80080ba <__swsetup_r+0x62>
 8008074:	06da      	lsls	r2, r3, #27
 8008076:	d407      	bmi.n	8008088 <__swsetup_r+0x30>
 8008078:	2209      	movs	r2, #9
 800807a:	602a      	str	r2, [r5, #0]
 800807c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	f04f 30ff 	mov.w	r0, #4294967295
 8008086:	e033      	b.n	80080f0 <__swsetup_r+0x98>
 8008088:	0758      	lsls	r0, r3, #29
 800808a:	d512      	bpl.n	80080b2 <__swsetup_r+0x5a>
 800808c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800808e:	b141      	cbz	r1, 80080a2 <__swsetup_r+0x4a>
 8008090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008094:	4299      	cmp	r1, r3
 8008096:	d002      	beq.n	800809e <__swsetup_r+0x46>
 8008098:	4628      	mov	r0, r5
 800809a:	f000 f91b 	bl	80082d4 <_free_r>
 800809e:	2300      	movs	r3, #0
 80080a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	2300      	movs	r3, #0
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	6923      	ldr	r3, [r4, #16]
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f043 0308 	orr.w	r3, r3, #8
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	b94b      	cbnz	r3, 80080d2 <__swsetup_r+0x7a>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c8:	d003      	beq.n	80080d2 <__swsetup_r+0x7a>
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 fdaf 	bl	8008c30 <__smakebuf_r>
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	f013 0201 	ands.w	r2, r3, #1
 80080da:	d00a      	beq.n	80080f2 <__swsetup_r+0x9a>
 80080dc:	2200      	movs	r2, #0
 80080de:	60a2      	str	r2, [r4, #8]
 80080e0:	6962      	ldr	r2, [r4, #20]
 80080e2:	4252      	negs	r2, r2
 80080e4:	61a2      	str	r2, [r4, #24]
 80080e6:	6922      	ldr	r2, [r4, #16]
 80080e8:	b942      	cbnz	r2, 80080fc <__swsetup_r+0xa4>
 80080ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080ee:	d1c5      	bne.n	800807c <__swsetup_r+0x24>
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
 80080f2:	0799      	lsls	r1, r3, #30
 80080f4:	bf58      	it	pl
 80080f6:	6962      	ldrpl	r2, [r4, #20]
 80080f8:	60a2      	str	r2, [r4, #8]
 80080fa:	e7f4      	b.n	80080e6 <__swsetup_r+0x8e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7f7      	b.n	80080f0 <__swsetup_r+0x98>
 8008100:	2000001c 	.word	0x2000001c

08008104 <memset>:
 8008104:	4402      	add	r2, r0
 8008106:	4603      	mov	r3, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <_close_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d06      	ldr	r5, [pc, #24]	@ (8008130 <_close_r+0x1c>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7f9 f8a5 	bl	800126e <_close>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_close_r+0x1a>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_close_r+0x1a>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20006050 	.word	0x20006050

08008134 <_reclaim_reent>:
 8008134:	4b2d      	ldr	r3, [pc, #180]	@ (80081ec <_reclaim_reent+0xb8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4283      	cmp	r3, r0
 800813a:	b570      	push	{r4, r5, r6, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	d053      	beq.n	80081e8 <_reclaim_reent+0xb4>
 8008140:	69c3      	ldr	r3, [r0, #28]
 8008142:	b31b      	cbz	r3, 800818c <_reclaim_reent+0x58>
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	b163      	cbz	r3, 8008162 <_reclaim_reent+0x2e>
 8008148:	2500      	movs	r5, #0
 800814a:	69e3      	ldr	r3, [r4, #28]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	5959      	ldr	r1, [r3, r5]
 8008150:	b9b1      	cbnz	r1, 8008180 <_reclaim_reent+0x4c>
 8008152:	3504      	adds	r5, #4
 8008154:	2d80      	cmp	r5, #128	@ 0x80
 8008156:	d1f8      	bne.n	800814a <_reclaim_reent+0x16>
 8008158:	69e3      	ldr	r3, [r4, #28]
 800815a:	4620      	mov	r0, r4
 800815c:	68d9      	ldr	r1, [r3, #12]
 800815e:	f000 f8b9 	bl	80082d4 <_free_r>
 8008162:	69e3      	ldr	r3, [r4, #28]
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	b111      	cbz	r1, 800816e <_reclaim_reent+0x3a>
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f8b3 	bl	80082d4 <_free_r>
 800816e:	69e3      	ldr	r3, [r4, #28]
 8008170:	689d      	ldr	r5, [r3, #8]
 8008172:	b15d      	cbz	r5, 800818c <_reclaim_reent+0x58>
 8008174:	4629      	mov	r1, r5
 8008176:	4620      	mov	r0, r4
 8008178:	682d      	ldr	r5, [r5, #0]
 800817a:	f000 f8ab 	bl	80082d4 <_free_r>
 800817e:	e7f8      	b.n	8008172 <_reclaim_reent+0x3e>
 8008180:	680e      	ldr	r6, [r1, #0]
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f8a6 	bl	80082d4 <_free_r>
 8008188:	4631      	mov	r1, r6
 800818a:	e7e1      	b.n	8008150 <_reclaim_reent+0x1c>
 800818c:	6961      	ldr	r1, [r4, #20]
 800818e:	b111      	cbz	r1, 8008196 <_reclaim_reent+0x62>
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f89f 	bl	80082d4 <_free_r>
 8008196:	69e1      	ldr	r1, [r4, #28]
 8008198:	b111      	cbz	r1, 80081a0 <_reclaim_reent+0x6c>
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f89a 	bl	80082d4 <_free_r>
 80081a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80081a2:	b111      	cbz	r1, 80081aa <_reclaim_reent+0x76>
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 f895 	bl	80082d4 <_free_r>
 80081aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ac:	b111      	cbz	r1, 80081b4 <_reclaim_reent+0x80>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f890 	bl	80082d4 <_free_r>
 80081b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80081b6:	b111      	cbz	r1, 80081be <_reclaim_reent+0x8a>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 f88b 	bl	80082d4 <_free_r>
 80081be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80081c0:	b111      	cbz	r1, 80081c8 <_reclaim_reent+0x94>
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f886 	bl	80082d4 <_free_r>
 80081c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80081ca:	b111      	cbz	r1, 80081d2 <_reclaim_reent+0x9e>
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 f881 	bl	80082d4 <_free_r>
 80081d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80081d4:	b111      	cbz	r1, 80081dc <_reclaim_reent+0xa8>
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 f87c 	bl	80082d4 <_free_r>
 80081dc:	6a23      	ldr	r3, [r4, #32]
 80081de:	b11b      	cbz	r3, 80081e8 <_reclaim_reent+0xb4>
 80081e0:	4620      	mov	r0, r4
 80081e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081e6:	4718      	bx	r3
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	bf00      	nop
 80081ec:	2000001c 	.word	0x2000001c

080081f0 <_lseek_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	@ (8008210 <_lseek_r+0x20>)
 80081f4:	4604      	mov	r4, r0
 80081f6:	4608      	mov	r0, r1
 80081f8:	4611      	mov	r1, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7f9 f85c 	bl	80012bc <_lseek>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_lseek_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_lseek_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	20006050 	.word	0x20006050

08008214 <_read_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	@ (8008234 <_read_r+0x20>)
 8008218:	4604      	mov	r4, r0
 800821a:	4608      	mov	r0, r1
 800821c:	4611      	mov	r1, r2
 800821e:	2200      	movs	r2, #0
 8008220:	602a      	str	r2, [r5, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f7f9 f806 	bl	8001234 <_read>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_read_r+0x1e>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_read_r+0x1e>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20006050 	.word	0x20006050

08008238 <_write_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d07      	ldr	r5, [pc, #28]	@ (8008258 <_write_r+0x20>)
 800823c:	4604      	mov	r4, r0
 800823e:	4608      	mov	r0, r1
 8008240:	4611      	mov	r1, r2
 8008242:	2200      	movs	r2, #0
 8008244:	602a      	str	r2, [r5, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	f7f8 fc74 	bl	8000b34 <_write>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_write_r+0x1e>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_write_r+0x1e>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	20006050 	.word	0x20006050

0800825c <__errno>:
 800825c:	4b01      	ldr	r3, [pc, #4]	@ (8008264 <__errno+0x8>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	2000001c 	.word	0x2000001c

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	@ (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	@ (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	@ (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	@ (80082ac <__libc_init_array+0x44>)
 800827c:	f000 fd96 	bl	8008dac <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	08008f54 	.word	0x08008f54
 80082a4:	08008f54 	.word	0x08008f54
 80082a8:	08008f54 	.word	0x08008f54
 80082ac:	08008f58 	.word	0x08008f58

080082b0 <__retarget_lock_init_recursive>:
 80082b0:	4770      	bx	lr

080082b2 <__retarget_lock_acquire_recursive>:
 80082b2:	4770      	bx	lr

080082b4 <__retarget_lock_release_recursive>:
 80082b4:	4770      	bx	lr

080082b6 <memcpy>:
 80082b6:	440a      	add	r2, r1
 80082b8:	4291      	cmp	r1, r2
 80082ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80082be:	d100      	bne.n	80082c2 <memcpy+0xc>
 80082c0:	4770      	bx	lr
 80082c2:	b510      	push	{r4, lr}
 80082c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082cc:	4291      	cmp	r1, r2
 80082ce:	d1f9      	bne.n	80082c4 <memcpy+0xe>
 80082d0:	bd10      	pop	{r4, pc}
	...

080082d4 <_free_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4605      	mov	r5, r0
 80082d8:	2900      	cmp	r1, #0
 80082da:	d041      	beq.n	8008360 <_free_r+0x8c>
 80082dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e0:	1f0c      	subs	r4, r1, #4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bfb8      	it	lt
 80082e6:	18e4      	addlt	r4, r4, r3
 80082e8:	f000 f8e0 	bl	80084ac <__malloc_lock>
 80082ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008364 <_free_r+0x90>)
 80082ee:	6813      	ldr	r3, [r2, #0]
 80082f0:	b933      	cbnz	r3, 8008300 <_free_r+0x2c>
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	6014      	str	r4, [r2, #0]
 80082f6:	4628      	mov	r0, r5
 80082f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082fc:	f000 b8dc 	b.w	80084b8 <__malloc_unlock>
 8008300:	42a3      	cmp	r3, r4
 8008302:	d908      	bls.n	8008316 <_free_r+0x42>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	1821      	adds	r1, r4, r0
 8008308:	428b      	cmp	r3, r1
 800830a:	bf01      	itttt	eq
 800830c:	6819      	ldreq	r1, [r3, #0]
 800830e:	685b      	ldreq	r3, [r3, #4]
 8008310:	1809      	addeq	r1, r1, r0
 8008312:	6021      	streq	r1, [r4, #0]
 8008314:	e7ed      	b.n	80082f2 <_free_r+0x1e>
 8008316:	461a      	mov	r2, r3
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	b10b      	cbz	r3, 8008320 <_free_r+0x4c>
 800831c:	42a3      	cmp	r3, r4
 800831e:	d9fa      	bls.n	8008316 <_free_r+0x42>
 8008320:	6811      	ldr	r1, [r2, #0]
 8008322:	1850      	adds	r0, r2, r1
 8008324:	42a0      	cmp	r0, r4
 8008326:	d10b      	bne.n	8008340 <_free_r+0x6c>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	4401      	add	r1, r0
 800832c:	1850      	adds	r0, r2, r1
 800832e:	4283      	cmp	r3, r0
 8008330:	6011      	str	r1, [r2, #0]
 8008332:	d1e0      	bne.n	80082f6 <_free_r+0x22>
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	6053      	str	r3, [r2, #4]
 800833a:	4408      	add	r0, r1
 800833c:	6010      	str	r0, [r2, #0]
 800833e:	e7da      	b.n	80082f6 <_free_r+0x22>
 8008340:	d902      	bls.n	8008348 <_free_r+0x74>
 8008342:	230c      	movs	r3, #12
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	e7d6      	b.n	80082f6 <_free_r+0x22>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	1821      	adds	r1, r4, r0
 800834c:	428b      	cmp	r3, r1
 800834e:	bf04      	itt	eq
 8008350:	6819      	ldreq	r1, [r3, #0]
 8008352:	685b      	ldreq	r3, [r3, #4]
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	bf04      	itt	eq
 8008358:	1809      	addeq	r1, r1, r0
 800835a:	6021      	streq	r1, [r4, #0]
 800835c:	6054      	str	r4, [r2, #4]
 800835e:	e7ca      	b.n	80082f6 <_free_r+0x22>
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	2000605c 	.word	0x2000605c

08008368 <sbrk_aligned>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4e0f      	ldr	r6, [pc, #60]	@ (80083a8 <sbrk_aligned+0x40>)
 800836c:	460c      	mov	r4, r1
 800836e:	6831      	ldr	r1, [r6, #0]
 8008370:	4605      	mov	r5, r0
 8008372:	b911      	cbnz	r1, 800837a <sbrk_aligned+0x12>
 8008374:	f000 fcd4 	bl	8008d20 <_sbrk_r>
 8008378:	6030      	str	r0, [r6, #0]
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f000 fccf 	bl	8008d20 <_sbrk_r>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d103      	bne.n	800838e <sbrk_aligned+0x26>
 8008386:	f04f 34ff 	mov.w	r4, #4294967295
 800838a:	4620      	mov	r0, r4
 800838c:	bd70      	pop	{r4, r5, r6, pc}
 800838e:	1cc4      	adds	r4, r0, #3
 8008390:	f024 0403 	bic.w	r4, r4, #3
 8008394:	42a0      	cmp	r0, r4
 8008396:	d0f8      	beq.n	800838a <sbrk_aligned+0x22>
 8008398:	1a21      	subs	r1, r4, r0
 800839a:	4628      	mov	r0, r5
 800839c:	f000 fcc0 	bl	8008d20 <_sbrk_r>
 80083a0:	3001      	adds	r0, #1
 80083a2:	d1f2      	bne.n	800838a <sbrk_aligned+0x22>
 80083a4:	e7ef      	b.n	8008386 <sbrk_aligned+0x1e>
 80083a6:	bf00      	nop
 80083a8:	20006058 	.word	0x20006058

080083ac <_malloc_r>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	1ccd      	adds	r5, r1, #3
 80083b2:	f025 0503 	bic.w	r5, r5, #3
 80083b6:	3508      	adds	r5, #8
 80083b8:	2d0c      	cmp	r5, #12
 80083ba:	bf38      	it	cc
 80083bc:	250c      	movcc	r5, #12
 80083be:	2d00      	cmp	r5, #0
 80083c0:	4606      	mov	r6, r0
 80083c2:	db01      	blt.n	80083c8 <_malloc_r+0x1c>
 80083c4:	42a9      	cmp	r1, r5
 80083c6:	d904      	bls.n	80083d2 <_malloc_r+0x26>
 80083c8:	230c      	movs	r3, #12
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084a8 <_malloc_r+0xfc>
 80083d6:	f000 f869 	bl	80084ac <__malloc_lock>
 80083da:	f8d8 3000 	ldr.w	r3, [r8]
 80083de:	461c      	mov	r4, r3
 80083e0:	bb44      	cbnz	r4, 8008434 <_malloc_r+0x88>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff ffbf 	bl	8008368 <sbrk_aligned>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	4604      	mov	r4, r0
 80083ee:	d158      	bne.n	80084a2 <_malloc_r+0xf6>
 80083f0:	f8d8 4000 	ldr.w	r4, [r8]
 80083f4:	4627      	mov	r7, r4
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d143      	bne.n	8008482 <_malloc_r+0xd6>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	d04b      	beq.n	8008496 <_malloc_r+0xea>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	4639      	mov	r1, r7
 8008402:	4630      	mov	r0, r6
 8008404:	eb04 0903 	add.w	r9, r4, r3
 8008408:	f000 fc8a 	bl	8008d20 <_sbrk_r>
 800840c:	4581      	cmp	r9, r0
 800840e:	d142      	bne.n	8008496 <_malloc_r+0xea>
 8008410:	6821      	ldr	r1, [r4, #0]
 8008412:	1a6d      	subs	r5, r5, r1
 8008414:	4629      	mov	r1, r5
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ffa6 	bl	8008368 <sbrk_aligned>
 800841c:	3001      	adds	r0, #1
 800841e:	d03a      	beq.n	8008496 <_malloc_r+0xea>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	442b      	add	r3, r5
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	f8d8 3000 	ldr.w	r3, [r8]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	bb62      	cbnz	r2, 8008488 <_malloc_r+0xdc>
 800842e:	f8c8 7000 	str.w	r7, [r8]
 8008432:	e00f      	b.n	8008454 <_malloc_r+0xa8>
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	1b52      	subs	r2, r2, r5
 8008438:	d420      	bmi.n	800847c <_malloc_r+0xd0>
 800843a:	2a0b      	cmp	r2, #11
 800843c:	d917      	bls.n	800846e <_malloc_r+0xc2>
 800843e:	1961      	adds	r1, r4, r5
 8008440:	42a3      	cmp	r3, r4
 8008442:	6025      	str	r5, [r4, #0]
 8008444:	bf18      	it	ne
 8008446:	6059      	strne	r1, [r3, #4]
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	bf08      	it	eq
 800844c:	f8c8 1000 	streq.w	r1, [r8]
 8008450:	5162      	str	r2, [r4, r5]
 8008452:	604b      	str	r3, [r1, #4]
 8008454:	4630      	mov	r0, r6
 8008456:	f000 f82f 	bl	80084b8 <__malloc_unlock>
 800845a:	f104 000b 	add.w	r0, r4, #11
 800845e:	1d23      	adds	r3, r4, #4
 8008460:	f020 0007 	bic.w	r0, r0, #7
 8008464:	1ac2      	subs	r2, r0, r3
 8008466:	bf1c      	itt	ne
 8008468:	1a1b      	subne	r3, r3, r0
 800846a:	50a3      	strne	r3, [r4, r2]
 800846c:	e7af      	b.n	80083ce <_malloc_r+0x22>
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	42a3      	cmp	r3, r4
 8008472:	bf0c      	ite	eq
 8008474:	f8c8 2000 	streq.w	r2, [r8]
 8008478:	605a      	strne	r2, [r3, #4]
 800847a:	e7eb      	b.n	8008454 <_malloc_r+0xa8>
 800847c:	4623      	mov	r3, r4
 800847e:	6864      	ldr	r4, [r4, #4]
 8008480:	e7ae      	b.n	80083e0 <_malloc_r+0x34>
 8008482:	463c      	mov	r4, r7
 8008484:	687f      	ldr	r7, [r7, #4]
 8008486:	e7b6      	b.n	80083f6 <_malloc_r+0x4a>
 8008488:	461a      	mov	r2, r3
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	42a3      	cmp	r3, r4
 800848e:	d1fb      	bne.n	8008488 <_malloc_r+0xdc>
 8008490:	2300      	movs	r3, #0
 8008492:	6053      	str	r3, [r2, #4]
 8008494:	e7de      	b.n	8008454 <_malloc_r+0xa8>
 8008496:	230c      	movs	r3, #12
 8008498:	6033      	str	r3, [r6, #0]
 800849a:	4630      	mov	r0, r6
 800849c:	f000 f80c 	bl	80084b8 <__malloc_unlock>
 80084a0:	e794      	b.n	80083cc <_malloc_r+0x20>
 80084a2:	6005      	str	r5, [r0, #0]
 80084a4:	e7d6      	b.n	8008454 <_malloc_r+0xa8>
 80084a6:	bf00      	nop
 80084a8:	2000605c 	.word	0x2000605c

080084ac <__malloc_lock>:
 80084ac:	4801      	ldr	r0, [pc, #4]	@ (80084b4 <__malloc_lock+0x8>)
 80084ae:	f7ff bf00 	b.w	80082b2 <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	20006054 	.word	0x20006054

080084b8 <__malloc_unlock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__malloc_unlock+0x8>)
 80084ba:	f7ff befb 	b.w	80082b4 <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	20006054 	.word	0x20006054

080084c4 <__ssputs_r>:
 80084c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c8:	688e      	ldr	r6, [r1, #8]
 80084ca:	461f      	mov	r7, r3
 80084cc:	42be      	cmp	r6, r7
 80084ce:	680b      	ldr	r3, [r1, #0]
 80084d0:	4682      	mov	sl, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4690      	mov	r8, r2
 80084d6:	d82d      	bhi.n	8008534 <__ssputs_r+0x70>
 80084d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084e0:	d026      	beq.n	8008530 <__ssputs_r+0x6c>
 80084e2:	6965      	ldr	r5, [r4, #20]
 80084e4:	6909      	ldr	r1, [r1, #16]
 80084e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ea:	eba3 0901 	sub.w	r9, r3, r1
 80084ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084f2:	1c7b      	adds	r3, r7, #1
 80084f4:	444b      	add	r3, r9
 80084f6:	106d      	asrs	r5, r5, #1
 80084f8:	429d      	cmp	r5, r3
 80084fa:	bf38      	it	cc
 80084fc:	461d      	movcc	r5, r3
 80084fe:	0553      	lsls	r3, r2, #21
 8008500:	d527      	bpl.n	8008552 <__ssputs_r+0x8e>
 8008502:	4629      	mov	r1, r5
 8008504:	f7ff ff52 	bl	80083ac <_malloc_r>
 8008508:	4606      	mov	r6, r0
 800850a:	b360      	cbz	r0, 8008566 <__ssputs_r+0xa2>
 800850c:	6921      	ldr	r1, [r4, #16]
 800850e:	464a      	mov	r2, r9
 8008510:	f7ff fed1 	bl	80082b6 <memcpy>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800851a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800851e:	81a3      	strh	r3, [r4, #12]
 8008520:	6126      	str	r6, [r4, #16]
 8008522:	6165      	str	r5, [r4, #20]
 8008524:	444e      	add	r6, r9
 8008526:	eba5 0509 	sub.w	r5, r5, r9
 800852a:	6026      	str	r6, [r4, #0]
 800852c:	60a5      	str	r5, [r4, #8]
 800852e:	463e      	mov	r6, r7
 8008530:	42be      	cmp	r6, r7
 8008532:	d900      	bls.n	8008536 <__ssputs_r+0x72>
 8008534:	463e      	mov	r6, r7
 8008536:	6820      	ldr	r0, [r4, #0]
 8008538:	4632      	mov	r2, r6
 800853a:	4641      	mov	r1, r8
 800853c:	f000 fbb4 	bl	8008ca8 <memmove>
 8008540:	68a3      	ldr	r3, [r4, #8]
 8008542:	1b9b      	subs	r3, r3, r6
 8008544:	60a3      	str	r3, [r4, #8]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	4433      	add	r3, r6
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	2000      	movs	r0, #0
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	462a      	mov	r2, r5
 8008554:	f000 fbf4 	bl	8008d40 <_realloc_r>
 8008558:	4606      	mov	r6, r0
 800855a:	2800      	cmp	r0, #0
 800855c:	d1e0      	bne.n	8008520 <__ssputs_r+0x5c>
 800855e:	6921      	ldr	r1, [r4, #16]
 8008560:	4650      	mov	r0, sl
 8008562:	f7ff feb7 	bl	80082d4 <_free_r>
 8008566:	230c      	movs	r3, #12
 8008568:	f8ca 3000 	str.w	r3, [sl]
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	e7e9      	b.n	800854e <__ssputs_r+0x8a>
	...

0800857c <_svfiprintf_r>:
 800857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	4698      	mov	r8, r3
 8008582:	898b      	ldrh	r3, [r1, #12]
 8008584:	061b      	lsls	r3, r3, #24
 8008586:	b09d      	sub	sp, #116	@ 0x74
 8008588:	4607      	mov	r7, r0
 800858a:	460d      	mov	r5, r1
 800858c:	4614      	mov	r4, r2
 800858e:	d510      	bpl.n	80085b2 <_svfiprintf_r+0x36>
 8008590:	690b      	ldr	r3, [r1, #16]
 8008592:	b973      	cbnz	r3, 80085b2 <_svfiprintf_r+0x36>
 8008594:	2140      	movs	r1, #64	@ 0x40
 8008596:	f7ff ff09 	bl	80083ac <_malloc_r>
 800859a:	6028      	str	r0, [r5, #0]
 800859c:	6128      	str	r0, [r5, #16]
 800859e:	b930      	cbnz	r0, 80085ae <_svfiprintf_r+0x32>
 80085a0:	230c      	movs	r3, #12
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	b01d      	add	sp, #116	@ 0x74
 80085aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ae:	2340      	movs	r3, #64	@ 0x40
 80085b0:	616b      	str	r3, [r5, #20]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	2320      	movs	r3, #32
 80085b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c0:	2330      	movs	r3, #48	@ 0x30
 80085c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008760 <_svfiprintf_r+0x1e4>
 80085c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ca:	f04f 0901 	mov.w	r9, #1
 80085ce:	4623      	mov	r3, r4
 80085d0:	469a      	mov	sl, r3
 80085d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d6:	b10a      	cbz	r2, 80085dc <_svfiprintf_r+0x60>
 80085d8:	2a25      	cmp	r2, #37	@ 0x25
 80085da:	d1f9      	bne.n	80085d0 <_svfiprintf_r+0x54>
 80085dc:	ebba 0b04 	subs.w	fp, sl, r4
 80085e0:	d00b      	beq.n	80085fa <_svfiprintf_r+0x7e>
 80085e2:	465b      	mov	r3, fp
 80085e4:	4622      	mov	r2, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	4638      	mov	r0, r7
 80085ea:	f7ff ff6b 	bl	80084c4 <__ssputs_r>
 80085ee:	3001      	adds	r0, #1
 80085f0:	f000 80a7 	beq.w	8008742 <_svfiprintf_r+0x1c6>
 80085f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f6:	445a      	add	r2, fp
 80085f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80085fa:	f89a 3000 	ldrb.w	r3, [sl]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 809f 	beq.w	8008742 <_svfiprintf_r+0x1c6>
 8008604:	2300      	movs	r3, #0
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800860e:	f10a 0a01 	add.w	sl, sl, #1
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800861a:	931a      	str	r3, [sp, #104]	@ 0x68
 800861c:	4654      	mov	r4, sl
 800861e:	2205      	movs	r2, #5
 8008620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008624:	484e      	ldr	r0, [pc, #312]	@ (8008760 <_svfiprintf_r+0x1e4>)
 8008626:	f7f7 fddb 	bl	80001e0 <memchr>
 800862a:	9a04      	ldr	r2, [sp, #16]
 800862c:	b9d8      	cbnz	r0, 8008666 <_svfiprintf_r+0xea>
 800862e:	06d0      	lsls	r0, r2, #27
 8008630:	bf44      	itt	mi
 8008632:	2320      	movmi	r3, #32
 8008634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008638:	0711      	lsls	r1, r2, #28
 800863a:	bf44      	itt	mi
 800863c:	232b      	movmi	r3, #43	@ 0x2b
 800863e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008642:	f89a 3000 	ldrb.w	r3, [sl]
 8008646:	2b2a      	cmp	r3, #42	@ 0x2a
 8008648:	d015      	beq.n	8008676 <_svfiprintf_r+0xfa>
 800864a:	9a07      	ldr	r2, [sp, #28]
 800864c:	4654      	mov	r4, sl
 800864e:	2000      	movs	r0, #0
 8008650:	f04f 0c0a 	mov.w	ip, #10
 8008654:	4621      	mov	r1, r4
 8008656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865a:	3b30      	subs	r3, #48	@ 0x30
 800865c:	2b09      	cmp	r3, #9
 800865e:	d94b      	bls.n	80086f8 <_svfiprintf_r+0x17c>
 8008660:	b1b0      	cbz	r0, 8008690 <_svfiprintf_r+0x114>
 8008662:	9207      	str	r2, [sp, #28]
 8008664:	e014      	b.n	8008690 <_svfiprintf_r+0x114>
 8008666:	eba0 0308 	sub.w	r3, r0, r8
 800866a:	fa09 f303 	lsl.w	r3, r9, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	46a2      	mov	sl, r4
 8008674:	e7d2      	b.n	800861c <_svfiprintf_r+0xa0>
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	1d19      	adds	r1, r3, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	9103      	str	r1, [sp, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfbb      	ittet	lt
 8008682:	425b      	neglt	r3, r3
 8008684:	f042 0202 	orrlt.w	r2, r2, #2
 8008688:	9307      	strge	r3, [sp, #28]
 800868a:	9307      	strlt	r3, [sp, #28]
 800868c:	bfb8      	it	lt
 800868e:	9204      	strlt	r2, [sp, #16]
 8008690:	7823      	ldrb	r3, [r4, #0]
 8008692:	2b2e      	cmp	r3, #46	@ 0x2e
 8008694:	d10a      	bne.n	80086ac <_svfiprintf_r+0x130>
 8008696:	7863      	ldrb	r3, [r4, #1]
 8008698:	2b2a      	cmp	r3, #42	@ 0x2a
 800869a:	d132      	bne.n	8008702 <_svfiprintf_r+0x186>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	9203      	str	r2, [sp, #12]
 80086a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086a8:	3402      	adds	r4, #2
 80086aa:	9305      	str	r3, [sp, #20]
 80086ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008770 <_svfiprintf_r+0x1f4>
 80086b0:	7821      	ldrb	r1, [r4, #0]
 80086b2:	2203      	movs	r2, #3
 80086b4:	4650      	mov	r0, sl
 80086b6:	f7f7 fd93 	bl	80001e0 <memchr>
 80086ba:	b138      	cbz	r0, 80086cc <_svfiprintf_r+0x150>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	eba0 000a 	sub.w	r0, r0, sl
 80086c2:	2240      	movs	r2, #64	@ 0x40
 80086c4:	4082      	lsls	r2, r0
 80086c6:	4313      	orrs	r3, r2
 80086c8:	3401      	adds	r4, #1
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d0:	4824      	ldr	r0, [pc, #144]	@ (8008764 <_svfiprintf_r+0x1e8>)
 80086d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d6:	2206      	movs	r2, #6
 80086d8:	f7f7 fd82 	bl	80001e0 <memchr>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d036      	beq.n	800874e <_svfiprintf_r+0x1d2>
 80086e0:	4b21      	ldr	r3, [pc, #132]	@ (8008768 <_svfiprintf_r+0x1ec>)
 80086e2:	bb1b      	cbnz	r3, 800872c <_svfiprintf_r+0x1b0>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	3307      	adds	r3, #7
 80086e8:	f023 0307 	bic.w	r3, r3, #7
 80086ec:	3308      	adds	r3, #8
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f2:	4433      	add	r3, r6
 80086f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f6:	e76a      	b.n	80085ce <_svfiprintf_r+0x52>
 80086f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fc:	460c      	mov	r4, r1
 80086fe:	2001      	movs	r0, #1
 8008700:	e7a8      	b.n	8008654 <_svfiprintf_r+0xd8>
 8008702:	2300      	movs	r3, #0
 8008704:	3401      	adds	r4, #1
 8008706:	9305      	str	r3, [sp, #20]
 8008708:	4619      	mov	r1, r3
 800870a:	f04f 0c0a 	mov.w	ip, #10
 800870e:	4620      	mov	r0, r4
 8008710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008714:	3a30      	subs	r2, #48	@ 0x30
 8008716:	2a09      	cmp	r2, #9
 8008718:	d903      	bls.n	8008722 <_svfiprintf_r+0x1a6>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0c6      	beq.n	80086ac <_svfiprintf_r+0x130>
 800871e:	9105      	str	r1, [sp, #20]
 8008720:	e7c4      	b.n	80086ac <_svfiprintf_r+0x130>
 8008722:	fb0c 2101 	mla	r1, ip, r1, r2
 8008726:	4604      	mov	r4, r0
 8008728:	2301      	movs	r3, #1
 800872a:	e7f0      	b.n	800870e <_svfiprintf_r+0x192>
 800872c:	ab03      	add	r3, sp, #12
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	462a      	mov	r2, r5
 8008732:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <_svfiprintf_r+0x1f0>)
 8008734:	a904      	add	r1, sp, #16
 8008736:	4638      	mov	r0, r7
 8008738:	f3af 8000 	nop.w
 800873c:	1c42      	adds	r2, r0, #1
 800873e:	4606      	mov	r6, r0
 8008740:	d1d6      	bne.n	80086f0 <_svfiprintf_r+0x174>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	065b      	lsls	r3, r3, #25
 8008746:	f53f af2d 	bmi.w	80085a4 <_svfiprintf_r+0x28>
 800874a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800874c:	e72c      	b.n	80085a8 <_svfiprintf_r+0x2c>
 800874e:	ab03      	add	r3, sp, #12
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462a      	mov	r2, r5
 8008754:	4b05      	ldr	r3, [pc, #20]	@ (800876c <_svfiprintf_r+0x1f0>)
 8008756:	a904      	add	r1, sp, #16
 8008758:	4638      	mov	r0, r7
 800875a:	f000 f879 	bl	8008850 <_printf_i>
 800875e:	e7ed      	b.n	800873c <_svfiprintf_r+0x1c0>
 8008760:	08008f18 	.word	0x08008f18
 8008764:	08008f22 	.word	0x08008f22
 8008768:	00000000 	.word	0x00000000
 800876c:	080084c5 	.word	0x080084c5
 8008770:	08008f1e 	.word	0x08008f1e

08008774 <_printf_common>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	4616      	mov	r6, r2
 800877a:	4698      	mov	r8, r3
 800877c:	688a      	ldr	r2, [r1, #8]
 800877e:	690b      	ldr	r3, [r1, #16]
 8008780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008784:	4293      	cmp	r3, r2
 8008786:	bfb8      	it	lt
 8008788:	4613      	movlt	r3, r2
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008790:	4607      	mov	r7, r0
 8008792:	460c      	mov	r4, r1
 8008794:	b10a      	cbz	r2, 800879a <_printf_common+0x26>
 8008796:	3301      	adds	r3, #1
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	0699      	lsls	r1, r3, #26
 800879e:	bf42      	ittt	mi
 80087a0:	6833      	ldrmi	r3, [r6, #0]
 80087a2:	3302      	addmi	r3, #2
 80087a4:	6033      	strmi	r3, [r6, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	f015 0506 	ands.w	r5, r5, #6
 80087ac:	d106      	bne.n	80087bc <_printf_common+0x48>
 80087ae:	f104 0a19 	add.w	sl, r4, #25
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	6832      	ldr	r2, [r6, #0]
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dc26      	bgt.n	800880a <_printf_common+0x96>
 80087bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	3b00      	subs	r3, #0
 80087c4:	bf18      	it	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	0692      	lsls	r2, r2, #26
 80087ca:	d42b      	bmi.n	8008824 <_printf_common+0xb0>
 80087cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087d0:	4641      	mov	r1, r8
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c8      	blx	r9
 80087d6:	3001      	adds	r0, #1
 80087d8:	d01e      	beq.n	8008818 <_printf_common+0xa4>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	6922      	ldr	r2, [r4, #16]
 80087de:	f003 0306 	and.w	r3, r3, #6
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	bf02      	ittt	eq
 80087e6:	68e5      	ldreq	r5, [r4, #12]
 80087e8:	6833      	ldreq	r3, [r6, #0]
 80087ea:	1aed      	subeq	r5, r5, r3
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	bf0c      	ite	eq
 80087f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f4:	2500      	movne	r5, #0
 80087f6:	4293      	cmp	r3, r2
 80087f8:	bfc4      	itt	gt
 80087fa:	1a9b      	subgt	r3, r3, r2
 80087fc:	18ed      	addgt	r5, r5, r3
 80087fe:	2600      	movs	r6, #0
 8008800:	341a      	adds	r4, #26
 8008802:	42b5      	cmp	r5, r6
 8008804:	d11a      	bne.n	800883c <_printf_common+0xc8>
 8008806:	2000      	movs	r0, #0
 8008808:	e008      	b.n	800881c <_printf_common+0xa8>
 800880a:	2301      	movs	r3, #1
 800880c:	4652      	mov	r2, sl
 800880e:	4641      	mov	r1, r8
 8008810:	4638      	mov	r0, r7
 8008812:	47c8      	blx	r9
 8008814:	3001      	adds	r0, #1
 8008816:	d103      	bne.n	8008820 <_printf_common+0xac>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	3501      	adds	r5, #1
 8008822:	e7c6      	b.n	80087b2 <_printf_common+0x3e>
 8008824:	18e1      	adds	r1, r4, r3
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	2030      	movs	r0, #48	@ 0x30
 800882a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800882e:	4422      	add	r2, r4
 8008830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008838:	3302      	adds	r3, #2
 800883a:	e7c7      	b.n	80087cc <_printf_common+0x58>
 800883c:	2301      	movs	r3, #1
 800883e:	4622      	mov	r2, r4
 8008840:	4641      	mov	r1, r8
 8008842:	4638      	mov	r0, r7
 8008844:	47c8      	blx	r9
 8008846:	3001      	adds	r0, #1
 8008848:	d0e6      	beq.n	8008818 <_printf_common+0xa4>
 800884a:	3601      	adds	r6, #1
 800884c:	e7d9      	b.n	8008802 <_printf_common+0x8e>
	...

08008850 <_printf_i>:
 8008850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	7e0f      	ldrb	r7, [r1, #24]
 8008856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008858:	2f78      	cmp	r7, #120	@ 0x78
 800885a:	4691      	mov	r9, r2
 800885c:	4680      	mov	r8, r0
 800885e:	460c      	mov	r4, r1
 8008860:	469a      	mov	sl, r3
 8008862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008866:	d807      	bhi.n	8008878 <_printf_i+0x28>
 8008868:	2f62      	cmp	r7, #98	@ 0x62
 800886a:	d80a      	bhi.n	8008882 <_printf_i+0x32>
 800886c:	2f00      	cmp	r7, #0
 800886e:	f000 80d1 	beq.w	8008a14 <_printf_i+0x1c4>
 8008872:	2f58      	cmp	r7, #88	@ 0x58
 8008874:	f000 80b8 	beq.w	80089e8 <_printf_i+0x198>
 8008878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800887c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008880:	e03a      	b.n	80088f8 <_printf_i+0xa8>
 8008882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008886:	2b15      	cmp	r3, #21
 8008888:	d8f6      	bhi.n	8008878 <_printf_i+0x28>
 800888a:	a101      	add	r1, pc, #4	@ (adr r1, 8008890 <_printf_i+0x40>)
 800888c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088fd 	.word	0x080088fd
 8008898:	08008879 	.word	0x08008879
 800889c:	08008879 	.word	0x08008879
 80088a0:	08008879 	.word	0x08008879
 80088a4:	08008879 	.word	0x08008879
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008879 	.word	0x08008879
 80088b0:	08008879 	.word	0x08008879
 80088b4:	08008879 	.word	0x08008879
 80088b8:	08008879 	.word	0x08008879
 80088bc:	080089fb 	.word	0x080089fb
 80088c0:	08008927 	.word	0x08008927
 80088c4:	080089b5 	.word	0x080089b5
 80088c8:	08008879 	.word	0x08008879
 80088cc:	08008879 	.word	0x08008879
 80088d0:	08008a1d 	.word	0x08008a1d
 80088d4:	08008879 	.word	0x08008879
 80088d8:	08008927 	.word	0x08008927
 80088dc:	08008879 	.word	0x08008879
 80088e0:	08008879 	.word	0x08008879
 80088e4:	080089bd 	.word	0x080089bd
 80088e8:	6833      	ldr	r3, [r6, #0]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6032      	str	r2, [r6, #0]
 80088f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088f8:	2301      	movs	r3, #1
 80088fa:	e09c      	b.n	8008a36 <_printf_i+0x1e6>
 80088fc:	6833      	ldr	r3, [r6, #0]
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	1d19      	adds	r1, r3, #4
 8008902:	6031      	str	r1, [r6, #0]
 8008904:	0606      	lsls	r6, r0, #24
 8008906:	d501      	bpl.n	800890c <_printf_i+0xbc>
 8008908:	681d      	ldr	r5, [r3, #0]
 800890a:	e003      	b.n	8008914 <_printf_i+0xc4>
 800890c:	0645      	lsls	r5, r0, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0xb8>
 8008910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008914:	2d00      	cmp	r5, #0
 8008916:	da03      	bge.n	8008920 <_printf_i+0xd0>
 8008918:	232d      	movs	r3, #45	@ 0x2d
 800891a:	426d      	negs	r5, r5
 800891c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008920:	4858      	ldr	r0, [pc, #352]	@ (8008a84 <_printf_i+0x234>)
 8008922:	230a      	movs	r3, #10
 8008924:	e011      	b.n	800894a <_printf_i+0xfa>
 8008926:	6821      	ldr	r1, [r4, #0]
 8008928:	6833      	ldr	r3, [r6, #0]
 800892a:	0608      	lsls	r0, r1, #24
 800892c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008930:	d402      	bmi.n	8008938 <_printf_i+0xe8>
 8008932:	0649      	lsls	r1, r1, #25
 8008934:	bf48      	it	mi
 8008936:	b2ad      	uxthmi	r5, r5
 8008938:	2f6f      	cmp	r7, #111	@ 0x6f
 800893a:	4852      	ldr	r0, [pc, #328]	@ (8008a84 <_printf_i+0x234>)
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	bf14      	ite	ne
 8008940:	230a      	movne	r3, #10
 8008942:	2308      	moveq	r3, #8
 8008944:	2100      	movs	r1, #0
 8008946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800894a:	6866      	ldr	r6, [r4, #4]
 800894c:	60a6      	str	r6, [r4, #8]
 800894e:	2e00      	cmp	r6, #0
 8008950:	db05      	blt.n	800895e <_printf_i+0x10e>
 8008952:	6821      	ldr	r1, [r4, #0]
 8008954:	432e      	orrs	r6, r5
 8008956:	f021 0104 	bic.w	r1, r1, #4
 800895a:	6021      	str	r1, [r4, #0]
 800895c:	d04b      	beq.n	80089f6 <_printf_i+0x1a6>
 800895e:	4616      	mov	r6, r2
 8008960:	fbb5 f1f3 	udiv	r1, r5, r3
 8008964:	fb03 5711 	mls	r7, r3, r1, r5
 8008968:	5dc7      	ldrb	r7, [r0, r7]
 800896a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800896e:	462f      	mov	r7, r5
 8008970:	42bb      	cmp	r3, r7
 8008972:	460d      	mov	r5, r1
 8008974:	d9f4      	bls.n	8008960 <_printf_i+0x110>
 8008976:	2b08      	cmp	r3, #8
 8008978:	d10b      	bne.n	8008992 <_printf_i+0x142>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	07df      	lsls	r7, r3, #31
 800897e:	d508      	bpl.n	8008992 <_printf_i+0x142>
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	6861      	ldr	r1, [r4, #4]
 8008984:	4299      	cmp	r1, r3
 8008986:	bfde      	ittt	le
 8008988:	2330      	movle	r3, #48	@ 0x30
 800898a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800898e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008992:	1b92      	subs	r2, r2, r6
 8008994:	6122      	str	r2, [r4, #16]
 8008996:	f8cd a000 	str.w	sl, [sp]
 800899a:	464b      	mov	r3, r9
 800899c:	aa03      	add	r2, sp, #12
 800899e:	4621      	mov	r1, r4
 80089a0:	4640      	mov	r0, r8
 80089a2:	f7ff fee7 	bl	8008774 <_printf_common>
 80089a6:	3001      	adds	r0, #1
 80089a8:	d14a      	bne.n	8008a40 <_printf_i+0x1f0>
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	b004      	add	sp, #16
 80089b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	f043 0320 	orr.w	r3, r3, #32
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	4832      	ldr	r0, [pc, #200]	@ (8008a88 <_printf_i+0x238>)
 80089be:	2778      	movs	r7, #120	@ 0x78
 80089c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	6831      	ldr	r1, [r6, #0]
 80089c8:	061f      	lsls	r7, r3, #24
 80089ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80089ce:	d402      	bmi.n	80089d6 <_printf_i+0x186>
 80089d0:	065f      	lsls	r7, r3, #25
 80089d2:	bf48      	it	mi
 80089d4:	b2ad      	uxthmi	r5, r5
 80089d6:	6031      	str	r1, [r6, #0]
 80089d8:	07d9      	lsls	r1, r3, #31
 80089da:	bf44      	itt	mi
 80089dc:	f043 0320 	orrmi.w	r3, r3, #32
 80089e0:	6023      	strmi	r3, [r4, #0]
 80089e2:	b11d      	cbz	r5, 80089ec <_printf_i+0x19c>
 80089e4:	2310      	movs	r3, #16
 80089e6:	e7ad      	b.n	8008944 <_printf_i+0xf4>
 80089e8:	4826      	ldr	r0, [pc, #152]	@ (8008a84 <_printf_i+0x234>)
 80089ea:	e7e9      	b.n	80089c0 <_printf_i+0x170>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	f023 0320 	bic.w	r3, r3, #32
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	e7f6      	b.n	80089e4 <_printf_i+0x194>
 80089f6:	4616      	mov	r6, r2
 80089f8:	e7bd      	b.n	8008976 <_printf_i+0x126>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	6825      	ldr	r5, [r4, #0]
 80089fe:	6961      	ldr	r1, [r4, #20]
 8008a00:	1d18      	adds	r0, r3, #4
 8008a02:	6030      	str	r0, [r6, #0]
 8008a04:	062e      	lsls	r6, r5, #24
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	d501      	bpl.n	8008a0e <_printf_i+0x1be>
 8008a0a:	6019      	str	r1, [r3, #0]
 8008a0c:	e002      	b.n	8008a14 <_printf_i+0x1c4>
 8008a0e:	0668      	lsls	r0, r5, #25
 8008a10:	d5fb      	bpl.n	8008a0a <_printf_i+0x1ba>
 8008a12:	8019      	strh	r1, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	4616      	mov	r6, r2
 8008a1a:	e7bc      	b.n	8008996 <_printf_i+0x146>
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	6032      	str	r2, [r6, #0]
 8008a22:	681e      	ldr	r6, [r3, #0]
 8008a24:	6862      	ldr	r2, [r4, #4]
 8008a26:	2100      	movs	r1, #0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7f7 fbd9 	bl	80001e0 <memchr>
 8008a2e:	b108      	cbz	r0, 8008a34 <_printf_i+0x1e4>
 8008a30:	1b80      	subs	r0, r0, r6
 8008a32:	6060      	str	r0, [r4, #4]
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a3e:	e7aa      	b.n	8008996 <_printf_i+0x146>
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	4632      	mov	r2, r6
 8008a44:	4649      	mov	r1, r9
 8008a46:	4640      	mov	r0, r8
 8008a48:	47d0      	blx	sl
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d0ad      	beq.n	80089aa <_printf_i+0x15a>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	079b      	lsls	r3, r3, #30
 8008a52:	d413      	bmi.n	8008a7c <_printf_i+0x22c>
 8008a54:	68e0      	ldr	r0, [r4, #12]
 8008a56:	9b03      	ldr	r3, [sp, #12]
 8008a58:	4298      	cmp	r0, r3
 8008a5a:	bfb8      	it	lt
 8008a5c:	4618      	movlt	r0, r3
 8008a5e:	e7a6      	b.n	80089ae <_printf_i+0x15e>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4632      	mov	r2, r6
 8008a64:	4649      	mov	r1, r9
 8008a66:	4640      	mov	r0, r8
 8008a68:	47d0      	blx	sl
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d09d      	beq.n	80089aa <_printf_i+0x15a>
 8008a6e:	3501      	adds	r5, #1
 8008a70:	68e3      	ldr	r3, [r4, #12]
 8008a72:	9903      	ldr	r1, [sp, #12]
 8008a74:	1a5b      	subs	r3, r3, r1
 8008a76:	42ab      	cmp	r3, r5
 8008a78:	dcf2      	bgt.n	8008a60 <_printf_i+0x210>
 8008a7a:	e7eb      	b.n	8008a54 <_printf_i+0x204>
 8008a7c:	2500      	movs	r5, #0
 8008a7e:	f104 0619 	add.w	r6, r4, #25
 8008a82:	e7f5      	b.n	8008a70 <_printf_i+0x220>
 8008a84:	08008f29 	.word	0x08008f29
 8008a88:	08008f3a 	.word	0x08008f3a

08008a8c <__sflush_r>:
 8008a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a94:	0716      	lsls	r6, r2, #28
 8008a96:	4605      	mov	r5, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	d454      	bmi.n	8008b46 <__sflush_r+0xba>
 8008a9c:	684b      	ldr	r3, [r1, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	dc02      	bgt.n	8008aa8 <__sflush_r+0x1c>
 8008aa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dd48      	ble.n	8008b3a <__sflush_r+0xae>
 8008aa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	d045      	beq.n	8008b3a <__sflush_r+0xae>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ab4:	682f      	ldr	r7, [r5, #0]
 8008ab6:	6a21      	ldr	r1, [r4, #32]
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	d030      	beq.n	8008b1e <__sflush_r+0x92>
 8008abc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	0759      	lsls	r1, r3, #29
 8008ac2:	d505      	bpl.n	8008ad0 <__sflush_r+0x44>
 8008ac4:	6863      	ldr	r3, [r4, #4]
 8008ac6:	1ad2      	subs	r2, r2, r3
 8008ac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aca:	b10b      	cbz	r3, 8008ad0 <__sflush_r+0x44>
 8008acc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ad4:	6a21      	ldr	r1, [r4, #32]
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b0      	blx	r6
 8008ada:	1c43      	adds	r3, r0, #1
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	d106      	bne.n	8008aee <__sflush_r+0x62>
 8008ae0:	6829      	ldr	r1, [r5, #0]
 8008ae2:	291d      	cmp	r1, #29
 8008ae4:	d82b      	bhi.n	8008b3e <__sflush_r+0xb2>
 8008ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b90 <__sflush_r+0x104>)
 8008ae8:	40ca      	lsrs	r2, r1
 8008aea:	07d6      	lsls	r6, r2, #31
 8008aec:	d527      	bpl.n	8008b3e <__sflush_r+0xb2>
 8008aee:	2200      	movs	r2, #0
 8008af0:	6062      	str	r2, [r4, #4]
 8008af2:	04d9      	lsls	r1, r3, #19
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	6022      	str	r2, [r4, #0]
 8008af8:	d504      	bpl.n	8008b04 <__sflush_r+0x78>
 8008afa:	1c42      	adds	r2, r0, #1
 8008afc:	d101      	bne.n	8008b02 <__sflush_r+0x76>
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	b903      	cbnz	r3, 8008b04 <__sflush_r+0x78>
 8008b02:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b06:	602f      	str	r7, [r5, #0]
 8008b08:	b1b9      	cbz	r1, 8008b3a <__sflush_r+0xae>
 8008b0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d002      	beq.n	8008b18 <__sflush_r+0x8c>
 8008b12:	4628      	mov	r0, r5
 8008b14:	f7ff fbde 	bl	80082d4 <_free_r>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b1c:	e00d      	b.n	8008b3a <__sflush_r+0xae>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	4602      	mov	r2, r0
 8008b26:	1c50      	adds	r0, r2, #1
 8008b28:	d1c9      	bne.n	8008abe <__sflush_r+0x32>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0c6      	beq.n	8008abe <__sflush_r+0x32>
 8008b30:	2b1d      	cmp	r3, #29
 8008b32:	d001      	beq.n	8008b38 <__sflush_r+0xac>
 8008b34:	2b16      	cmp	r3, #22
 8008b36:	d11e      	bne.n	8008b76 <__sflush_r+0xea>
 8008b38:	602f      	str	r7, [r5, #0]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e022      	b.n	8008b84 <__sflush_r+0xf8>
 8008b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b42:	b21b      	sxth	r3, r3
 8008b44:	e01b      	b.n	8008b7e <__sflush_r+0xf2>
 8008b46:	690f      	ldr	r7, [r1, #16]
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	d0f6      	beq.n	8008b3a <__sflush_r+0xae>
 8008b4c:	0793      	lsls	r3, r2, #30
 8008b4e:	680e      	ldr	r6, [r1, #0]
 8008b50:	bf08      	it	eq
 8008b52:	694b      	ldreq	r3, [r1, #20]
 8008b54:	600f      	str	r7, [r1, #0]
 8008b56:	bf18      	it	ne
 8008b58:	2300      	movne	r3, #0
 8008b5a:	eba6 0807 	sub.w	r8, r6, r7
 8008b5e:	608b      	str	r3, [r1, #8]
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	dde9      	ble.n	8008b3a <__sflush_r+0xae>
 8008b66:	6a21      	ldr	r1, [r4, #32]
 8008b68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b6a:	4643      	mov	r3, r8
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b0      	blx	r6
 8008b72:	2800      	cmp	r0, #0
 8008b74:	dc08      	bgt.n	8008b88 <__sflush_r+0xfc>
 8008b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	4407      	add	r7, r0
 8008b8a:	eba8 0800 	sub.w	r8, r8, r0
 8008b8e:	e7e7      	b.n	8008b60 <__sflush_r+0xd4>
 8008b90:	20400001 	.word	0x20400001

08008b94 <_fflush_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	4605      	mov	r5, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	b913      	cbnz	r3, 8008ba4 <_fflush_r+0x10>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	b118      	cbz	r0, 8008bae <_fflush_r+0x1a>
 8008ba6:	6a03      	ldr	r3, [r0, #32]
 8008ba8:	b90b      	cbnz	r3, 8008bae <_fflush_r+0x1a>
 8008baa:	f7ff f909 	bl	8007dc0 <__sinit>
 8008bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0f3      	beq.n	8008b9e <_fflush_r+0xa>
 8008bb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bb8:	07d0      	lsls	r0, r2, #31
 8008bba:	d404      	bmi.n	8008bc6 <_fflush_r+0x32>
 8008bbc:	0599      	lsls	r1, r3, #22
 8008bbe:	d402      	bmi.n	8008bc6 <_fflush_r+0x32>
 8008bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc2:	f7ff fb76 	bl	80082b2 <__retarget_lock_acquire_recursive>
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f7ff ff5f 	bl	8008a8c <__sflush_r>
 8008bce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bd0:	07da      	lsls	r2, r3, #31
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	d4e4      	bmi.n	8008ba0 <_fflush_r+0xc>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	059b      	lsls	r3, r3, #22
 8008bda:	d4e1      	bmi.n	8008ba0 <_fflush_r+0xc>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bde:	f7ff fb69 	bl	80082b4 <__retarget_lock_release_recursive>
 8008be2:	e7dd      	b.n	8008ba0 <_fflush_r+0xc>

08008be4 <__swhatbuf_r>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	460c      	mov	r4, r1
 8008be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bec:	2900      	cmp	r1, #0
 8008bee:	b096      	sub	sp, #88	@ 0x58
 8008bf0:	4615      	mov	r5, r2
 8008bf2:	461e      	mov	r6, r3
 8008bf4:	da0d      	bge.n	8008c12 <__swhatbuf_r+0x2e>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bfc:	f04f 0100 	mov.w	r1, #0
 8008c00:	bf14      	ite	ne
 8008c02:	2340      	movne	r3, #64	@ 0x40
 8008c04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c08:	2000      	movs	r0, #0
 8008c0a:	6031      	str	r1, [r6, #0]
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	b016      	add	sp, #88	@ 0x58
 8008c10:	bd70      	pop	{r4, r5, r6, pc}
 8008c12:	466a      	mov	r2, sp
 8008c14:	f000 f862 	bl	8008cdc <_fstat_r>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	dbec      	blt.n	8008bf6 <__swhatbuf_r+0x12>
 8008c1c:	9901      	ldr	r1, [sp, #4]
 8008c1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c26:	4259      	negs	r1, r3
 8008c28:	4159      	adcs	r1, r3
 8008c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c2e:	e7eb      	b.n	8008c08 <__swhatbuf_r+0x24>

08008c30 <__smakebuf_r>:
 8008c30:	898b      	ldrh	r3, [r1, #12]
 8008c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c34:	079d      	lsls	r5, r3, #30
 8008c36:	4606      	mov	r6, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	d507      	bpl.n	8008c4c <__smakebuf_r+0x1c>
 8008c3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	6123      	str	r3, [r4, #16]
 8008c44:	2301      	movs	r3, #1
 8008c46:	6163      	str	r3, [r4, #20]
 8008c48:	b003      	add	sp, #12
 8008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c4c:	ab01      	add	r3, sp, #4
 8008c4e:	466a      	mov	r2, sp
 8008c50:	f7ff ffc8 	bl	8008be4 <__swhatbuf_r>
 8008c54:	9f00      	ldr	r7, [sp, #0]
 8008c56:	4605      	mov	r5, r0
 8008c58:	4639      	mov	r1, r7
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff fba6 	bl	80083ac <_malloc_r>
 8008c60:	b948      	cbnz	r0, 8008c76 <__smakebuf_r+0x46>
 8008c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c66:	059a      	lsls	r2, r3, #22
 8008c68:	d4ee      	bmi.n	8008c48 <__smakebuf_r+0x18>
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	f043 0302 	orr.w	r3, r3, #2
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	e7e2      	b.n	8008c3c <__smakebuf_r+0xc>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	6020      	str	r0, [r4, #0]
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c86:	b15b      	cbz	r3, 8008ca0 <__smakebuf_r+0x70>
 8008c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f000 f837 	bl	8008d00 <_isatty_r>
 8008c92:	b128      	cbz	r0, 8008ca0 <__smakebuf_r+0x70>
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	f023 0303 	bic.w	r3, r3, #3
 8008c9a:	f043 0301 	orr.w	r3, r3, #1
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	431d      	orrs	r5, r3
 8008ca4:	81a5      	strh	r5, [r4, #12]
 8008ca6:	e7cf      	b.n	8008c48 <__smakebuf_r+0x18>

08008ca8 <memmove>:
 8008ca8:	4288      	cmp	r0, r1
 8008caa:	b510      	push	{r4, lr}
 8008cac:	eb01 0402 	add.w	r4, r1, r2
 8008cb0:	d902      	bls.n	8008cb8 <memmove+0x10>
 8008cb2:	4284      	cmp	r4, r0
 8008cb4:	4623      	mov	r3, r4
 8008cb6:	d807      	bhi.n	8008cc8 <memmove+0x20>
 8008cb8:	1e43      	subs	r3, r0, #1
 8008cba:	42a1      	cmp	r1, r4
 8008cbc:	d008      	beq.n	8008cd0 <memmove+0x28>
 8008cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cc6:	e7f8      	b.n	8008cba <memmove+0x12>
 8008cc8:	4402      	add	r2, r0
 8008cca:	4601      	mov	r1, r0
 8008ccc:	428a      	cmp	r2, r1
 8008cce:	d100      	bne.n	8008cd2 <memmove+0x2a>
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cda:	e7f7      	b.n	8008ccc <memmove+0x24>

08008cdc <_fstat_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	@ (8008cfc <_fstat_r+0x20>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	f7f8 facc 	bl	8001286 <_fstat>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d102      	bne.n	8008cf8 <_fstat_r+0x1c>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	b103      	cbz	r3, 8008cf8 <_fstat_r+0x1c>
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20006050 	.word	0x20006050

08008d00 <_isatty_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d06      	ldr	r5, [pc, #24]	@ (8008d1c <_isatty_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	f7f8 facb 	bl	80012a6 <_isatty>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_isatty_r+0x1a>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_isatty_r+0x1a>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20006050 	.word	0x20006050

08008d20 <_sbrk_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d06      	ldr	r5, [pc, #24]	@ (8008d3c <_sbrk_r+0x1c>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	f7f8 fad4 	bl	80012d8 <_sbrk>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_sbrk_r+0x1a>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_sbrk_r+0x1a>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	20006050 	.word	0x20006050

08008d40 <_realloc_r>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	4607      	mov	r7, r0
 8008d46:	4614      	mov	r4, r2
 8008d48:	460d      	mov	r5, r1
 8008d4a:	b921      	cbnz	r1, 8008d56 <_realloc_r+0x16>
 8008d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	4611      	mov	r1, r2
 8008d52:	f7ff bb2b 	b.w	80083ac <_malloc_r>
 8008d56:	b92a      	cbnz	r2, 8008d64 <_realloc_r+0x24>
 8008d58:	f7ff fabc 	bl	80082d4 <_free_r>
 8008d5c:	4625      	mov	r5, r4
 8008d5e:	4628      	mov	r0, r5
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	f000 f81a 	bl	8008d9c <_malloc_usable_size_r>
 8008d68:	4284      	cmp	r4, r0
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	d802      	bhi.n	8008d74 <_realloc_r+0x34>
 8008d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d72:	d8f4      	bhi.n	8008d5e <_realloc_r+0x1e>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4638      	mov	r0, r7
 8008d78:	f7ff fb18 	bl	80083ac <_malloc_r>
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	b908      	cbnz	r0, 8008d84 <_realloc_r+0x44>
 8008d80:	4645      	mov	r5, r8
 8008d82:	e7ec      	b.n	8008d5e <_realloc_r+0x1e>
 8008d84:	42b4      	cmp	r4, r6
 8008d86:	4622      	mov	r2, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	bf28      	it	cs
 8008d8c:	4632      	movcs	r2, r6
 8008d8e:	f7ff fa92 	bl	80082b6 <memcpy>
 8008d92:	4629      	mov	r1, r5
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff fa9d 	bl	80082d4 <_free_r>
 8008d9a:	e7f1      	b.n	8008d80 <_realloc_r+0x40>

08008d9c <_malloc_usable_size_r>:
 8008d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da0:	1f18      	subs	r0, r3, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfbc      	itt	lt
 8008da6:	580b      	ldrlt	r3, [r1, r0]
 8008da8:	18c0      	addlt	r0, r0, r3
 8008daa:	4770      	bx	lr

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
